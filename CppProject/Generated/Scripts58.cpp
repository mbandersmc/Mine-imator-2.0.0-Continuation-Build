/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.04.19 18:42:27 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType tab_frame_editor_scale(ScopeAny self)
	{
		if (!idArr(global::tl_edit, value_type).Value(e_value_type_TRANSFORM_SCA))
			return IntType(0);
		sInt(context_menu_group_temp) = e_context_group_SCALE;
		tab_frame_editor_buttons(self);
		draw_label(self, { text_get({ /*"frameeditorscale"*/ STR(3078) }), sVar(dx), sVar(dy) + IntType(12), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		sVar(dy) += IntType(26);
		RealType snapval;
		IntType script;
		snapval = ((sReal(dragger_snap) > 0) ? sReal(setting_snap_size_scale) : snap_min);
		script = ((ObjType(obj_category, idInt(sVar(tab), transform))->scale_all > 0) ? ID_action_tl_frame_scale_all_axis : ID_action_tl_frame_scale);
		if (ObjType(obj_category, ObjType(obj_tab, sInt(frame_editor))->transform)->scale_all > 0)
		{
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditorscalexyz"*/ STR(3079), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_SCA_X), max({ 0.0001, (RealType)idVar(global::tl_edit, value).Value(e_value_SCA_X) / 50.0 }), snap_min, no_limit, IntType(1), snapval, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_sca_x, script);
			tab_next(self);
		}
		else
		{
			textfield_group_add(self, { /*"frameeditorscalex"*/ STR(3080), idVar(global::tl_edit, value).Value(e_value_SCA_X), IntType(1), script, X_, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_sca_x, null_, max({ 0.0001, (RealType)idVar(global::tl_edit, value).Value(e_value_SCA_X) / 50.0 }) });
			global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Y_ : Z_);
			textfield_group_add(self, { /*"frameeditorscaley"*/ STR(3081), idVar(global::tl_edit, value).Value(e_value_SCA_X + global::axis_edit), IntType(1), script, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_sca_y, null_, max({ 0.0001, (RealType)idVar(global::tl_edit, value).Value(e_value_SCA_X + global::axis_edit) / 50.0 }) });
			global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Z_ : Y_);
			textfield_group_add(self, { /*"frameeditorscalez"*/ STR(3082), idVar(global::tl_edit, value).Value(e_value_SCA_X + global::axis_edit), IntType(1), script, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), transform))->tbx_sca_z, null_, max({ 0.0001, (RealType)idVar(global::tl_edit, value).Value(e_value_SCA_X + global::axis_edit) / 50.0 }) });
			tab_control_textfield_group(self, false);
			draw_textfield_group(self, /*"frameeditorscale"*/ STR(3078), sVar(dx), sVar(dy), sVar(dw), 0.1, snap_min, no_limit, snapval, false, true, IntType(3));
			tab_next(self);
		}
		
		sInt(context_menu_group_temp) = null_;
		return 0.0;
	}
	
	void tab_frame_editor_sound(ScopeAny self)
	{
		VarType text;
		if (idVar(global::tl_edit, value).Value(e_value_SOUND_OBJ) != null_)
			text = idVar(idVar(global::tl_edit, value).Value(e_value_SOUND_OBJ), display_name);
		else
			text = text_get({ /*"listnone"*/ STR(754) });
		
		tab_control_menu(self);
		draw_button_menu(self, { /*"frameeditorsoundfile"*/ STR(1388), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_SOUND_OBJ), text, ID_action_tl_frame_sound_obj });
		tab_next(self);
		tab_control_meter(self);
		draw_meter(self, /*"frameeditorsoundvolume"*/ STR(3083), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_SOUND_VOLUME) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), sound))->tbx_volume, ID_action_tl_frame_sound_volume);
		tab_next(self);
		tab_control_meter(self);
		draw_meter(self, /*"frameeditorsoundpitch"*/ STR(3084), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_SOUND_PITCH) * IntType(100)), IntType(50), IntType(200), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), sound))->tbx_pitch, ID_action_tl_frame_sound_pitch);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorsoundstart"*/ STR(3085), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_SOUND_START), max({ 0.01, 0.005 * abs(idVar(global::tl_edit, value).Value(e_value_SOUND_START)) }), IntType(0), no_limit, IntType(0), IntType(0), ObjType(obj_category, idInt(sVar(tab), sound))->tbx_start, ID_action_tl_frame_sound_start);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"frameeditorsoundend"*/ STR(3086), sVar(dx), sVar(dy), dragger_width, idVar(global::tl_edit, value).Value(e_value_SOUND_END), max({ 0.01, 0.005 * abs(idVar(global::tl_edit, value).Value(e_value_SOUND_END)) }), -no_limit, no_limit, IntType(0), IntType(0), ObjType(obj_category, idInt(sVar(tab), sound))->tbx_end, ID_action_tl_frame_sound_end);
		tab_next(self);
	}
	
	RealType tab_frame_editor_text(ScopeAny self)
	{
		if (idVar(global::tl_edit, temp) == null_ || idVar(global::tl_edit, type) != e_tl_type_TEXT)
			return IntType(0);
		VarType text;
		if (idVar(global::tl_edit, value).Value(e_value_TEXT_FONT) == null_)
			text = text_get({ /*"listdefault"*/ STR(780), idVar(idVar(idVar(global::tl_edit, temp), text_font), display_name) });
		else
			text = idVar(idVar(global::tl_edit, value).Value(e_value_TEXT_FONT), display_name);
		
		tab_control_menu(self);
		draw_button_menu(self, { /*"frameeditortextfont"*/ STR(1389), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::tl_edit, value).Value(e_value_TEXT_FONT), text, ID_action_tl_frame_text_font });
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"frameeditortextaa"*/ STR(3087), sVar(dx), sVar(dy), idVar(global::tl_edit, value).Value(e_value_TEXT_AA), ID_action_tl_frame_text_aa, /*"frameeditortextaatip"*/ STR(3088));
		tab_next(self);
		sVar(dy) += IntType(20);
		draw_label(self, { text_get({ /*"frameeditortextalignment"*/ STR(3089) }) + /*":"*/ STR(755), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		VarType dwold, dxold;
		dwold = sVar(dw);
		dxold = sVar(dx);
		sVar(dw) = floor((RealType)sVar(dw) / 2.0 - IntType(4));
		tab_control_togglebutton(self);
		togglebutton_add(self, { /*"frameeditortextleft"*/ STR(3090), icons_TEXT_ALIGN_LEFT, /*"left"*/ STR(188), idVar(global::tl_edit, value).Value(e_value_TEXT_HALIGN) == /*"left"*/ STR(188), ID_action_tl_frame_text_halign });
		togglebutton_add(self, { /*"frameeditortextcenter"*/ STR(3091), icons_TEXT_ALIGN_CENTER, /*"center"*/ STR(1408), idVar(global::tl_edit, value).Value(e_value_TEXT_HALIGN) == /*"center"*/ STR(1408), ID_action_tl_frame_text_halign });
		togglebutton_add(self, { /*"frameeditortextright"*/ STR(3092), icons_TEXT_ALIGN_RIGHT, /*"right"*/ STR(189), idVar(global::tl_edit, value).Value(e_value_TEXT_HALIGN) == /*"right"*/ STR(189), ID_action_tl_frame_text_halign });
		draw_togglebutton(self, /*"frameeditortexthalign"*/ STR(3093), sVar(dx), sVar(dy), false);
		sVar(dx) += (sVar(dw) + IntType(8));
		togglebutton_add(self, { /*"frameeditortexttop"*/ STR(3094), icons_ALIGN_TOP, /*"top"*/ STR(187), idVar(global::tl_edit, value).Value(e_value_TEXT_VALIGN) == /*"top"*/ STR(187), ID_action_tl_frame_text_valign });
		togglebutton_add(self, { /*"frameeditortextcenter"*/ STR(3091), icons_ALIGN_MIDDLE, /*"center"*/ STR(1408), idVar(global::tl_edit, value).Value(e_value_TEXT_VALIGN) == /*"center"*/ STR(1408), ID_action_tl_frame_text_valign });
		togglebutton_add(self, { /*"frameeditortextbottom"*/ STR(3095), icons_ALIGN_BOTTOM, /*"bottom"*/ STR(186), idVar(global::tl_edit, value).Value(e_value_TEXT_VALIGN) == /*"bottom"*/ STR(186), ID_action_tl_frame_text_valign });
		draw_togglebutton(self, /*"frameeditortextvalign"*/ STR(3096), sVar(dx), sVar(dy), false);
		tab_next(self);
		sVar(dw) = dwold;
		sVar(dx) = dxold;
		tab_control_textfield(self, true, IntType(76));
		ObjType(obj_textbox, idInt(idVar(sVar(tab), text), tbx_text))->text = idVar(global::tl_edit, value).Value(e_value_TEXT);
		draw_textfield(self, /*"timelineeditortext"*/ STR(3097), sVar(dx), sVar(dy), sVar(dw), IntType(76), idInt(idVar(sVar(tab), text), tbx_text), ID_action_tl_frame_text, idVar(global::tl_edit, text), /*"top"*/ STR(187));
		tab_next(self);
		return 0.0;
	}
	
	RealType tab_frame_editor_texture(ScopeAny self)
	{
		if (!idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_TEXTURE))
			return IntType(0);
		VarType texobj, tex;
		StringType name;
		tex = null_;
		name = /*""*/ STR(0);
		if (idVar(global::tl_edit, temp) != null_)
		{
			switch ((IntType)idVar(global::tl_edit, type))
			{
				case e_tl_type_CHARACTER:
				case e_tl_type_SPECIAL_BLOCK:
				case e_tl_type_MODEL:
				case e_tl_type_BODYPART:
				{
					name = /*"frameeditor"*/ STR(3098) + DsList(global::tl_type_name_list).Value(idVar(global::tl_edit, type)) + /*"tex"*/ STR(2369);
					VarType modelfile = idVar(idVar(global::tl_edit, temp), model_file);
					if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
						modelfile = idVar(global::tl_edit, model_part);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
					{
						texobj = temp_get_model_texobj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ));
						tex = temp_get_model_tex_preview(self, texobj, modelfile);
					}
					
					break;
				}
				
				case e_tl_type_BLOCK:
				case e_tl_type_SCENERY:
				{
					name = /*"frameeditorblocktex"*/ STR(1378);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_block_texobj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ));
					
					tex = idInt(texobj, block_preview_texture);
					break;
				}
				
				case e_tl_type_ITEM:
				{
					name = /*"frameeditoritemtex"*/ STR(1381);
					texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ);
					if (texobj == null_)
						texobj = idVar(idVar(global::tl_edit, temp), item_tex);
					if (!res_is_ready(texobj))
						texobj = global::mc_res;
					tex = idInt(texobj, block_preview_texture);
					if (tex == null_)
						tex = idVar(texobj, texture);
					break;
				}
				
				default:
				{
					name = /*"frameeditorshapetex"*/ STR(1384);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_shape_texobj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ));
					
					if (texobj != null_ && idVar(texobj, type) != e_tl_type_CAMERA)
						tex = idVar(texobj, texture);
					break;
				}
			}
			
		}
		if (idVar(global::tl_edit, type) == e_tl_type_PATH)
		{
			name = /*"frameeditorshapetex"*/ STR(1384);
			texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ);
			if (texobj == null_)
				tex = ID_spr_shape;
			else
				tex = idVar(texobj, texture);
			
		}
		if (name == /*""*/ STR(0))
			return IntType(0);
		VarType text;
		if (texobj != null_)
			text = idVar(texobj, display_name);
		else
			text = text_get({ /*"listnone"*/ STR(754) });
		
		if (idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ) == null_)
			text = text_get({ /*"listdefault"*/ STR(780), text });
		tab_control_menu(self, { sReal(ui_large_height) });
		draw_button_menu(self, { name, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, value).Value(e_value_TEXTURE_OBJ), text, ID_action_tl_frame_texture_obj, false, tex });
		tab_next(self);
		return 0.0;
	}
	
	void tab_frame_editor_texture_material(ScopeAny self)
	{
		VarType texobj, tex;
		StringType name;
		BoolType sliders;
		tex = null_;
		sliders = false;
		name = /*""*/ STR(0);
		if (idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_TEXTURE) && idVar(global::tl_edit, temp) != null_)
		{
			switch ((IntType)idVar(global::tl_edit, type))
			{
				case e_tl_type_CHARACTER:
				case e_tl_type_SPECIAL_BLOCK:
				case e_tl_type_MODEL:
				case e_tl_type_BODYPART:
				{
					name = /*"frameeditor"*/ STR(3098) + DsList(global::tl_type_name_list).Value(idVar(global::tl_edit, type)) + /*"texmaterial"*/ STR(3099);
					VarType modelfile = idVar(idVar(global::tl_edit, temp), model_file);
					if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
						modelfile = idVar(global::tl_edit, model_part);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
					{
						texobj = temp_get_model_tex_material_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ));
						tex = temp_get_model_tex_material_preview(self, texobj, modelfile);
					}
					
					if (texobj == global::mc_res || texobj == null_)
						sliders = true;
					break;
				}
				
				case e_tl_type_BLOCK:
				case e_tl_type_SCENERY:
				{
					name = /*"frameeditorblocktexmaterial"*/ STR(1379);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_block_tex_material_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ));
					
					if (!res_is_ready(texobj))
						texobj = global::mc_res;
					tex = idInt(texobj, block_preview_texture);
					if (texobj == global::mc_res)
						sliders = true;
					break;
				}
				
				case e_tl_type_ITEM:
				{
					name = /*"frameeditoritemtexmaterial"*/ STR(1382);
					texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ);
					if (texobj == null_)
						texobj = idVar(idVar(global::tl_edit, temp), item_tex_material);
					if (!res_is_ready(texobj))
						texobj = global::mc_res;
					tex = idInt(texobj, block_preview_texture);
					if (tex == null_)
						tex = idVar(sVar(res), texture);
					if (texobj == global::mc_res)
						sliders = true;
					break;
				}
				
				default:
				{
					name = /*"frameeditorshapetexmaterial"*/ STR(1385);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_shape_tex_material_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ));
					
					if (texobj != null_)
						tex = idVar(texobj, texture);
					if (texobj == null_)
						sliders = true;
					break;
				}
			}
			
			if (idVar(global::tl_edit, type) == e_tl_type_PATH)
			{
				name = /*"frameeditorshapetexmaterial"*/ STR(1385);
				texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ);
				if (texobj == null_)
					tex = ID_spr_default_material;
				else
					tex = idVar(texobj, texture);
				
				if (texobj == null_)
					sliders = true;
			}
			if (name != /*""*/ STR(0))
			{
				VarType text;
				if (texobj != null_)
					text = idVar(texobj, display_name);
				else
					text = text_get({ /*"listnone"*/ STR(754) });
				
				if (idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ) == null_)
					text = text_get({ /*"listdefault"*/ STR(780), text });
				if (sVar(project_render_material_maps) > 0)
				{
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { name, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, value).Value(e_value_TEXTURE_MATERIAL_OBJ), text, ID_action_tl_frame_texture_material_obj, false, tex });
					tab_next(self);
				}
			}
		}
		else
			sliders = true;
		
		if (sliders)
		{
			tab_control_meter(self);
			draw_meter(self, /*"frameeditorroughness"*/ STR(3100), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_ROUGHNESS) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), material))->tbx_roughness, ID_action_tl_frame_roughness);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"frameeditormetallic"*/ STR(3101), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::tl_edit, value).Value(e_value_METALLIC) * IntType(100)), IntType(0), IntType(100), IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), material))->tbx_metallic, ID_action_tl_frame_metallic);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"frameeditoremissive"*/ STR(3102), sVar(dx), sVar(dy), dragger_width, round(idVar(global::tl_edit, value).Value(e_value_EMISSIVE) * IntType(100)), .1, IntType(0), no_limit, IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), material))->tbx_emissive, ID_action_tl_frame_emissive);
			tab_next(self);
		}
	}
	
	RealType tab_frame_editor_tex_normal(ScopeAny self)
	{
		if (!idArr(global::tl_edit, value_type).Value(e_value_type_MATERIAL_TEXTURE))
			return IntType(0);
		VarType texobj, tex;
		StringType name;
		tex = null_;
		name = /*""*/ STR(0);
		if (idVar(global::tl_edit, temp) == null_)
			return IntType(0);
		if (idVar(global::tl_edit, temp) != null_)
		{
			switch ((IntType)idVar(global::tl_edit, type))
			{
				case e_tl_type_CHARACTER:
				case e_tl_type_SPECIAL_BLOCK:
				case e_tl_type_MODEL:
				case e_tl_type_BODYPART:
				{
					name = /*"frameeditor"*/ STR(3098) + DsList(global::tl_type_name_list).Value(idVar(global::tl_edit, type)) + /*"texnormal"*/ STR(3103);
					VarType modelfile = idVar(idVar(global::tl_edit, temp), model_file);
					if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
						modelfile = idVar(global::tl_edit, model_part);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
					{
						texobj = temp_get_model_tex_normal_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ));
						tex = temp_get_model_tex_normal_preview(self, texobj, modelfile);
					}
					
					break;
				}
				
				case e_tl_type_BLOCK:
				case e_tl_type_SCENERY:
				{
					name = /*"frameeditorblocktexnormal"*/ STR(1380);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_block_tex_normal_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ));
					
					tex = idInt(texobj, block_preview_texture);
					break;
				}
				
				case e_tl_type_ITEM:
				{
					name = /*"frameeditoritemtexnormal"*/ STR(1383);
					texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ);
					if (texobj == null_)
						texobj = idVar(idVar(global::tl_edit, temp), item_tex_normal);
					if (!res_is_ready(texobj))
						texobj = global::mc_res;
					tex = idInt(texobj, block_preview_texture);
					if (tex == null_)
						tex = idVar(sVar(res), texture);
					break;
				}
				
				default:
				{
					name = /*"frameeditorshapetexnormal"*/ STR(1386);
					withOne (Object, idVar(global::tl_edit, temp), self->id)
						texobj = temp_get_shape_tex_normal_obj(self, idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ));
					
					if (texobj != null_)
						tex = idVar(texobj, texture);
					break;
				}
			}
			
		}
		if (idVar(global::tl_edit, type) == e_tl_type_PATH)
		{
			name = /*"frameeditorshapetexnormal"*/ STR(1386);
			texobj = idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ);
			if (texobj == null_)
				tex = ID_spr_default_normal;
			else
				tex = idVar(texobj, texture);
			
		}
		if (name == /*""*/ STR(0))
			return IntType(0);
		VarType text;
		if (texobj != null_)
			text = idVar(texobj, display_name);
		else
			text = text_get({ /*"listnone"*/ STR(754) });
		
		if (idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ) == null_)
			text = text_get({ /*"listdefault"*/ STR(780), text });
		tab_control_menu(self, { sReal(ui_large_height) });
		draw_button_menu(self, { name, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::tl_edit, value).Value(e_value_TEXTURE_NORMAL_OBJ), text, ID_action_tl_frame_texture_normal_obj, false, tex });
		tab_next(self);
		return 0.0;
	}
	
	void tab_frame_editor_transform(ScopeAny self)
	{
		sVar(dy) -= 8.0;
		VarType taby;
		taby = sVar(dy);
		microani_set(/*"tabposition"*/ STR(3104), null_, false, false, false);
		tab_frame_editor_position(self);
		microani_set(/*"tabposition"*/ STR(3104), null_, false, false, false);
		microani_update({ app_mouse_box(self, sVar(dx), taby, sVar(dw), sVar(dy) - taby) && sBool(content_mouseon), false, false });
		taby = sVar(dy);
		microani_set(/*"tabrotation"*/ STR(3105), null_, false, false, false);
		tab_frame_editor_rotation(self);
		microani_set(/*"tabrotation"*/ STR(3105), null_, false, false, false);
		microani_update({ app_mouse_box(self, sVar(dx), taby, sVar(dw), sVar(dy) - taby) && sBool(content_mouseon), false, false });
		taby = sVar(dy);
		microani_set(/*"tabscale"*/ STR(3106), null_, false, false, false);
		tab_frame_editor_scale(self);
		microani_set(/*"tabscale"*/ STR(3106), null_, false, false, false);
		microani_update({ app_mouse_box(self, sVar(dx), taby, sVar(dw), sVar(dy) - taby) && sBool(content_mouseon), false, false });
		taby = sVar(dy);
		microani_set(/*"tabbend"*/ STR(3107), null_, false, false, false);
		tab_frame_editor_bend(self);
		microani_set(/*"tabbend"*/ STR(3107), null_, false, false, false);
		microani_update({ app_mouse_box(self, sVar(dx), taby, sVar(dw), sVar(dy) - taby) && sBool(content_mouseon), false, false });
		tab_frame_editor_path_point(self);
	}
	
	VarType tab_get_title(VarType tab)
	{
		if (tab == global::_app->properties)
			return text_get({ /*"tabprojectproperties"*/ STR(3108) });
		else
			if (tab == global::_app->timeline)
				return text_get({ /*"tabtimeline"*/ STR(3109) });
			else
				if (tab == global::_app->template_editor)
				{
					if (!(global::temp_edit > 0))
						return /*""*/ STR(0);
					switch ((IntType)idVar(global::temp_edit, type))
					{
						case e_temp_type_CHARACTER:
						{
							return text_get({ /*"tabcharmodel"*/ STR(3110), string_remove_newline(idVar(global::temp_edit, display_name)) });
						}
						case e_temp_type_SPECIAL_BLOCK:
						case e_temp_type_BLOCK:
						{
							return text_get({ /*"tabblock"*/ STR(3111), string_remove_newline(idVar(global::temp_edit, display_name)) });
						}
						case e_temp_type_ITEM:
						{
							return text_get({ /*"tabitem"*/ STR(3112), string_remove_newline(idVar(global::temp_edit, display_name)) });
						}
						case e_temp_type_BODYPART:
						{
							return text_get({ /*"tabbodypart"*/ STR(3113), string_remove_newline(idVar(global::temp_edit, display_name)) });
						}
						case e_temp_type_PARTICLE_SPAWNER:
						{
							return text_get({ /*"tabparticles"*/ STR(3114), string_remove_newline(idVar(global::temp_edit, display_name)) });
						}
					}
					
				}
				else
					if (tab == global::_app->ground_editor)
						return text_get({ /*"tabground"*/ STR(3115) });
					else
						if (tab == global::_app->timeline_editor)
						{
							VarType name = /*""*/ STR(0);
							if (global::tl_edit > 0)
							{
								name = string_remove_newline(idVar(global::tl_edit, display_name));
								if (global::tl_edit_amount > IntType(1))
									name += /*"..."*/ STR(2897);
							}
							return text_get({ /*"tabtimelineeditor"*/ STR(3116), name });
						}
						else
							if (tab == global::_app->frame_editor)
							{
								VarType name = /*""*/ STR(0);
								if (global::tl_edit > 0)
								{
									name = string_remove_newline(idVar(global::tl_edit, display_name));
									if (global::tl_edit_amount > IntType(1))
										name += /*"..."*/ STR(2897);
								}
								return text_get({ /*"tabframeeditor"*/ STR(3117), name, string(round(global::_app->timeline_marker)) });
							}
							else
								if (tab == global::_app->settings)
									return text_get({ /*"tabsettings"*/ STR(3118) });
						
					
				
			
		
		
		return /*""*/ STR(0);
	}
	
	void tab_ground_editor(ScopeAny self)
	{
		sVar(dh) -= 28.0;
		if (idBool(sVar(background_ground_tex), ready))
		{
			draw_texture_picker(self, sVar(background_ground_slot), idVar(sVar(background_ground_tex), block_sheet_texture), sVar(dx), sVar(dy), sVar(dw), sVar(dh), ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)), block_sheet_width, block_sheet_height, idInt(sVar(tab), ground_scroll), ID_action_background_ground_slot, idVar(sVar(background_ground_tex), block_sheet_ani_texture), ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list)), block_sheet_ani_width, block_sheet_ani_height, sVar(background_ground_tex));
			if (sBool(content_mouseon))
				sStr(window_scroll_focus) = string(idInt(sVar(tab), ground_scroll));
		}
	}
	
	RealType tab_next(ScopeAny self, BoolType padding)
	{
		if (sBool(tab_collapse))
		{
			sVar(dx) -= 16.0;
			sVar(dw) += IntType(16);
			sBool(tab_collapse) = false;
		}
		if (sVar(tab_collumns) > 0)
		{
			sReal(tab_collumns_index) = mod_fix(sReal(tab_collumns_index) + IntType(1), sVar(tab_collumns_count));
			if (sReal(tab_collumns_index) != IntType(0))
				return IntType(0);
			sVar(dx) = sVar(tab_collumns_start_x);
		}
		sVar(dy) += sReal(tab_control_h) + (IntType(8) * (IntType)padding);
		return 0.0;
	}
	
	void tab_properties_background(ScopeAny self)
	{
		IntType capwid;
		if (sReal(window_compact) > 0 || sReal(panel_compact) > 0)
		{
			tab_control_dragger(self);
			draw_dragger_sky(self, /*"backgroundskytime"*/ STR(3119), sVar(dx), sVar(dy), sVar(background_sky_time), -IntType(45), ID_action_background_sky_time, ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_time, true);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger_sky(self, /*"backgroundskyrotation"*/ STR(3120), sVar(dx), sVar(dy), sVar(background_sky_rotation), IntType(0), ID_action_background_sky_rotation, ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_rotation, false);
			tab_next(self);
		}
		else
		{
			tab_control(self, IntType(120));
			draw_wheel_sky(self, /*"backgroundskytime"*/ STR(3119), sVar(dx) + floor(sVar(dw) * 0.25), sVar(dy) + IntType(60), sVar(background_sky_time), -IntType(45), ID_action_background_sky_time, ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_time, true);
			draw_wheel_sky(self, /*"backgroundskyrotation"*/ STR(3120), sVar(dx) + floor(sVar(dw) * 0.75), sVar(dy) + IntType(60), sVar(background_sky_rotation), IntType(0), ID_action_background_sky_rotation, ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_rotation, false);
			tab_next(self);
		}
		
		tab_control_switch(self);
		draw_button_collapse(self, /*"sunlight"*/ STR(132), DsMap(global::collapse_map).Value(/*"sunlight"*/ STR(132)), null_, true, /*"backgroundsunlight"*/ STR(3121));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"sunlight"*/ STR(132)) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundsunlightangle"*/ STR(3122), sVar(dx), sVar(dy), dragger_width, sVar(background_sunlight_angle), .05, IntType(0), no_limit, .526, .001, ObjType(obj_category, idInt(sVar(tab), background))->tbx_sunlight_angle, ID_action_background_sunlight_angle, null_, true, false, /*"backgroundsunlightangletip"*/ STR(3123));
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundsunlightstrength"*/ STR(3124), sVar(dx), sVar(dy), dragger_width, round(sVar(background_sunlight_strength) * IntType(100)), 0.1, IntType(0), no_limit, IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sunlight_strength, ID_action_background_sunlight_strength);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"sky"*/ STR(133), DsMap(global::collapse_map).Value(/*"sky"*/ STR(133)), null_, true, /*"backgroundskybackground"*/ STR(3125));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"sky"*/ STR(133)) > 0)
		{
			tab_collapse_start(self);
			tab_control_togglebutton(self);
			togglebutton_add(self, { /*"backgroundskyminecraft"*/ STR(3126), null_, IntType(0), sVar(background_image_show) == IntType(0), ID_action_background_image_show });
			togglebutton_add(self, { /*"backgroundskycustom"*/ STR(3127), null_, IntType(1), sVar(background_image_show) == IntType(1), ID_action_background_image_show });
			draw_togglebutton(self, /*"backgroundsky"*/ STR(3128), sVar(dx), sVar(dy));
			tab_next(self);
			if (sVar(background_image_show) > 0)
			{
				VarType text, tex;
				capwid = text_caption_width(self, { /*"backgroundimage"*/ STR(1330), /*"backgroundimagetype"*/ STR(1331) });
				text = text_get({ /*"listnone"*/ STR(754) });
				tex = null_;
				if (sVar(background_image) != null_)
				{
					text = idVar(sVar(background_image), display_name);
					tex = idVar(sVar(background_image), texture);
				}
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundimage"*/ STR(1330), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_image), text, ID_action_background_image, false, tex });
				tab_next(self);
				if (sVar(background_image) != null_)
				{
					tab_control_menu(self);
					draw_button_menu(self, { /*"backgroundimagetype"*/ STR(1331), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(background_image_type), text_get({ /*"backgroundimagetype"*/ STR(1331) + sVar(background_image_type) }), ID_action_background_image_type });
					tab_next(self);
					if (sVar(background_image_type) == /*"image"*/ STR(90))
					{
						tab_control_switch(self);
						draw_switch(self, /*"backgroundimagestretch"*/ STR(3129), sVar(dx), sVar(dy), sVar(background_image_stretch), ID_action_background_image_stretch);
						tab_next(self);
					}
					if (sVar(background_image_type) != /*"image"*/ STR(90))
					{
						tab_control_dragger(self);
						draw_dragger(self, /*"backgroundimagerotation"*/ STR(3130), sVar(dx), sVar(dy), dragger_width, sVar(background_image_rotation), .1, -no_limit, no_limit, IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_background_rotation, ID_action_background_image_rotation);
						tab_next(self);
					}
					if (sVar(background_image_type) == /*"box"*/ STR(1313))
					{
						tab_control_switch(self);
						draw_switch(self, /*"backgroundimageboxmapped"*/ STR(3131), sVar(dx), sVar(dy), sVar(background_image_box_mapped), ID_action_background_image_box_mapped);
						tab_next(self);
						if (sVar(background_image_box_mapped) > 0)
						{
							tab_control_button_label(self);
							if (draw_button_label(self, /*"backgroundimagesavemap"*/ STR(3132), sVar(dx), sVar(dy), sVar(dw), icons_TEXTURE_EXPORT, e_button_SECONDARY))
								action_background_image_save_map();
							tab_next(self);
						}
					}
				}
			}
			else
			{
				VarType tex;
				capwid = text_caption_width(self, { /*"backgroundskysuntex"*/ STR(1335), /*"backgroundskymoontex"*/ STR(1336), /*"backgroundskymoonphase"*/ STR(1337) });
				tex = ((idVar(sVar(background_sky_sun_tex), type) == e_res_type_PACK) ? idVar(sVar(background_sky_sun_tex), sun_texture) : idVar(sVar(background_sky_sun_tex), texture));
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundskysuntex"*/ STR(1335), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_sky_sun_tex), idVar(sVar(background_sky_sun_tex), display_name), ID_action_background_sky_sun_tex, false, tex });
				tab_next(self);
				if (idVar(sVar(background_sky_moon_tex), type) == e_res_type_PACK && idBool(sVar(background_sky_moon_tex), ready))
					tex = idArr(sVar(background_sky_moon_tex), moon_texture).Value(sVar(background_sky_moon_phase));
				else
					tex = idVar(sVar(background_sky_moon_tex), texture);
				
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundskymoontex"*/ STR(1336), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_sky_moon_tex), idVar(sVar(background_sky_moon_tex), display_name), ID_action_background_sky_moon_tex, false, tex });
				tab_next(self);
				if (idVar(sVar(background_sky_moon_tex), type) == e_res_type_PACK && idBool(sVar(background_sky_moon_tex), ready))
				{
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"backgroundskymoonphase"*/ STR(1337), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_sky_moon_phase), text_get({ /*"backgroundskymoonphase"*/ STR(1337) + string(sVar(background_sky_moon_phase) + IntType(1)) }), ID_action_background_sky_moon_phase, false, idArr(sVar(background_sky_moon_tex), moon_texture).Value(sVar(background_sky_moon_phase)) });
					tab_next(self);
				}
			}
			
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"clouds"*/ STR(134), DsMap(global::collapse_map).Value(/*"clouds"*/ STR(134)), ID_action_background_sky_clouds_show, sVar(background_sky_clouds_show), /*"backgroundskycloudsshow"*/ STR(3133));
		tab_next(self);
		if (sVar(background_sky_clouds_show) > 0 && DsMap(global::collapse_map).Value(/*"clouds"*/ STR(134)) > 0)
		{
			tab_collapse_start(self);
			tab_control_togglebutton(self);
			togglebutton_add(self, { /*"backgroundskycloudsnormal"*/ STR(3134), null_, /*"normal"*/ STR(601), sVar(background_sky_clouds_mode) == /*"normal"*/ STR(601), ID_action_background_sky_clouds_mode });
			togglebutton_add(self, { /*"backgroundskycloudsfaded"*/ STR(3135), null_, /*"faded"*/ STR(717), sVar(background_sky_clouds_mode) == /*"faded"*/ STR(717), ID_action_background_sky_clouds_mode });
			togglebutton_add(self, { /*"backgroundskycloudsflat"*/ STR(3136), null_, /*"flat"*/ STR(718), sVar(background_sky_clouds_mode) == /*"flat"*/ STR(718), ID_action_background_sky_clouds_mode });
			draw_togglebutton(self, /*"backgroundskycloudsmode"*/ STR(3137), sVar(dx), sVar(dy), true, true);
			tab_next(self);
			if (sReal(setting_advanced_mode) > 0)
			{
				VarType tex = ((idVar(sVar(background_sky_clouds_tex), type) == e_res_type_PACK) ? idVar(sVar(background_sky_clouds_tex), clouds_texture) : idVar(sVar(background_sky_clouds_tex), texture));
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundskycloudstex"*/ STR(1338), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_sky_clouds_tex), idVar(sVar(background_sky_clouds_tex), display_name), ID_action_background_sky_clouds_tex, false, tex });
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskycloudsspeed"*/ STR(3138), sVar(dx), sVar(dy), dragger_width, round(sVar(background_sky_clouds_speed) * IntType(100)), 1.0 / 10.0, -no_limit, no_limit, IntType(100), IntType(0), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_clouds_speed, ID_action_background_sky_clouds_speed);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskycloudsoffset"*/ STR(3139), sVar(dx), sVar(dy), dragger_width, sVar(background_sky_clouds_offset), IntType(10), -no_limit, no_limit, IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_clouds_offset, ID_action_background_sky_clouds_offset);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskycloudsheight"*/ STR(3140), sVar(dx), sVar(dy), dragger_width, sVar(background_sky_clouds_height), IntType(10), -no_limit, no_limit, IntType(1024), IntType(0), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_clouds_height, ID_action_background_sky_clouds_height);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskycloudssize"*/ STR(3141), sVar(dx), sVar(dy), dragger_width, sVar(background_sky_clouds_size), IntType(5), IntType(16), no_limit, IntType(1536), IntType(0), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_clouds_size, ID_action_background_sky_clouds_size);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundskycloudsthickness"*/ STR(3142), sVar(dx), sVar(dy), dragger_width, sVar(background_sky_clouds_thickness), IntType(2), IntType(0), no_limit, IntType(64), IntType(0), ObjType(obj_category, idInt(sVar(tab), background))->tbx_sky_clouds_thickness, ID_action_background_sky_clouds_thickness);
				tab_next(self);
			}
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"ground"*/ STR(135), DsMap(global::collapse_map).Value(/*"ground"*/ STR(135)), ID_action_background_ground_show, sVar(background_ground_show), /*"backgroundgroundshow"*/ STR(3143));
		tab_next(self);
		capwid = text_caption_width(self, { /*"backgroundground"*/ STR(3144), /*"backgroundgroundtex"*/ STR(1339) });
		if (sVar(background_ground_show) > 0 && DsMap(global::collapse_map).Value(/*"ground"*/ STR(135)) > 0)
		{
			tab_collapse_start(self);
			IntType wid;
			VarType res;
			res = sVar(background_ground_tex);
			if (!res_is_ready(res))
				res = global::mc_res;
			tab_control(self, IntType(24));
			draw_set_font(sInt(font_label));
			wid = string_width(text_get({ /*"backgroundground"*/ STR(3144) }) + /*":"*/ STR(755));
			draw_label(self, { text_get({ /*"backgroundground"*/ STR(3144) }) + /*":"*/ STR(755), sVar(dx), sVar(dy) + IntType(14), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
			draw_box(sVar(dx) + wid + IntType(16), sVar(dy) + IntType(4), IntType(20), IntType(20), false, global::c_level_bottom, IntType(1));
			if (sBool(background_ground_ani))
				draw_texture_slot(idVar(res, block_sheet_ani_texture).Value(block_texture_get_frame(true)), sVar(background_ground_slot) - ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)), sVar(dx) + wid + IntType(18), sVar(dy) + IntType(6), IntType(16), IntType(16), block_sheet_ani_width, block_sheet_ani_height, block_texture_get_blend(sVar(background_ground_name), res));
			else
				draw_texture_slot(idVar(res, block_sheet_texture), sVar(background_ground_slot), sVar(dx) + wid + IntType(18), sVar(dy) + IntType(6), IntType(16), IntType(16), block_sheet_width, block_sheet_height, block_texture_get_blend(sVar(background_ground_name), res));
			
			if (draw_button_icon(self, { /*"backgroundgroundchange"*/ STR(3145), sVar(dx) + sVar(dw) - IntType(24), sVar(dy), IntType(24), IntType(24), ObjType(obj_tab, sInt(ground_editor))->show, icons_PENCIL, null_, false, /*"tooltipchangeground"*/ STR(3146) }))
				tab_toggle(self, sInt(ground_editor));
			tab_next(self);
			tab_control_menu(self, { sReal(ui_large_height) });
			draw_button_menu(self, { /*"backgroundgroundtex"*/ STR(1339), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_ground_tex), idVar(sVar(background_ground_tex), display_name), ID_action_background_ground_tex, false, idInt(sVar(background_ground_tex), block_preview_texture) });
			tab_next(self);
			if (sVar(project_render_material_maps) > 0)
			{
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundgroundtexmaterial"*/ STR(1340), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_ground_tex_material), idVar(sVar(background_ground_tex_material), display_name), ID_action_background_ground_tex_material, false, idInt(sVar(background_ground_tex_material), block_preview_texture) });
				tab_next(self);
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"backgroundgroundtexnormal"*/ STR(1341), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), sVar(background_ground_tex_normal), idVar(sVar(background_ground_tex_normal), display_name), ID_action_background_ground_tex_normal, false, idInt(sVar(background_ground_tex_normal), block_preview_texture) });
				tab_next(self);
			}
			tab_collapse_end(self);
		}
		tab_control_menu(self);
		draw_button_menu(self, { /*"backgroundbiome"*/ STR(3147), e_menu_BIOME, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(background_biome), minecraft_asset_get_name(/*"biome"*/ STR(1657), sVar(background_biome)), ID_action_background_biome });
		tab_next(self);
		if (sVar(background_biome) == /*"custom"*/ STR(584))
		{
			sVar(dy) += IntType(20);
			draw_label(self, { text_get({ /*"backgroundbiomecolors"*/ STR(3148) }) + /*":"*/ STR(755), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
			sVar(dy) += IntType(8);
			tab_set_collumns(self, { true, floor((RealType)sVar(content_width) / 150.0) });
			tab_control_color(self);
			draw_button_color(self, /*"backgroundgrasscolor"*/ STR(3149), sVar(dx), sVar(dy), sVar(dw), sVar(background_grass_color), c_plains_biome_grass, false, ID_action_background_grass_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundfoliagecolor"*/ STR(3150), sVar(dx), sVar(dy), sVar(dw), sVar(background_foliage_color), c_plains_biome_foliage, false, ID_action_background_foliage_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundwatercolor"*/ STR(3151), sVar(dx), sVar(dy), sVar(dw), sVar(background_water_color), c_plains_biome_water, false, ID_action_background_water_color);
			tab_next(self);
			tab_set_collumns(self, { false });
			sVar(dy) += IntType(20);
			draw_label(self, { text_get({ /*"backgroundleafcolors"*/ STR(3152) }) + /*":"*/ STR(755), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
			sVar(dy) += IntType(8);
			tab_set_collumns(self, { true, floor((RealType)sVar(content_width) / 150.0) });
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesoakcolor"*/ STR(3153), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_oak_color), c_plains_biome_foliage, false, ID_action_background_leaves_oak_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavessprucecolor"*/ STR(3154), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_spruce_color), c_plains_biome_foliage_2, false, ID_action_background_leaves_spruce_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesbirchcolor"*/ STR(3155), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_birch_color), c_plains_biome_foliage_2, false, ID_action_background_leaves_birch_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesjunglecolor"*/ STR(3156), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_jungle_color), c_plains_biome_foliage, false, ID_action_background_leaves_jungle_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesacaciacolor"*/ STR(3157), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_acacia_color), c_plains_biome_foliage, false, ID_action_background_leaves_acacia_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesdarkoakcolor"*/ STR(3158), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_dark_oak_color), c_plains_biome_foliage, false, ID_action_background_leaves_dark_oak_color);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"backgroundleavesmangrovecolor"*/ STR(3159), sVar(dx), sVar(dy), sVar(dw), sVar(background_leaves_mangrove_color), c_plains_biome_foliage, false, ID_action_background_leaves_mangrove_color);
			tab_next(self);
			tab_set_collumns(self, { false });
		}
		sVar(dy) += IntType(20);
		draw_label(self, { text_get({ /*"backgroundscenecolors"*/ STR(3160) }) + /*":"*/ STR(755), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		tab_set_collumns(self, { true, floor((RealType)sVar(content_width) / 150.0) });
		tab_control_color(self);
		draw_button_color(self, /*"backgroundskycolor"*/ STR(3161), sVar(dx), sVar(dy), sVar(dw), sVar(background_sky_color), c_sky, false, ID_action_background_sky_color);
		tab_next(self);
		tab_control_color(self);
		draw_button_color(self, /*"backgroundskycloudscolor"*/ STR(3162), sVar(dx), sVar(dy), sVar(dw), sVar(background_sky_clouds_color), c_clouds, false, ID_action_background_sky_clouds_color);
		tab_next(self);
		tab_control_color(self);
		draw_button_color(self, /*"backgroundsunlightcolor"*/ STR(3163), sVar(dx), sVar(dy), sVar(dw), sVar(background_sunlight_color), c_sunlight, false, ID_action_background_sunlight_color);
		tab_next(self);
		tab_control_color(self);
		draw_button_color(self, /*"backgroundambientcolor"*/ STR(3164), sVar(dx), sVar(dy), sVar(dw), sVar(background_ambient_color), c_ambient, false, ID_action_background_ambient_color);
		tab_next(self);
		tab_control_color(self);
		draw_button_color(self, /*"backgroundnightcolor"*/ STR(3165), sVar(dx), sVar(dy), sVar(dw), sVar(background_night_color), c_night, false, ID_action_background_night_color);
		tab_next(self);
		tab_set_collumns(self, { false });
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_switch(self, /*"backgroundtwilight"*/ STR(3166), sVar(dx), sVar(dy), sVar(background_twilight), ID_action_background_twilight, /*"backgroundtwilighttip"*/ STR(3167));
			tab_next(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"fog"*/ STR(136), DsMap(global::collapse_map).Value(/*"fog"*/ STR(136)), ID_action_background_fog_show, sVar(background_fog_show), /*"backgroundfog"*/ STR(3168));
		tab_next(self);
		if (sVar(background_fog_show) > 0 && DsMap(global::collapse_map).Value(/*"fog"*/ STR(136)) > 0)
		{
			tab_collapse_start(self);
			tab_control_switch(self);
			draw_switch(self, /*"backgroundfogsky"*/ STR(3169), sVar(dx), sVar(dy), sVar(background_fog_sky), ID_action_background_fog_sky);
			tab_next(self);
			tab_control_switch(self);
			draw_switch(self, /*"backgroundfogcolorcustom"*/ STR(3170), sVar(dx), sVar(dy), sVar(background_fog_color_custom), ID_action_background_fog_color_custom);
			tab_next(self);
			if (sVar(background_fog_color_custom) > 0)
			{
				tab_control_color(self);
				draw_button_color(self, /*"backgroundfogcolor"*/ STR(3171), sVar(dx), sVar(dy), sVar(dw), sVar(background_fog_color), c_sky, false, ID_action_background_fog_color);
				tab_next(self);
			}
			tab_control_switch(self);
			draw_switch(self, /*"backgroundfogcustomobjectcolor"*/ STR(3172), sVar(dx), sVar(dy), sVar(background_fog_custom_object_color), ID_action_background_fog_custom_object_color);
			tab_next(self);
			if (sVar(background_fog_custom_object_color) > 0)
			{
				tab_control_color(self);
				draw_button_color(self, /*"backgroundfogobjectcolor"*/ STR(3173), sVar(dx), sVar(dy), sVar(dw), sVar(background_fog_object_color), c_sky, false, ID_action_background_fog_object_color);
				tab_next(self);
			}
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundfogdistance"*/ STR(3174), sVar(dx), sVar(dy), dragger_width, sVar(background_fog_distance), (RealType)sVar(background_fog_distance) / 100.0, IntType(10), sVar(project_render_distance), IntType(10000), IntType(10), ObjType(obj_category, idInt(sVar(tab), background))->tbx_fog_distance, ID_action_background_fog_distance);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundfogsize"*/ STR(3175), sVar(dx), sVar(dy), dragger_width, sVar(background_fog_size), (RealType)sVar(background_fog_size) / 100.0, IntType(10), sVar(project_render_distance), IntType(2000), IntType(10), ObjType(obj_category, idInt(sVar(tab), background))->tbx_fog_size, ID_action_background_fog_size);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundfogheight"*/ STR(3176), sVar(dx), sVar(dy), dragger_width, sVar(background_fog_height), (RealType)sVar(background_fog_height) / 100.0, IntType(10), IntType(2000), IntType(1000), IntType(10), ObjType(obj_category, idInt(sVar(tab), background))->tbx_fog_height, ID_action_background_fog_height);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"wind"*/ STR(137), DsMap(global::collapse_map).Value(/*"wind"*/ STR(137)), ID_action_background_wind, sVar(background_wind), /*"backgroundwind"*/ STR(3177));
		tab_next(self);
		if (sVar(background_wind) > 0 && DsMap(global::collapse_map).Value(/*"wind"*/ STR(137)) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundwindspeed"*/ STR(3178), sVar(dx), sVar(dy), dragger_width, round(sVar(background_wind_speed) * IntType(100)), .1, IntType(0), no_limit * IntType(100), IntType(10), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_wind_speed, ID_action_background_wind_speed);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundwindstrength"*/ STR(3179), sVar(dx), sVar(dy), dragger_width, sVar(background_wind_strength), .1, IntType(0), no_limit, 0.5, 0.05, ObjType(obj_category, idInt(sVar(tab), background))->tbx_wind_strength, ID_action_background_wind_strength);
			tab_next(self);
			if (sReal(setting_advanced_mode) > 0)
			{
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundwinddirection"*/ STR(3180), sVar(dx), sVar(dy), dragger_width, sVar(background_wind_direction), .1, -no_limit, no_limit, IntType(45), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_wind_direction, ID_action_background_wind_direction);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundwinddirectionalspeed"*/ STR(3181), sVar(dx), sVar(dy), dragger_width, round(sVar(background_wind_directional_speed) * IntType(100)), .1, IntType(0), no_limit, IntType(20), IntType(1), ObjType(obj_category, idInt(sVar(tab), background))->tbx_wind_directional_speed, ID_action_background_wind_directional_speed);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"backgroundwinddirectionalstrength"*/ STR(3182), sVar(dx), sVar(dy), dragger_width, sVar(background_wind_directional_strength), .01, IntType(0), no_limit, 1.5, 0.05, ObjType(obj_category, idInt(sVar(tab), background))->tbx_wind_directional_strength, ID_action_background_wind_directional_strength);
				tab_next(self);
			}
			tab_collapse_end(self);
		}
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_dragger(self);
			draw_dragger(self, /*"backgroundtextureanimationspeed"*/ STR(3183), sVar(dx), sVar(dy), dragger_width, sVar(background_texture_animation_speed), 1.0 / 100.0, IntType(0), no_limit, 0.25, IntType(0), ObjType(obj_category, idInt(sVar(tab), background))->tbx_texture_animation_speed, ID_action_background_texture_animation_speed);
			tab_next(self);
		}
	}
	
	RealType tab_properties_library(ScopeAny self)
	{
		tab_control(self, IntType(160));
		preview_draw(self, ObjType(obj_category, idInt(sVar(tab), library))->preview, sVar(dx), sVar(dy), sVar(dw), IntType(160));
		tab_next(self);
		tab_control_sortlist(self, IntType(6));
		sortlist_draw(self, ObjType(obj_category, idInt(sVar(tab), library))->list, sVar(dx), sVar(dy), sVar(dw), sReal(tab_control_h), global::temp_edit);
		tab_next(self);
		tab_control(self, IntType(24));
		if (draw_button_icon(self, { /*"librarynew"*/ STR(3184), sVar(dx), sVar(dy), IntType(24), IntType(24), false, icons_ASSET_ADD, null_, false, /*"tooltiptemplatenew"*/ STR(3185) }))
			sBool(bench_open) = true;
		if (draw_button_icon(self, { /*"libraryanimate"*/ STR(3186), sVar(dx) + IntType(28), sVar(dy), IntType(24), IntType(24), false, icons_ASSET_INSTANCE, null_, global::temp_edit == null_, /*"tooltiptemplateanimate"*/ STR(3187) }))
			action_lib_animate(self);
		if (draw_button_icon(self, { /*"libraryduplicate"*/ STR(3188), sVar(dx) + (IntType(28) * IntType(2)), sVar(dy), IntType(24), IntType(24), false, icons_DUPLICATE, null_, global::temp_edit == null_, /*"tooltiptemplateduplicate"*/ STR(3189) }))
			action_lib_duplicate(self);
		if (draw_button_icon(self, { /*"libraryremove"*/ STR(3190), sVar(dx) + (IntType(28) * IntType(3)), sVar(dy), IntType(24), IntType(24), false, icons_DELETE, null_, global::temp_edit == null_, /*"tooltiptemplateremove"*/ STR(3191) }))
			action_lib_remove(self);
		tab_next(self);
		if (global::temp_edit == null_)
			return IntType(0);
		tab_control_textfield(self, false);
		ObjType(obj_textbox, ObjType(obj_category, idInt(sVar(tab), library))->tbx_name)->text = idVar(global::temp_edit, name);
		draw_textfield(self, /*"libraryname"*/ STR(3192), sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_category, idInt(sVar(tab), library))->tbx_name, ID_action_lib_name, idVar(global::temp_edit, display_name), /*"left"*/ STR(188));
		tab_next(self);
		switch ((IntType)idVar(global::temp_edit, type))
		{
			case e_temp_type_CHARACTER:
			case e_temp_type_SPECIAL_BLOCK:
			{
				StringType text;
				IntType wid;
				text = ((idVar(global::temp_edit, type) == e_temp_type_CHARACTER) ? /*"librarycharmodel"*/ STR(3193) : /*"libraryspblockmodel"*/ STR(3194));
				wid = text_max_width({ /*"librarycharmodelchange"*/ STR(3195) }) + IntType(20);
				tab_control(self, IntType(24));
				draw_label_value(self, sVar(dx), sVar(dy), sVar(dw) - IntType(32), IntType(24), text_get({ text }), idVar(global::temp_edit, model_file) != null_ ? string(minecraft_asset_get_name(/*"model"*/ STR(515), idVar(idVar(global::temp_edit, model_file), name))) : /*""*/ STR(0));
				if (draw_button_icon(self, { /*"librarycharmodelchange"*/ STR(3195), sVar(dx) + sVar(dw) - IntType(24), sVar(dy), IntType(24), IntType(24), ObjType(obj_tab, sInt(template_editor))->show, icons_PENCIL, null_, false, /*"tooltipchangemodel"*/ STR(3196) }))
					tab_toggle(self, sInt(template_editor));
				tab_next(self);
				if (idVar(global::temp_edit, pattern_type) != /*""*/ STR(0))
				{
					tab_control_button_label(self);
					if (draw_button_label(self, /*"benchopeneditor"*/ STR(749), sVar(dx), sVar(dy), sVar(dw), null_, e_button_SECONDARY))
						popup_pattern_editor_show(self, global::temp_edit);
					tab_next(self);
					if (sInt(popup) == sInt(popup_pattern_editor))
						ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
				}
				VarType tex = null_;
				withOne (Object, idVar(global::temp_edit, model_tex), self->id)
					tex = res_get_model_texture(self, model_part_get_texture_name(idVar(global::temp_edit, model_file), idInt(global::temp_edit, model_texture_name_map)));
				
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { ((idVar(global::temp_edit, type) == e_temp_type_SPECIAL_BLOCK) ? /*"libraryspblocktex"*/ STR(1285) : /*"libraryskin"*/ STR(1282)), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, model_tex), idVar(idVar(global::temp_edit, model_tex), display_name), ID_action_lib_model_tex, false, tex, null_ });
				tab_next(self);
				if (sVar(project_render_material_maps) > 0)
				{
					tex = null_;
					withOne (Object, idVar(global::temp_edit, model_tex_material), self->id)
						tex = res_get_model_texture_material(self, model_part_get_texture_material_name(idVar(global::temp_edit, model_file), idInt(global::temp_edit, model_texture_name_map)));
					
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { ((idVar(global::temp_edit, type) == e_temp_type_SPECIAL_BLOCK) ? /*"libraryspblocktexmaterial"*/ STR(1286) : /*"libraryskinmaterial"*/ STR(1283)), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, model_tex_material), idVar(idVar(global::temp_edit, model_tex_material), display_name), ID_action_lib_model_tex_material, false, tex, null_ });
					tab_next(self);
					tex = null_;
					withOne (Object, idVar(global::temp_edit, model_tex_normal), self->id)
						tex = res_get_model_tex_normal(self, model_part_get_tex_normal_name(idVar(global::temp_edit, model_file), idInt(global::temp_edit, model_texture_name_map)));
					
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { ((idVar(global::temp_edit, type) == e_temp_type_SPECIAL_BLOCK) ? /*"libraryspblocktexnormal"*/ STR(1287) : /*"libraryskinnormal"*/ STR(1284)), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, model_tex_normal), idVar(idVar(global::temp_edit, model_tex_normal), display_name), ID_action_lib_model_tex_normal, false, tex, null_ });
					tab_next(self);
				}
				break;
			}
			
			case e_temp_type_SCENERY:
			{
				VarType text;
				if (idVar(global::temp_edit, scenery) != null_)
					text = idVar(idVar(global::temp_edit, scenery), display_name);
				else
					text = text_get({ /*"listnone"*/ STR(754) });
				
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"libraryscenery"*/ STR(1296), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, scenery), text, ID_action_lib_scenery, false, null_ });
				tab_next(self);
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"libraryblocktex"*/ STR(1298), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, block_tex), idVar(idVar(global::temp_edit, block_tex), display_name), ID_action_lib_block_tex, false, idInt(idVar(global::temp_edit, block_tex), block_preview_texture), null_ });
				tab_next(self);
				if (sVar(project_render_material_maps) > 0)
				{
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"libraryblocktexmaterial"*/ STR(1299), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, block_tex_material), idVar(idVar(global::temp_edit, block_tex_material), display_name), ID_action_lib_block_tex_material, false, idInt(idVar(global::temp_edit, block_tex_material), block_preview_texture), null_ });
					tab_next(self);
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"libraryblocktexnormal"*/ STR(1300), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, block_tex_normal), idVar(idVar(global::temp_edit, block_tex_normal), display_name), ID_action_lib_block_tex_normal, false, idInt(idVar(global::temp_edit, block_tex_normal), block_preview_texture), null_ });
					tab_next(self);
				}
				break;
			}
			
			case e_temp_type_ITEM:
			{
				IntType wid;
				VarType res;
				res = idVar(global::temp_edit, item_tex);
				if (!res_is_ready(res))
					res = global::mc_res;
				tab_control(self, IntType(24));
				draw_set_font(sInt(font_label));
				wid = string_width(text_get({ /*"typeitem"*/ STR(167) }) + /*":"*/ STR(755));
				draw_label(self, { text_get({ /*"typeitem"*/ STR(167) }) + /*":"*/ STR(755), sVar(dx), sVar(dy) + IntType(14), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
				draw_box(sVar(dx) + wid + IntType(16), sVar(dy) + IntType(4), IntType(20), IntType(20), false, global::c_level_bottom, IntType(1));
				if (idInt(res, item_sheet_texture) != null_)
				{
					draw_texture_slot(idInt(res, item_sheet_texture), idVar(global::temp_edit, item_slot), sVar(dx) + wid + IntType(18), sVar(dy) + IntType(6), IntType(16), IntType(16), idVar(res, item_sheet_size).Value(X_), idVar(res, item_sheet_size).Value(Y_));
					if (draw_button_icon(self, { /*"libraryitemchange"*/ STR(3197), sVar(dx) + sVar(dw) - IntType(24), sVar(dy), IntType(24), IntType(24), ObjType(obj_tab, sInt(template_editor))->show, icons_PENCIL, null_, false, /*"tooltipchangeitem"*/ STR(3198) }))
						tab_toggle(self, sInt(template_editor));
				}
				else
				{
					RealType scale = min({ 16.0 / texture_width(idVar(res, texture)), 16.0 / texture_height(idVar(res, texture)) });
					draw_texture({ idVar(res, texture), sVar(dx) + wid + IntType(18), sVar(dy) + IntType(6), scale, scale });
				}
				
				tab_next(self);
				VarType tex = idInt(res, block_preview_texture);
				if (tex == null_)
					tex = idVar(res, texture);
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"libraryitemtex"*/ STR(1301), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, item_tex), idVar(idVar(global::temp_edit, item_tex), display_name), ID_action_lib_item_tex, false, tex });
				tab_next(self);
				if (sVar(project_render_material_maps) > 0)
				{
					res = idVar(global::temp_edit, item_tex_material);
					if (!res_is_ready(res))
						res = global::mc_res;
					tex = idInt(res, block_preview_texture);
					if (tex == null_)
						tex = idVar(res, texture);
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"libraryitemtexmaterial"*/ STR(1302), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, item_tex_material), idVar(idVar(global::temp_edit, item_tex_material), display_name), ID_action_lib_item_tex_material, false, tex });
					tab_next(self);
					res = idVar(global::temp_edit, item_tex_normal);
					if (!res_is_ready(res))
						res = global::mc_res;
					tex = idInt(res, block_preview_texture);
					if (tex == null_)
						tex = idVar(res, texture);
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"libraryitemtexnormal"*/ STR(1303), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, item_tex_normal), idVar(idVar(global::temp_edit, item_tex_normal), display_name), ID_action_lib_item_tex_normal, false, tex });
					tab_next(self);
				}
				VarType sx;
				sx = sVar(dx_start);
				sVar(dx_start) = sVar(dx);
				tab_set_collumns(self, { true, IntType(2) });
				tab_control_checkbox(self);
				draw_checkbox(self, /*"libraryitem3d"*/ STR(3199), sVar(dx), sVar(dy), idVar(global::temp_edit, item_3d), ID_action_lib_item_3d);
				tab_next(self);
				tab_control_checkbox(self);
				draw_checkbox(self, /*"libraryitemfacecamera"*/ STR(3200), sVar(dx), sVar(dy), idVar(global::temp_edit, item_face_camera), ID_action_lib_item_face_camera);
				tab_next(self);
				tab_control_checkbox(self);
				draw_checkbox(self, /*"libraryitembounce"*/ STR(3201), sVar(dx), sVar(dy), idVar(global::temp_edit, item_bounce), ID_action_lib_item_bounce);
				tab_next(self);
				tab_control_checkbox(self);
				draw_checkbox(self, /*"libraryitemspin"*/ STR(3202), sVar(dx), sVar(dy), idVar(global::temp_edit, item_spin), ID_action_lib_item_spin);
				tab_next(self);
				tab_set_collumns(self, { false });
				sVar(dx_start) = sx;
				break;
			}
			
			case e_temp_type_BLOCK:
			{
				tab_control(self, IntType(24));
				draw_label_value(self, sVar(dx), sVar(dy), sVar(dw) - IntType(32), IntType(24), text_get({ /*"typeblock"*/ STR(169) }), minecraft_asset_get_name(/*"block"*/ STR(508), ObjType(obj_block, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(idVar(global::temp_edit, block_name)))->name));
				if (draw_button_icon(self, { /*"libraryblockchange"*/ STR(3203), sVar(dx) + sVar(dw) - IntType(24), sVar(dy), IntType(24), IntType(24), ObjType(obj_tab, sInt(template_editor))->show, icons_PENCIL, null_, false, /*"tooltipchangeblock"*/ STR(3204) }))
					tab_toggle(self, sInt(template_editor));
				tab_next(self);
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"libraryblocktex"*/ STR(1298), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, block_tex), idVar(idVar(global::temp_edit, block_tex), display_name), ID_action_lib_block_tex, false, idInt(idVar(global::temp_edit, block_tex), block_preview_texture) });
				tab_next(self);
				if (sVar(project_render_material_maps) > 0)
				{
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"libraryblocktexmaterial"*/ STR(1299), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, block_tex_material), idVar(idVar(global::temp_edit, block_tex_material), display_name), ID_action_lib_block_tex_material, false, idInt(idVar(global::temp_edit, block_tex_material), block_preview_texture), null_ });
					tab_next(self);
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"libraryblocktexnormal"*/ STR(1300), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, block_tex_normal), idVar(idVar(global::temp_edit, block_tex_normal), display_name), ID_action_lib_block_tex_normal, false, idInt(idVar(global::temp_edit, block_tex_normal), block_preview_texture), null_ });
					tab_next(self);
				}
				break;
			}
			
			case e_temp_type_BODYPART:
			{
				VarType text;
				if (idVar(global::temp_edit, model_file) != null_)
					text = text_get({ /*"librarybodypartof"*/ STR(3205), minecraft_asset_get_name(/*"modelpart"*/ STR(748), idVar(global::temp_edit, model_part_name)), minecraft_asset_get_name(/*"model"*/ STR(515), idVar(global::temp_edit, model_name)) });
				else
					text = text_get({ /*"librarybodypartunknown"*/ STR(3206) });
				
				tab_control(self, IntType(24));
				draw_label_value(self, sVar(dx), sVar(dy), sVar(dw), IntType(24), text_get({ /*"typebodypart"*/ STR(165) }), text);
				if (draw_button_icon(self, { /*"librarybodypartchange"*/ STR(3207), sVar(dx) + sVar(dw) - IntType(24), sVar(dy), IntType(24), IntType(24), ObjType(obj_tab, sInt(template_editor))->show, icons_PENCIL }))
					tab_toggle(self, sInt(template_editor));
				tab_next(self);
				if (idVar(global::temp_edit, pattern_type) != /*""*/ STR(0))
				{
					tab_control_button_label(self);
					if (draw_button_label(self, /*"benchopeneditor"*/ STR(749), sVar(dx), sVar(dy), sVar(dw), null_, e_button_SECONDARY))
						popup_pattern_editor_show(self, global::temp_edit);
					tab_next(self);
				}
				VarType tex = null_;
				withOne (Object, idVar(global::temp_edit, model_tex), self->id)
					tex = res_get_model_texture(self, model_part_get_texture_name(idVar(global::temp_edit, model_file), idInt(global::temp_edit, model_texture_name_map)));
				
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"librarybodypartskin"*/ STR(1288), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, model_tex), idVar(idVar(global::temp_edit, model_tex), display_name), ID_action_lib_model_tex, false, tex });
				tab_next(self);
				if (sVar(project_render_material_maps) > 0)
				{
					tex = null_;
					withOne (Object, idVar(global::temp_edit, model_tex_material), self->id)
						tex = res_get_model_texture_material(self, model_part_get_texture_material_name(idVar(global::temp_edit, model_file), idInt(global::temp_edit, model_texture_name_map)));
					
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"librarybodypartskinmaterial"*/ STR(1289), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, model_tex_material), idVar(idVar(global::temp_edit, model_tex_material), display_name), ID_action_lib_model_tex_material, false, tex, null_ });
					tab_next(self);
					tex = null_;
					withOne (Object, idVar(global::temp_edit, model_tex_normal), self->id)
						tex = res_get_model_tex_normal(self, model_part_get_tex_normal_name(idVar(global::temp_edit, model_file), idInt(global::temp_edit, model_texture_name_map)));
					
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"librarybodypartskinnormal"*/ STR(1290), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, model_tex_normal), idVar(idVar(global::temp_edit, model_tex_normal), display_name), ID_action_lib_model_tex_normal, false, tex, null_ });
					tab_next(self);
				}
				break;
			}
			
			case e_temp_type_PARTICLE_SPAWNER:
			{
				if (sReal(setting_advanced_mode) > 0)
				{
					tab_control_button_label(self);
					if (draw_button_label(self, /*"libraryparticleeditoropen"*/ STR(3208), sVar(dx), sVar(dy), sVar(dw), null_, e_button_SECONDARY))
					{
						tab_template_editor_update_ptype_list(self);
						tab_toggle(self, sInt(template_editor));
					}
					if (ObjType(obj_tab, sInt(template_editor))->show > 0)
						ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
					tab_next(self);
				}
				break;
			}
			
			case e_temp_type_TEXT:
			{
				if (sReal(setting_advanced_mode) > 0)
				{
					tab_control_menu(self);
					draw_button_menu(self, { /*"librarytextfont"*/ STR(1305), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::temp_edit, text_font), idVar(idVar(global::temp_edit, text_font), display_name), ID_action_lib_text_font });
					tab_next(self);
				}
				tab_control_checkbox(self);
				draw_checkbox(self, /*"librarytext3d"*/ STR(3209), sVar(dx), sVar(dy), idVar(global::temp_edit, text_3d), ID_action_lib_text_3d);
				tab_next(self);
				tab_control_checkbox(self);
				draw_checkbox(self, /*"librarytextfacecamera"*/ STR(3210), sVar(dx), sVar(dy), idVar(global::temp_edit, text_face_camera), ID_action_lib_text_face_camera);
				tab_next(self);
				break;
			}
			
			case e_temp_type_CUBE:
			case e_temp_type_CONE:
			case e_temp_type_CYLINDER:
			case e_temp_type_SPHERE:
			case e_temp_type_SURFACE:
			{
				VarType text, sprite;
				sprite = null_;
				if (idVar(global::temp_edit, shape_tex) != null_)
				{
					text = idVar(idVar(global::temp_edit, shape_tex), display_name);
					if (idVar(idVar(global::temp_edit, shape_tex), type) != e_tl_type_CAMERA)
						sprite = idVar(idVar(global::temp_edit, shape_tex), texture);
				}
				else
					text = text_get({ /*"listnone"*/ STR(754) });
				
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"libraryshapetex"*/ STR(1306), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, shape_tex), text, ID_action_lib_shape_tex, false, sprite });
				tab_next(self);
				if (sVar(project_render_material_maps) > 0)
				{
					if (idVar(global::temp_edit, shape_tex_material) != null_)
					{
						text = idVar(idVar(global::temp_edit, shape_tex_material), display_name);
						sprite = idVar(idVar(global::temp_edit, shape_tex_material), texture);
					}
					else
					{
						text = text_get({ /*"listnone"*/ STR(754) });
						sprite = null_;
					}
					
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"libraryshapetexmaterial"*/ STR(1307), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, shape_tex_material), text, ID_action_lib_shape_tex_material, false, sprite });
					tab_next(self);
					if (idVar(global::temp_edit, shape_tex_normal) != null_)
					{
						text = idVar(idVar(global::temp_edit, shape_tex_normal), display_name);
						sprite = idVar(idVar(global::temp_edit, shape_tex_normal), texture);
					}
					else
					{
						text = text_get({ /*"listnone"*/ STR(754) });
						sprite = null_;
					}
					
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"libraryshapetexnormal"*/ STR(1308), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, shape_tex_normal), text, ID_action_lib_shape_tex_normal, false, sprite });
					tab_next(self);
				}
				if (idVar(global::temp_edit, type) == e_temp_type_CUBE || idVar(global::temp_edit, type) == e_temp_type_CONE || idVar(global::temp_edit, type) == e_temp_type_CYLINDER)
				{
					if (sReal(setting_advanced_mode) > 0)
					{
						tab_control_checkbox(self);
						draw_checkbox(self, /*"libraryshapetexmapped"*/ STR(3211), sVar(dx), sVar(dy), idVar(global::temp_edit, shape_tex_mapped), ID_action_lib_shape_tex_mapped, /*"libraryshapetexmappedtip"*/ STR(3212));
						tab_next(self);
						if (idVar(global::temp_edit, shape_tex_mapped) > 0)
						{
							tab_control_button_label(self);
							if (draw_button_label(self, /*"libraryshapetexsavemap"*/ STR(3213), sVar(dx), sVar(dy), sVar(dw), icons_TEXTURE_EXPORT, e_button_SECONDARY))
								action_lib_shape_save_map();
							tab_next(self);
						}
					}
				}
				if (idVar(global::temp_edit, shape_tex) > 0 || idVar(global::temp_edit, shape_tex_material) > 0 || idVar(global::temp_edit, shape_tex_normal) > 0)
				{
					if (!(idVar(global::temp_edit, shape_tex_mapped) > 0))
					{
						textfield_group_add(self, { /*"libraryshapetexhoffset"*/ STR(3214), idVar(global::temp_edit, shape_tex_hoffset), IntType(0), ID_action_lib_shape_tex_hoffset, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), library))->tbx_shape_tex_hoffset });
						textfield_group_add(self, { /*"libraryshapetexvoffset"*/ STR(3215), idVar(global::temp_edit, shape_tex_voffset), IntType(0), ID_action_lib_shape_tex_voffset, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), library))->tbx_shape_tex_voffset });
						tab_control_textfield_group(self);
						draw_textfield_group(self, /*"libraryshapetexoffset"*/ STR(3216), sVar(dx), sVar(dy), sVar(dw), 1.0 / 100.0, -no_limit, no_limit, IntType(0), true, false, IntType(3));
						tab_next(self);
						textfield_group_add(self, { /*"libraryshapetexhrepeat"*/ STR(3217), idVar(global::temp_edit, shape_tex_hrepeat), IntType(1), ID_action_lib_shape_tex_hrepeat, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), library))->tbx_shape_tex_hrepeat });
						textfield_group_add(self, { /*"libraryshapetexvrepeat"*/ STR(3218), idVar(global::temp_edit, shape_tex_vrepeat), IntType(1), ID_action_lib_shape_tex_vrepeat, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), library))->tbx_shape_tex_vrepeat });
						tab_control_textfield_group(self);
						draw_textfield_group(self, /*"libraryshapetexrepeat"*/ STR(3219), sVar(dx), sVar(dy), sVar(dw), 1.0 / 100.0, IntType(0), no_limit, IntType(0), true, false, IntType(3));
						tab_next(self);
					}
					tab_control_checkbox(self);
					draw_checkbox(self, /*"libraryshapetexhmirror"*/ STR(3220), sVar(dx), sVar(dy), idVar(global::temp_edit, shape_tex_hmirror), ID_action_lib_shape_tex_hmirror);
					tab_next(self);
					tab_control_checkbox(self);
					draw_checkbox(self, /*"libraryshapetexvmirror"*/ STR(3221), sVar(dx), sVar(dy), idVar(global::temp_edit, shape_tex_vmirror), ID_action_lib_shape_tex_vmirror);
					tab_next(self);
				}
				if (idVar(global::temp_edit, type) == e_temp_type_CONE || idVar(global::temp_edit, type) == e_temp_type_CYLINDER)
				{
					tab_control_checkbox(self);
					draw_checkbox(self, /*"libraryshapeclosed"*/ STR(3222), sVar(dx), sVar(dy), idVar(global::temp_edit, shape_closed), ID_action_lib_shape_closed);
					tab_next(self);
				}
				tab_control_checkbox(self);
				draw_checkbox(self, /*"libraryshapeinvert"*/ STR(3223), sVar(dx), sVar(dy), idVar(global::temp_edit, shape_invert), ID_action_lib_shape_invert);
				tab_next(self);
				if (idVar(global::temp_edit, type) == e_temp_type_SPHERE || idVar(global::temp_edit, type) == e_temp_type_CONE || idVar(global::temp_edit, type) == e_temp_type_CYLINDER)
				{
					tab_control_dragger(self);
					draw_dragger(self, /*"libraryshapedetail"*/ STR(3224), sVar(dx), sVar(dy), dragger_width, idVar(global::temp_edit, shape_detail), 1.0 / 4.0, IntType(3), no_limit, IntType(32), IntType(1), ObjType(obj_category, idInt(sVar(tab), library))->tbx_shape_detail, ID_action_lib_shape_detail);
					tab_next(self);
				}
				else
					if (idVar(global::temp_edit, type) == e_temp_type_SURFACE)
					{
						tab_control_checkbox(self);
						draw_checkbox(self, /*"libraryshapefacecamera"*/ STR(3225), sVar(dx), sVar(dy), idVar(global::temp_edit, shape_face_camera), ID_action_lib_shape_face_camera);
						tab_next(self);
					}
				
				break;
			}
			
			case e_temp_type_MODEL:
			{
				VarType text;
				if (idVar(global::temp_edit, model) != null_)
					text = idVar(idVar(global::temp_edit, model), display_name);
				else
					text = text_get({ /*"listnone"*/ STR(754) });
				
				tab_control_menu(self);
				draw_button_menu(self, { /*"librarymodel"*/ STR(1309), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::temp_edit, model), text, ID_action_lib_model, false, null_ });
				tab_next(self);
				VarType texobj, tex;
				withOne (Object, global::temp_edit, self->id)
				{
					texobj = temp_get_model_texobj(self, null_);
					tex = temp_get_model_tex_preview(self, texobj, sVar(model_file));
				}
				
				if (texobj != null_)
					text = idVar(texobj, display_name);
				else
					text = text_get({ /*"listnone"*/ STR(754) });
				
				if (idVar(global::temp_edit, model_tex) == null_)
					text = text_get({ /*"listdefault"*/ STR(780), text });
				tab_control_menu(self, { sReal(ui_large_height) });
				draw_button_menu(self, { /*"librarymodeltex"*/ STR(1293), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, model_tex), text, ID_action_lib_model_tex, false, tex });
				tab_next(self);
				if (sVar(project_render_material_maps) > 0)
				{
					withOne (Object, global::temp_edit, self->id)
					{
						texobj = temp_get_model_tex_material_obj(self, null_);
						tex = temp_get_model_tex_material_preview(self, texobj, sVar(model_file));
					}
					
					if (texobj != null_)
						text = idVar(texobj, display_name);
					else
						text = text_get({ /*"listnone"*/ STR(754) });
					
					if (idVar(global::temp_edit, model_tex_material) == null_)
						text = text_get({ /*"listdefault"*/ STR(780), text });
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"librarymodeltexmaterial"*/ STR(1294), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, model_tex_material), text, ID_action_lib_model_tex_material, false, tex });
					tab_next(self);
					withOne (Object, global::temp_edit, self->id)
					{
						texobj = temp_get_model_tex_normal_obj(self, null_);
						tex = temp_get_model_tex_normal_preview(self, texobj, sVar(model_file));
					}
					
					if (texobj != null_)
						text = idVar(texobj, display_name);
					else
						text = text_get({ /*"listnone"*/ STR(754) });
					
					if (idVar(global::temp_edit, model_tex_normal) == null_)
						text = text_get({ /*"listdefault"*/ STR(780), text });
					tab_control_menu(self, { sReal(ui_large_height) });
					draw_button_menu(self, { /*"librarymodeltexnormal"*/ STR(1295), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), idVar(global::temp_edit, model_tex_normal), text, ID_action_lib_model_tex_normal, false, tex });
					tab_next(self);
				}
				break;
			}
			
		}
		
		if (idVar(global::temp_edit, type) == e_temp_type_BLOCK)
		{
			tab_control_checkbox(self);
			draw_checkbox(self, /*"libraryrandomizeblocks"*/ STR(3226), sVar(dx), sVar(dy), idVar(global::temp_edit, block_randomize), ID_action_lib_block_randomize, /*"libraryrandomizeblockshelp"*/ STR(3227));
			tab_next(self);
		}
		if (idVar(global::temp_edit, type) == e_temp_type_SCENERY || idVar(global::temp_edit, type) == e_temp_type_BLOCK)
		{
			tab_control_checkbox(self);
			draw_checkbox(self, /*"libraryrepeat"*/ STR(3228), sVar(dx), sVar(dy), idVar(global::temp_edit, block_repeat_enable), ID_action_lib_block_repeat_enable);
			tab_next(self);
			if (idVar(global::temp_edit, block_repeat_enable) > 0)
			{
				global::axis_edit = X_;
				textfield_group_add(self, { /*"libraryrepeatx"*/ STR(3229), idVar(global::temp_edit, block_repeat).Value(global::axis_edit), IntType(1), ID_action_lib_block_repeat, X_, ObjType(obj_category, idInt(sVar(tab), library))->tbx_repeat_x });
				global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Y_ : Z_);
				textfield_group_add(self, { /*"libraryrepeaty"*/ STR(3230), idVar(global::temp_edit, block_repeat).Value(global::axis_edit), IntType(1), ID_action_lib_block_repeat, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), library))->tbx_repeat_y });
				global::axis_edit = ((sReal(setting_z_is_up) > 0) ? Z_ : Y_);
				textfield_group_add(self, { /*"libraryrepeatz"*/ STR(3231), idVar(global::temp_edit, block_repeat).Value(global::axis_edit), IntType(1), ID_action_lib_block_repeat, global::axis_edit, ObjType(obj_category, idInt(sVar(tab), library))->tbx_repeat_z });
				tab_control_textfield_group(self, false);
				draw_textfield_group(self, /*"libraryrepeat"*/ STR(3228), sVar(dx), sVar(dy), sVar(dw), 1.0 / 10.0, IntType(1), IntType(1000), IntType(1), false, true, IntType(1));
				tab_next(self);
			}
		}
		return 0.0;
	}
	
}
