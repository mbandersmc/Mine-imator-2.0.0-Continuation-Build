/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.03.24 00:10:18 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void app_startup_interface_timeline()
	{
		global::_app->timeline_playing = false;
		global::_app->timeline_playing_start_time = IntType(0);
		global::_app->timeline_playing_start_marker = IntType(0);
		global::_app->timeline_playing_last_marker = IntType(0);
		global::_app->timeline_playing_start_hor_scroll = IntType(0);
		global::_app->timeline_repeat = false;
		global::_app->timeline_seamless_repeat = false;
		global::_app->timeline_intervals_show = false;
		global::_app->timeline_interval_size = IntType(24);
		global::_app->timeline_interval_offset = IntType(0);
		global::_app->timeline_list_first = IntType(0);
		global::_app->timeline_list_visible = IntType(0);
		global::_app->timeline_mouse_pos = null_;
		global::_app->timeline_marker = IntType(0);
		global::_app->timeline_marker_move = IntType(0);
		global::_app->timeline_marker_previous = IntType(0);
		global::_app->timeline_region_start = null_;
		global::_app->timeline_region_end = null_;
		global::_app->timeline_region_pos = IntType(0);
		global::_app->timeline_length = IntType(0);
		global::_app->timeline_zoom = IntType(16);
		global::_app->timeline_zoom_goal = IntType(16);
		global::_app->timeline_camera = null_;
		global::_app->timeline_insert_pos = IntType(0);
		global::_app->timeline_show_frames = false;
		global::_app->timeline_marker_length = IntType(0);
		global::_app->timeline_move_obj = null_;
		global::_app->timeline_move_highlight_tl = null_;
		global::_app->timeline_move_highlight_pos = null_;
		global::_app->timeline_move_off_x = IntType(0);
		global::_app->timeline_move_off_y = IntType(0);
		global::_app->timeline_move_kf = null_;
		global::_app->timeline_move_kf_mouse_pos = null_;
		global::_app->timeline_sound_resize_mouse_pos = null_;
		global::_app->timeline_sound_end_mousex = IntType(0);
		global::_app->timeline_sound_end_value = IntType(0);
		global::_app->timeline_settings = false;
		global::_app->timeline_settings_import_loop_tl = null_;
		global::_app->timeline_settings_walk_fn = /*""*/ STR(0);
		global::_app->timeline_settings_run_fn = /*""*/ STR(0);
		global::_app->timeline_settings_keyframes = false;
		global::_app->timeline_settings_keyframes_export = false;
		global::_app->copy_kf_amount = IntType(0);
		global::_app->copy_kf_pos[IntType(0)] = IntType(0);
		global::_app->copy_kf_value[IntType(0)][IntType(0)] = IntType(0);
		global::_app->copy_kf_tl_save_id[IntType(0)] = /*""*/ STR(0);
		global::_app->copy_kf_tl_part_of_save_id[IntType(0)] = /*""*/ STR(0);
		global::_app->copy_kf_tl_model_part_name[IntType(0)] = null_;
		global::_app->tree_list = ds_list_create();
		global::_app->tree_list_filter = ds_list_create();
		global::_app->tree_visible_list = ds_list_create();
		global::_app->tree_update_parent_filter = global::_app->id;
		global::_app->tree_update_extend = false;
		global::_app->tree_update_color = null_;
		global::_app->project_model_list = ds_list_create();
		global::_app->project_timeline_list = ds_list_create();
		global::_app->timeline_settings_w = IntType(0);
		global::_app->timeline_settings_right_w = IntType(0);
		global::_app->timeline_marker_list = ds_list_create();
		global::_app->timeline_marker_current = null_;
		global::_app->timeline_marker_edit = null_;
		global::_app->timeline_marker_edit_offset = IntType(0);
		global::_app->timeline_search = /*""*/ STR(0);
		global::_app->timeline_rename = null_;
		global::_app->timeline_hide_color_tag = array_create({ IntType(9), false });
		global::_app->timeline_select_box_min = ArrType::From({ no_limit, no_limit, no_limit });
		global::_app->timeline_select_box_max = ArrType::From({ -no_limit, -no_limit, -no_limit });
	}
	
	void app_startup_interface_toolbar()
	{
		global::_app->toolbar_size = IntType(28);
		global::_app->toolbar_menu_active = false;
	}
	
	void app_startup_interface_views()
	{
		global::_app->view_area_x = IntType(0);
		global::_app->view_area_y = IntType(0);
		global::_app->view_area_width = IntType(0);
		global::_app->view_area_height = IntType(0);
		global::_app->view_click_x = IntType(0);
		global::_app->view_click_y = IntType(0);
		global::_app->view_resize_width = IntType(0);
		global::_app->view_resize_height = IntType(0);
		global::_app->view_glow_left_top = false;
		global::_app->view_glow_top = false;
		global::_app->view_glow_right_top = false;
		global::_app->view_glow_right = false;
		global::_app->view_glow_right_bottom = false;
		global::_app->view_glow_bottom = false;
		global::_app->view_glow_left_bottom = false;
		global::_app->view_glow_left = false;
		global::_app->view_split = global::_app->setting_view_split;
		global::_app->view_main = (new obj_view)->id;
		ObjType(obj_view, global::_app->view_main)->overlays = global::_app->setting_view_main_overlays;
		ObjType(obj_view, global::_app->view_main)->aspect_ratio = global::_app->setting_view_main_aspect_ratio;
		ObjType(obj_view, global::_app->view_main)->grid = global::_app->setting_view_main_grid;
		ObjType(obj_view, global::_app->view_main)->gizmos = global::_app->setting_view_main_gizmos;
		ObjType(obj_view, global::_app->view_main)->effects = global::_app->setting_view_main_effects;
		ObjType(obj_view, global::_app->view_main)->particles = global::_app->setting_view_main_particles;
		ObjType(obj_view, global::_app->view_main)->location = global::_app->setting_view_main_location.Str();
		ObjType(obj_view, global::_app->view_main)->quality = e_view_mode_SHADED;
		ObjType(obj_view, global::_app->view_main)->camera = -IntType(4);
		ObjType(obj_view, global::_app->view_main)->title = /*""*/ STR(0);
		global::_app->view_second = (new obj_view)->id;
		ObjType(obj_view, global::_app->view_second)->show = global::_app->setting_view_second_show;
		ObjType(obj_view, global::_app->view_second)->overlays = global::_app->setting_view_second_overlays;
		ObjType(obj_view, global::_app->view_second)->aspect_ratio = global::_app->setting_view_second_aspect_ratio;
		ObjType(obj_view, global::_app->view_second)->grid = global::_app->setting_view_second_grid;
		ObjType(obj_view, global::_app->view_second)->gizmos = global::_app->setting_view_second_gizmos;
		ObjType(obj_view, global::_app->view_second)->effects = global::_app->setting_view_second_effects;
		ObjType(obj_view, global::_app->view_second)->particles = global::_app->setting_view_second_particles;
		ObjType(obj_view, global::_app->view_second)->location = global::_app->setting_view_second_location.Str();
		ObjType(obj_view, global::_app->view_second)->location_last = ObjType(obj_view, global::_app->view_second)->location;
		ObjType(obj_view, global::_app->view_second)->width = global::_app->setting_view_second_width;
		ObjType(obj_view, global::_app->view_second)->height = global::_app->setting_view_second_height;
		ObjType(obj_view, global::_app->view_second)->quality = e_view_mode_SHADED;
		ObjType(obj_view, global::_app->view_second)->camera = -IntType(5);
		ObjType(obj_view, global::_app->view_second)->title = /*""*/ STR(0);
		global::_app->view_glow_ani = IntType(0);
		global::_app->view_glow_location_prev = /*""*/ STR(0);
		global::_app->view_render = false;
		global::_app->view_render_real_time = true;
		global::_app->view_control_ratio = IntType(1);
		global::_app->view_control_edit = null_;
		global::_app->view_control_edit_view = null_;
		global::_app->view_control_vec = vec2(IntType(0), IntType(0));
		global::_app->view_control_pos = vec2(IntType(0), IntType(0));
		global::_app->view_control_flip = false;
		global::_app->view_control_value = IntType(0);
		global::_app->view_control_move_distance = IntType(0);
		global::_app->view_control_scale_coords = vec2(IntType(0));
		global::_app->view_control_scale_amount = IntType(1);
		global::_app->view_control_scale_start = IntType(0);
		global::_app->view_control_value_scale = vec3(IntType(1));
		global::_app->view_control_matrix = null_;
		global::_app->view_control_length = null_;
		global::_app->view_control_ray_dir = vec3(IntType(0));
		global::_app->view_control_plane_normal = vec3(IntType(0));
		global::_app->view_control_plane_origin = vec3(IntType(0));
		global::_app->view_control_plane = false;
		global::_app->view_control_move_flip_axis = ArrType::From({ false, false, false });
	}
	
	void app_startup_keybinds()
	{
		global::keybinds = array_create({ e_keybind_amount });
		global::keybind_edit = null_;
		keybind_register(/*"projectnew"*/ STR(237), e_keybind_PROJECT_NEW, keybind_new(/*"N"*/ STR(238), true));
		keybind_register(/*"projectopen"*/ STR(239), e_keybind_PROJECT_OPEN, keybind_new(/*"O"*/ STR(240), true));
		keybind_register(/*"projectsave"*/ STR(241), e_keybind_PROJECT_SAVE, keybind_new(/*"S"*/ STR(242), true));
		keybind_register(/*"projectsaveas"*/ STR(243), e_keybind_PROJECT_SAVE_AS, keybind_new(/*"S"*/ STR(242), true, true));
		keybind_register(/*"importasset"*/ STR(244), e_keybind_IMPORT_ASSET, keybind_new(/*"I"*/ STR(245), true));
		keybind_register(/*"undo"*/ STR(246), e_keybind_UNDO, keybind_new(/*"Z"*/ STR(247), true));
		keybind_register(/*"redo"*/ STR(248), e_keybind_REDO, keybind_new(/*"Y"*/ STR(249), true));
		keybind_register(/*"timelinedelete"*/ STR(250), e_keybind_TIMELINE_DELETE, keybind_new(/*"R"*/ STR(251), true));
		keybind_register(/*"timelineduplicate"*/ STR(252), e_keybind_TIMELINE_DUPLICATE, keybind_new(/*"D"*/ STR(253), true));
		keybind_register(/*"timelineselect"*/ STR(254), e_keybind_TIMELINE_SELECT, keybind_new(/*"A"*/ STR(255), true));
		keybind_register(/*"timelinehide"*/ STR(256), e_keybind_TIMELINE_HIDE, keybind_new(/*"H"*/ STR(257), true));
		keybind_register(/*"timelineshowhidden"*/ STR(258), e_keybind_TIMELINE_SHOW_HIDDEN, keybind_new(/*"H"*/ STR(257), true, false, true));
		keybind_register(/*"createfolder"*/ STR(259), e_keybind_CREATE_FOLDER, keybind_new(/*"F"*/ STR(260), true));
		keybind_register(/*"keyframescreate"*/ STR(261), e_keybind_KEYFRAMES_CREATE, keybind_new(/*"Q"*/ STR(262), true));
		keybind_register(/*"keyframescopy"*/ STR(263), e_keybind_KEYFRAMES_COPY, keybind_new(/*"C"*/ STR(264), true));
		keybind_register(/*"keyframescut"*/ STR(265), e_keybind_KEYFRAMES_CUT, keybind_new(/*"X"*/ STR(266), true));
		keybind_register(/*"keyframespaste"*/ STR(267), e_keybind_KEYFRAMES_PASTE, keybind_new(/*"V"*/ STR(268), true));
		keybind_register(/*"keyframesdelete"*/ STR(269), e_keybind_KEYFRAMES_DELETE, keybind_new(vk_delete));
		keybind_register(/*"play"*/ STR(270), e_keybind_PLAY, keybind_new(vk_space));
		keybind_register(/*"playbeginning"*/ STR(271), e_keybind_PLAY_BEGINNING, keybind_new(vk_enter));
		keybind_register(/*"markerleft"*/ STR(272), e_keybind_MARKER_LEFT, keybind_new(vk_left), true);
		keybind_register(/*"markerright"*/ STR(273), e_keybind_MARKER_RIGHT, keybind_new(vk_right), true);
		keybind_register(/*"rendermode"*/ STR(274), e_keybind_RENDER_MODE, keybind_new(vk_f5));
		keybind_register(/*"particlesspawn"*/ STR(275), e_keybind_PARTICLES_SPAWN, keybind_new(/*"X"*/ STR(266)));
		keybind_register(/*"particlesclear"*/ STR(276), e_keybind_PARTICLES_CLEAR, keybind_new(/*"C"*/ STR(264)));
		keybind_register(/*"secondaryview"*/ STR(277), e_keybind_SECONDARY_VIEW, keybind_new(vk_f6));
		keybind_register(/*"toolselect"*/ STR(278), e_keybind_TOOL_SELECT, keybind_new(/*"W"*/ STR(279)));
		keybind_register(/*"toolmove"*/ STR(280), e_keybind_TOOL_MOVE, keybind_new(/*"G"*/ STR(281)));
		keybind_register(/*"toolrotate"*/ STR(282), e_keybind_TOOL_ROTATE, keybind_new(/*"R"*/ STR(251)));
		keybind_register(/*"toolscale"*/ STR(283), e_keybind_TOOL_SCALE, keybind_new(/*"S"*/ STR(242)));
		keybind_register(/*"toolbend"*/ STR(284), e_keybind_TOOL_BEND, keybind_new(/*"B"*/ STR(285)));
		keybind_register(/*"tooltransform"*/ STR(286), e_keybind_TOOL_TRANSFORM, keybind_new(/*"T"*/ STR(287)));
		keybind_register(/*"snap"*/ STR(288), e_keybind_SNAP, keybind_new(/*"F"*/ STR(260)));
		keybind_register(/*"camforward"*/ STR(289), e_keybind_CAM_FORWARD, keybind_new(/*"W"*/ STR(279)), true);
		keybind_register(/*"camleft"*/ STR(290), e_keybind_CAM_LEFT, keybind_new(/*"A"*/ STR(255)), true);
		keybind_register(/*"camback"*/ STR(291), e_keybind_CAM_BACK, keybind_new(/*"S"*/ STR(242)), true);
		keybind_register(/*"camright"*/ STR(292), e_keybind_CAM_RIGHT, keybind_new(/*"D"*/ STR(253)), true);
		keybind_register(/*"camascend"*/ STR(293), e_keybind_CAM_ASCEND, keybind_new(/*"E"*/ STR(294)), true);
		keybind_register(/*"camdescend"*/ STR(295), e_keybind_CAM_DESCEND, keybind_new(/*"Q"*/ STR(262)), true);
		keybind_register(/*"camrollforward"*/ STR(296), e_keybind_CAM_ROLL_FORWARD, keybind_new(/*"Z"*/ STR(247)), true);
		keybind_register(/*"camrollback"*/ STR(297), e_keybind_CAM_ROLL_BACK, keybind_new(/*"C"*/ STR(264)), true);
		keybind_register(/*"camrollreset"*/ STR(298), e_keybind_CAM_ROLL_RESET, keybind_new(/*"X"*/ STR(266)), true);
		keybind_register(/*"camreset"*/ STR(299), e_keybind_CAM_RESET, keybind_new(/*"R"*/ STR(251)), true);
		keybind_register(/*"camfast"*/ STR(300), e_keybind_CAM_FAST, keybind_new(vk_space), true);
		keybind_register(/*"camslow"*/ STR(301), e_keybind_CAM_SLOW, keybind_new(null_, false, true), true);
		keybind_register(/*"camviewtimeline"*/ STR(302), e_keybind_CAM_VIEW_TIMELINE, keybind_new(/*"V"*/ STR(268)), false);
		keybinds_update_match();
	}
	
	void app_startup_lists(ScopeAny self)
	{
		global::value_name_list = ds_list_create();
		ds_list_add({ global::value_name_list, /*"POS_X"*/ STR(303), /*"POS_Y"*/ STR(304), /*"POS_Z"*/ STR(305), /*"ROT_X"*/ STR(306), /*"ROT_Y"*/ STR(307), /*"ROT_Z"*/ STR(308), /*"SCA_X"*/ STR(309), /*"SCA_Y"*/ STR(310), /*"SCA_Z"*/ STR(311), /*"BEND_ANGLE"*/ STR(312), /*"BEND_ANGLE_X"*/ STR(313), /*"BEND_ANGLE_Y"*/ STR(314), /*"BEND_ANGLE_Z"*/ STR(315), /*"ALPHA"*/ STR(316), /*"RGB_ADD"*/ STR(317), /*"RGB_SUB"*/ STR(318), /*"RGB_MUL"*/ STR(319), /*"HSB_ADD"*/ STR(320), /*"HSB_SUB"*/ STR(321), /*"HSB_MUL"*/ STR(322), /*"MIX_COLOR"*/ STR(323), /*"GLOW_COLOR"*/ STR(324), /*"MIX_PERCENT"*/ STR(325), /*"EMISSIVE"*/ STR(326), /*"METALLIC"*/ STR(327), /*"ROUGHNESS"*/ STR(328), /*"SUBSURFACE"*/ STR(329), /*"SUBSURFACE_RADIUS_RED"*/ STR(330), /*"SUBSURFACE_RADIUS_GREEN"*/ STR(331), /*"SUBSURFACE_RADIUS_BLUE"*/ STR(332), /*"SUBSURFACE_COLOR"*/ STR(333), /*"WIND_INFLUENCE"*/ STR(334), /*"SPAWN"*/ STR(335), /*"FREEZE"*/ STR(336), /*"CLEAR"*/ STR(337), /*"CUSTOM_SEED"*/ STR(338), /*"SEED"*/ STR(339), /*"ATTRACTOR"*/ STR(340), /*"FORCE"*/ STR(341), /*"FORCE_DIRECTIONAL"*/ STR(342), /*"FORCE_VORTEX"*/ STR(343), /*"LIGHT_COLOR"*/ STR(344), /*"LIGHT_STRENGTH"*/ STR(345), /*"LIGHT_SPECULAR_STRENGTH"*/ STR(346), /*"LIGHT_SIZE"*/ STR(347), /*"LIGHT_RANGE"*/ STR(348), /*"LIGHT_FADE_SIZE"*/ STR(349), /*"LIGHT_SPOT_RADIUS"*/ STR(350), /*"LIGHT_SPOT_SHARPNESS"*/ STR(351), /*"CAM_FOV"*/ STR(352), /*"CAM_BLADE_AMOUNT"*/ STR(353), /*"CAM_BLADE_ANGLE"*/ STR(354), /*"CAM_LIGHT_MANAGEMENT"*/ STR(355), /*"CAM_TONEMAPPER"*/ STR(356), /*"CAM_EXPOSURE"*/ STR(357), /*"CAM_GAMMA"*/ STR(358), /*"CAM_ROTATE"*/ STR(359), /*"CAM_ROTATE_DISTANCE"*/ STR(360), /*"CAM_ROTATE_ANGLE_XY"*/ STR(361), /*"CAM_ROTATE_ANGLE_Z"*/ STR(362), /*"CAM_SHAKE"*/ STR(363), /*"CAM_SHAKE_MODE"*/ STR(364), /*"CAM_SHAKE_STRENGTH_X"*/ STR(365), /*"CAM_SHAKE_STRENGTH_Y"*/ STR(366), /*"CAM_SHAKE_STRENGTH_Z"*/ STR(367), /*"CAM_SHAKE_SPEED_X"*/ STR(368), /*"CAM_SHAKE_SPEED_Y"*/ STR(369), /*"CAM_SHAKE_SPEED_Z"*/ STR(370), /*"CAM_DOF"*/ STR(371), /*"CAM_DOF_DEPTH"*/ STR(372), /*"CAM_DOF_RANGE"*/ STR(373), /*"CAM_DOF_FADE_SIZE"*/ STR(374), /*"CAM_DOF_BLUR_SIZE"*/ STR(375), /*"CAM_DOF_BLUR_RATIO"*/ STR(376), /*"CAM_DOF_BIAS"*/ STR(377), /*"CAM_DOF_THRESHOLD"*/ STR(378), /*"CAM_DOF_GAIN"*/ STR(379), /*"CAM_DOF_FRINGE"*/ STR(380), /*"CAM_DOF_FRINGE_ANGLE_RED"*/ STR(381), /*"CAM_DOF_FRINGE_ANGLE_GREEN"*/ STR(382), /*"CAM_DOF_FRINGE_ANGLE_BLUE"*/ STR(383), /*"CAM_DOF_FRINGE_RED"*/ STR(384), /*"CAM_DOF_FRINGE_GREEN"*/ STR(385), /*"CAM_DOF_FRINGE_BLUE"*/ STR(386), /*"CAM_BLOOM"*/ STR(387), /*"CAM_BLOOM_THRESHOLD"*/ STR(388), /*"CAM_BLOOM_INTENSITY"*/ STR(389), /*"CAM_BLOOM_RADIUS"*/ STR(390), /*"CAM_BLOOM_RATIO"*/ STR(391), /*"CAM_BLOOM_BLEND"*/ STR(392), /*"CAM_LENS_DIRT"*/ STR(393), /*"CAM_LENS_DIRT_BLOOM"*/ STR(394), /*"CAM_LENS_DIRT_GLOW"*/ STR(395), /*"CAM_LENS_DIRT_RADIUS"*/ STR(396), /*"CAM_LENS_DIRT_INTENSITY"*/ STR(397), /*"CAM_LENS_DIRT_POWER"*/ STR(398), /*"CAM_COLOR_CORRECTION"*/ STR(399), /*"CAM_CONTRAST"*/ STR(400), /*"CAM_BRIGHTNESS"*/ STR(401), /*"CAM_SATURATION"*/ STR(402), /*"CAM_VIBRANCE"*/ STR(403), /*"CAM_COLOR_BURN"*/ STR(404), /*"CAM_GRAIN"*/ STR(405), /*"CAM_GRAIN_STRENGTH"*/ STR(406), /*"CAM_GRAIN_SATURATION"*/ STR(407), /*"CAM_GRAIN_SIZE"*/ STR(408), /*"CAM_VIGNETTE"*/ STR(409), /*"CAM_VIGNETTE_RADIUS"*/ STR(410), /*"CAM_VIGNETTE_SOFTNESS"*/ STR(411), /*"CAM_VIGNETTE_STRENGTH"*/ STR(412), /*"CAM_VIGNETTE_COLOR"*/ STR(413), /*"CAM_CA"*/ STR(414), /*"CAM_CA_BLUR_AMOUNT"*/ STR(415), /*"CAM_CA_DISTORT_CHANNELS"*/ STR(416), /*"CAM_CA_RED_OFFSET"*/ STR(417), /*"CAM_CA_GREEN_OFFSET"*/ STR(418), /*"CAM_CA_BLUE_OFFSET"*/ STR(419), /*"CAM_DISTORT"*/ STR(420), /*"CAM_DISTORT_REPEAT"*/ STR(421), /*"CAM_DISTORT_ZOOM_AMOUNT"*/ STR(422), /*"CAM_DISTORT_AMOUNT"*/ STR(423), /*"CAM_SIZE_USE_PROJECT"*/ STR(424), /*"CAM_SIZE_KEEP_ASPECT_RATIO"*/ STR(425), /*"CAM_WIDTH"*/ STR(426), /*"CAM_HEIGHT"*/ STR(427), /*"BG_IMAGE_SHOW"*/ STR(428), /*"BG_IMAGE_ROTATION"*/ STR(429), /*"BG_SKY_MOON_PHASE"*/ STR(430), /*"BG_SKY_TIME"*/ STR(431), /*"BG_SKY_ROTATION"*/ STR(432), /*"BG_SUNLIGHT_STRENGTH"*/ STR(433), /*"BG_SUNLIGHT_ANGLE"*/ STR(434), /*"BG_TWILIGHT"*/ STR(435), /*"BG_SKY_CLOUDS_SHOW"*/ STR(436), /*"BG_SKY_CLOUDS_SPEED"*/ STR(437), /*"BG_SKY_CLOUDS_HEIGHT"*/ STR(438), /*"BG_SKY_CLOUDS_OFFSET"*/ STR(439), /*"BG_GROUND_SHOW"*/ STR(440), /*"BG_GROUND_SLOT"*/ STR(441), /*"BG_BIOME"*/ STR(442), /*"BG_SKY_COLOR"*/ STR(443), /*"BG_SKY_CLOUDS_COLOR"*/ STR(444), /*"BG_SUNLIGHT_COLOR"*/ STR(445), /*"BG_AMBIENT_COLOR"*/ STR(446), /*"BG_NIGHT_COLOR"*/ STR(447), /*"BG_GRASS_COLOR"*/ STR(448), /*"BG_FOLIAGE_COLOR"*/ STR(449), /*"BG_WATER_COLOR"*/ STR(450), /*"BG_LEAVES_OAK_COLOR"*/ STR(451), /*"BG_LEAVES_SPRUCE_COLOR"*/ STR(452), /*"BG_LEAVES_BIRCH_COLOR"*/ STR(453), /*"BG_LEAVES_JUNGLE_COLOR"*/ STR(454), /*"BG_LEAVES_ACACIA_COLOR"*/ STR(455), /*"BG_LEAVES_DARK_OAK_COLOR"*/ STR(456), /*"BG_LEAVES_MANGROVE_COLOR"*/ STR(457), /*"BG_FOG_SHOW"*/ STR(458), /*"BG_FOG_SKY"*/ STR(459), /*"BG_FOG_CUSTOM_COLOR"*/ STR(460), /*"BG_FOG_COLOR"*/ STR(461), /*"BG_FOG_CUSTOM_OBJECT_COLOR"*/ STR(462), /*"BG_FOG_OBJECT_COLOR"*/ STR(463), /*"BG_FOG_DISTANCE"*/ STR(464), /*"BG_FOG_SIZE"*/ STR(465), /*"BG_FOG_HEIGHT"*/ STR(466), /*"BG_WIND"*/ STR(467), /*"BG_WIND_SPEED"*/ STR(468), /*"BG_WIND_STRENGTH"*/ STR(469), /*"BG_WIND_DIRECTION"*/ STR(470), /*"BG_WIND_DIRECTIONAL_SPEED"*/ STR(471), /*"BG_WIND_DIRECTIONAL_STRENGTH"*/ STR(472), /*"BG_TEXTURE_ANI_SPEED"*/ STR(473), /*"TEXTURE_OBJ"*/ STR(474), /*"TEXTURE_MATERIAL_OBJ"*/ STR(475), /*"TEXTURE_NORMAL_OBJ"*/ STR(476), /*"SOUND_OBJ"*/ STR(477), /*"SOUND_VOLUME"*/ STR(478), /*"SOUND_PITCH"*/ STR(479), /*"SOUND_START"*/ STR(480), /*"SOUND_END"*/ STR(481), /*"TEXT"*/ STR(482), /*"TEXT_FONT"*/ STR(483), /*"TEXT_HALIGN"*/ STR(484), /*"TEXT_VALIGN"*/ STR(485), /*"TEXT_AA"*/ STR(486), /*"CUSTOM_ITEM_SLOT"*/ STR(487), /*"ITEM_SLOT"*/ STR(488), /*"ITEM_NAME"*/ STR(489), /*"PATH_OBJ"*/ STR(490), /*"PATH_OFFSET"*/ STR(491), /*"PATH_POINT_ANGLE"*/ STR(492), /*"PATH_POINT_SCALE"*/ STR(493), /*"IK_TARGET"*/ STR(494), /*"IK_BLEND"*/ STR(495), /*"IK_TARGET_ANGLE"*/ STR(496), /*"IK_ANGLE_OFFSET"*/ STR(497), /*"VISIBLE"*/ STR(498), /*"TRANSITION"*/ STR(499), /*"EASE_IN_X"*/ STR(500), /*"EASE_IN_Y"*/ STR(501), /*"EASE_OUT_X"*/ STR(502), /*"EASE_OUT_Y"*/ STR(503) });
		global::camera_values_list = ds_list_create();
		for (IntType i = e_value_CAM_FOV; i <= e_value_CAM_HEIGHT; i++)
			ds_list_add({ global::camera_values_list, i });
		global::camera_values_copy = ds_list_create();
		for (IntType i = IntType(0); i < ds_list_size(global::camera_values_list); i++)
			DsList(global::camera_values_copy)[i] = tl_value_default(DsList(global::camera_values_list).Value(i));
		global::camera_use_default_list = ds_list_create();
		for (IntType i = IntType(0); i < ds_list_size(global::camera_values_list); i++)
		{
			IntType valueid = e_value_CAM_FOV + i;
			if (tl_value_is_bool(valueid))
				DsList(global::camera_use_default_list)[i] = false;
			else
				if (valueid == e_value_CAM_WIDTH || valueid == e_value_CAM_HEIGHT)
					DsList(global::camera_use_default_list)[i] = null_;
				else
					DsList(global::camera_use_default_list)[i] = true;
			
			
		}
		global::temp_type_name_list = ds_list_create();
		ds_list_add({ global::temp_type_name_list, /*"char"*/ STR(504), /*"spblock"*/ STR(505), /*"scenery"*/ STR(506), /*"item"*/ STR(507), /*"block"*/ STR(508), /*"bodypart"*/ STR(509), /*"particles"*/ STR(510), /*"text"*/ STR(99), /*"cube"*/ STR(3), /*"cone"*/ STR(511), /*"cylinder"*/ STR(512), /*"sphere"*/ STR(513), /*"surface"*/ STR(514), /*"model"*/ STR(515) });
		global::tl_type_name_list = ds_list_create();
		ds_list_add({ global::tl_type_name_list, /*"char"*/ STR(504), /*"spblock"*/ STR(505), /*"scenery"*/ STR(506), /*"item"*/ STR(507), /*"block"*/ STR(508), /*"bodypart"*/ STR(509), /*"particles"*/ STR(510), /*"text"*/ STR(99), /*"cube"*/ STR(3), /*"cone"*/ STR(511), /*"cylinder"*/ STR(512), /*"sphere"*/ STR(513), /*"surface"*/ STR(514), /*"model"*/ STR(515), /*"camera"*/ STR(120), /*"spotlight"*/ STR(516), /*"pointlight"*/ STR(517), /*"folder"*/ STR(518), /*"background"*/ STR(209), /*"audio"*/ STR(519), /*"path"*/ STR(520), /*"pathpoint"*/ STR(521), /*"shape"*/ STR(522), /*"lightsource"*/ STR(523) });
		global::res_type_name_list = ds_list_create();
		ds_list_add({ global::res_type_name_list, /*"pack"*/ STR(524), /*"packunzipped"*/ STR(525), /*"skin"*/ STR(526), /*"downloadskin"*/ STR(195), /*"itemsheet"*/ STR(527), /*"legacyblocksheet"*/ STR(528), /*"blocksheet"*/ STR(529), /*"scenery"*/ STR(506), /*"fromworld"*/ STR(530), /*"particlesheet"*/ STR(531), /*"texture"*/ STR(532), /*"font"*/ STR(533), /*"sound"*/ STR(534), /*"model"*/ STR(515) });
		global::transition_list = ds_list_create();
		ds_list_add({ global::transition_list, /*"linear"*/ STR(535), /*"instant"*/ STR(536), /*"bezier"*/ STR(537), /*"easeinquad"*/ STR(538), /*"easeoutquad"*/ STR(539), /*"easeinoutquad"*/ STR(540), /*"easeincubic"*/ STR(541), /*"easeoutcubic"*/ STR(542), /*"easeinoutcubic"*/ STR(543), /*"easeinquart"*/ STR(544), /*"easeoutquart"*/ STR(545), /*"easeinoutquart"*/ STR(546), /*"easeinquint"*/ STR(547), /*"easeoutquint"*/ STR(548), /*"easeinoutquint"*/ STR(549), /*"easeinsine"*/ STR(550), /*"easeoutsine"*/ STR(551), /*"easeinoutsine"*/ STR(552), /*"easeinexpo"*/ STR(553), /*"easeoutexpo"*/ STR(554), /*"easeinoutexpo"*/ STR(555), /*"easeincirc"*/ STR(556), /*"easeoutcirc"*/ STR(557), /*"easeinoutcirc"*/ STR(558), /*"easeinelastic"*/ STR(559), /*"easeoutelastic"*/ STR(560), /*"easeinoutelastic"*/ STR(561), /*"easeinback"*/ STR(562), /*"easeoutback"*/ STR(563), /*"easeinoutback"*/ STR(564), /*"easeinbounce"*/ STR(565), /*"easeoutbounce"*/ STR(566), /*"easeinoutbounce"*/ STR(567) });
		log({ /*"Make transitions"*/ STR(568) });
		sVar(transition_texture_map) = new_transition_texture_map(IntType(36), IntType(36), IntType(6), true);
		sVar(transition_texture_small_map) = new_transition_texture_map(IntType(24), IntType(24), IntType(3), false);
		log({ /*"Transitions OK"*/ STR(569) });
		global::videotemplate_list = ds_list_create();
		ds_list_add({ global::videotemplate_list, new_videotemplate(/*"avatar"*/ STR(570), IntType(512), IntType(512)), new_videotemplate(/*"hd_720p"*/ STR(571), IntType(1280), IntType(720)), new_videotemplate(/*"fhd_1080p"*/ STR(572), IntType(1920), IntType(1080)), new_videotemplate(/*"qhd_1440p"*/ STR(573), IntType(2560), IntType(1440)), new_videotemplate(/*"uhd_4k"*/ STR(574), IntType(3840), IntType(2160)), new_videotemplate(/*"hd_720p_cinematic"*/ STR(575), IntType(1680), IntType(720)), new_videotemplate(/*"fhd_1080p_cinematic"*/ STR(576), IntType(2560), IntType(1080)), new_videotemplate(/*"qhd_1440p_cinematic"*/ STR(577), IntType(3440), IntType(1440)), new_videotemplate(/*"uhd_4k_cinematic"*/ STR(578), IntType(5120), IntType(2160)) });
		global::videoquality_list = ds_list_create();
		ds_list_add({ global::videoquality_list, new_videoquality(/*"best"*/ STR(579), IntType(5000000)), new_videoquality(/*"high"*/ STR(580), IntType(2500000)), new_videoquality(/*"medium"*/ STR(581), IntType(1200000)), new_videoquality(/*"low"*/ STR(582), IntType(700000)), new_videoquality(/*"verylow"*/ STR(583), IntType(350000)) });
		global::language_english_map = ds_map_create();
		global::language_map = ds_map_create();
		language_load(language_file, global::language_english_map);
		ds_map_copy(global::language_map, global::language_english_map);
		langauge_new(language_file);
		global::biome_list = ds_list_create();
		ds_list_add({ global::biome_list, new_biome(/*"custom"*/ STR(584), IntType(0), IntType(0), true, c_plains_biome_grass, c_plains_biome_foliage, c_plains_biome_water, null_) });
		global::particle_template_list = ds_list_create();
		global::particle_template_map = ds_map_create();
		global::minecraft_color_name_list = ds_list_create();
		ds_list_add({ global::minecraft_color_name_list, /*"white"*/ STR(585), /*"orange"*/ STR(586), /*"magenta"*/ STR(587), /*"light_blue"*/ STR(588), /*"yellow"*/ STR(589), /*"lime"*/ STR(590), /*"pink"*/ STR(591), /*"gray"*/ STR(592), /*"light_gray"*/ STR(593), /*"cyan"*/ STR(594), /*"purple"*/ STR(595), /*"blue"*/ STR(596), /*"brown"*/ STR(597), /*"green"*/ STR(598), /*"red"*/ STR(599), /*"black"*/ STR(600) });
		global::minecraft_color_list = ds_list_create();
		ds_list_add({ global::minecraft_color_list, c_minecraft_white, c_minecraft_orange, c_minecraft_magenta, c_minecraft_light_blue, c_minecraft_yellow, c_minecraft_lime, c_minecraft_pink, c_minecraft_gray, c_minecraft_light_gray, c_minecraft_cyan, c_minecraft_purple, c_minecraft_blue, c_minecraft_brown, c_minecraft_green, c_minecraft_red, c_minecraft_black });
		global::minecraft_pattern_list = ds_list_create();
		global::minecraft_pattern_short_list = ds_list_create();
		global::blend_mode_list = ds_list_create();
		ds_list_add({ global::blend_mode_list, /*"normal"*/ STR(601), /*"add"*/ STR(602), /*"subtract"*/ STR(603), /*"multiply"*/ STR(604), /*"screen"*/ STR(605) });
		global::blend_mode_map = ds_map_create();
		ds_map_add(global::blend_mode_map, /*"normal"*/ STR(601), bm_normal);
		ds_map_add(global::blend_mode_map, /*"add"*/ STR(602), bm_add);
		ds_map_add(global::blend_mode_map, /*"subtract"*/ STR(603), bm_subtract);
		ds_map_add(global::blend_mode_map, /*"multiply"*/ STR(604), ArrType::From({ bm_zero, bm_src_color }));
		ds_map_add(global::blend_mode_map, /*"screen"*/ STR(605), ArrType::From({ bm_one, bm_inv_src_color }));
		global::timeline_icon_list = ds_list_create();
		ds_list_add({ global::timeline_icon_list, icons_CHARACTER, icons_BLOCK_SPECIAL, icons_SCENERY, icons_ITEM, icons_BLOCK, icons_PART, icons_FIREWORKS, icons_TEXT, icons_CUBE, icons_CONE, icons_CYLINDER, icons_SPHERE, icons_PLANE, icons_MODEL, icons_CAMERA, icons_LIGHT_SPOT, icons_LIGHT_POINT, icons_FOLDER, icons_CLOUD, icons_NOTE, icons_PATH, icons_PATH_POINT });
		global::timeline_icon_list_dark = ds_list_create();
		ds_list_add({ global::timeline_icon_list_dark, icons_CHARACTER, icons_BLOCK_SPECIAL, icons_SCENERY, icons_ITEM, icons_BLOCK, icons_PART, icons_FIREWORKS, icons_TEXT, icons_CUBE__DARK, icons_CONE__DARK, icons_CYLINDER__DARK, icons_SPHERE__DARK, icons_PLANE, icons_MODEL, icons_CAMERA, icons_LIGHT_SPOT, icons_LIGHT_POINT, icons_FOLDER, icons_CLOUD, icons_NOTE, icons_PATH, icons_PATH_POINT });
		global::render_pass_list = ds_list_create();
		ds_list_add({ global::render_pass_list, /*"combined"*/ STR(606), /*"diffuse"*/ STR(607), /*"specular"*/ STR(608), /*"ao"*/ STR(609), /*"shadows"*/ STR(123), /*"indirect"*/ STR(125), /*"indirectshadows"*/ STR(610), /*"reflections"*/ STR(126), /*"depth"*/ STR(611), /*"normal"*/ STR(601), /*"material"*/ STR(612) });
	}
	
	void app_startup_micro_animations()
	{
		global::microani_arr = ArrType::From({ IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), IntType(0) });
		global::current_microani = null_;
		global::microani_list = ds_list_create();
		global::microani_delete_list = ds_list_create();
		global::microanis = ds_string_map_create();
		global::microani_prefix = /*""*/ STR(0);
	}
	
	void app_startup_recent(ScopeAny self)
	{
		sStr(recent_display_mode) = /*"grid"*/ STR(613);
		sVar(recent_sort_mode) = e_recent_sort_date_newest;
		sInt(recent_list) = ds_list_create();
		sInt(recent_list_display) = ds_list_create();
		sVar(recent_thumbnail_width) = IntType(240);
		sVar(recent_thumbnail_height) = IntType(180);
		sReal(recent_list_amount) = IntType(0);
		sBool(recent_list_update) = false;
		sInt(recent_scrollbar) = (new obj_scrollbar)->id;
		ObjType(obj_scrollbar, sInt(recent_scrollbar))->snap_value = IntType(44);
		sBool(recent_add_wait) = false;
		recent_load(self);
	}
	
	void app_startup_shortcut_bar()
	{
		global::_app->shortcut_bar_list = ds_list_create();
		global::_app->shortcut_bar_state = /*""*/ STR(0);
		global::_app->shortcut_bar_state_prev = /*""*/ STR(0);
	}
	
	void app_startup_themes(ScopeAny self)
	{
		sVar(update_interface_timeout) = current_time();
		sBool(update_interface_wait) = false;
		global::a_accent = IntType(1);
		global::a_accent_hover = IntType(1);
		global::a_accent_pressed = IntType(1);
		global::a_hover = .45;
		global::a_accent_overlay = .10;
		global::a_text_main = .9;
		global::a_text_secondary = .6;
		global::a_text_tertiary = .35;
		global::a_border = .15;
		global::a_overlay = .05;
		global::theme_light = (new obj_theme)->id;
		withOne (obj_theme, global::theme_light, self->id)
		{
			self->name = /*"light"*/ STR(614);
			self->dark = false;
			self->pattern = IntType(0);
			self->accent_list = ArrType();
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"DB3030"*/ STR(615)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"D85B00"*/ STR(616)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"D68E02"*/ STR(617)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"34A100"*/ STR(618)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"0D8E41"*/ STR(619)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"048E8E"*/ STR(620)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"2144F1"*/ STR(621)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"982BCB"*/ STR(622)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"E93983"*/ STR(623)));
			self->level_top = hex_to_color(/*"F7FAFC"*/ STR(624));
			self->level_middle = hex_to_color(/*"ECEFF1"*/ STR(625));
			self->level_bottom = hex_to_color(/*"D7DFE2"*/ STR(626));
			self->viewport_top = hex_to_color(/*"F0FFFF"*/ STR(627));
			self->viewport_bottom = hex_to_color(/*"B5E8F2"*/ STR(628));
			self->text_main = hex_to_color(/*"0D1214"*/ STR(629));
			self->text_secondary = self->text_main;
			self->text_tertiary = self->text_main;
			self->border = self->text_main;
			self->overlay = self->text_main;
			self->button_text = hex_to_color(/*"FFFFFF"*/ STR(630));
			self->button_text_alpha = .91;
			self->dark_overlay_alpha = .15;
			self->red_error = hex_to_color(/*"FF1D0F"*/ STR(631));
			self->yellow_warning = hex_to_color(/*"FFC01E"*/ STR(632));
			self->green_success = hex_to_color(/*"61C159"*/ STR(633));
			self->red = hex_to_color(/*"FF5656"*/ STR(634));
			self->green = hex_to_color(/*"4AB758"*/ STR(635));
			self->blue = hex_to_color(/*"1370FB"*/ STR(636));
			self->pink = hex_to_color(/*"FF5FFF"*/ STR(637));
			self->cyan = hex_to_color(/*"51C2FF"*/ STR(638));
			self->yellow = hex_to_color(/*"F4CC5D"*/ STR(639));
			self->magenta = hex_to_color(/*"FF37E8"*/ STR(640));
			self->toast_color[e_toast_INFO] = hex_to_color(/*"158AF5"*/ STR(641));
			self->toast_color[e_toast_POSITIVE] = hex_to_color(/*"64A56B"*/ STR(642));
			self->toast_color[e_toast_WARNING] = hex_to_color(/*"D09522"*/ STR(643));
			self->toast_color[e_toast_NEGATIVE] = hex_to_color(/*"FF1D0F"*/ STR(631));
		}
		
		global::theme_dark = (new obj_theme)->id;
		withOne (obj_theme, global::theme_dark, self->id)
		{
			self->name = /*"dark"*/ STR(644);
			self->dark = true;
			self->pattern = IntType(0);
			self->accent_list = ArrType();
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"FF7E76"*/ STR(645)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"FFA360"*/ STR(646)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"FFF065"*/ STR(647)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"8BFF6D"*/ STR(648)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"4EF390"*/ STR(649)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"49EED9"*/ STR(650)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"98BBFF"*/ STR(651)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"DF9CFF"*/ STR(652)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"FF9BC5"*/ STR(653)));
			self->level_top = hex_to_color(/*"37444A"*/ STR(654));
			self->level_middle = hex_to_color(/*"2B373D"*/ STR(655));
			self->level_bottom = hex_to_color(/*"18242A"*/ STR(656));
			self->viewport_top = hex_to_color(/*"2B373D"*/ STR(655));
			self->viewport_bottom = hex_to_color(/*"839096"*/ STR(657));
			self->text_main = hex_to_color(/*"FFFFFF"*/ STR(630));
			self->text_secondary = self->text_main;
			self->text_tertiary = self->text_main;
			self->border = self->text_main;
			self->overlay = self->text_main;
			self->button_text = hex_to_color(/*"000000"*/ STR(658));
			self->button_text_alpha = .91;
			self->dark_overlay_alpha = .25;
			self->red_error = hex_to_color(/*"FF7A72"*/ STR(659));
			self->yellow_warning = hex_to_color(/*"FFEB36"*/ STR(660));
			self->green_success = hex_to_color(/*"64E879"*/ STR(661));
			self->red = hex_to_color(/*"FF5656"*/ STR(634));
			self->green = hex_to_color(/*"23FF88"*/ STR(662));
			self->blue = hex_to_color(/*"1370FB"*/ STR(636));
			self->pink = hex_to_color(/*"FF5FFF"*/ STR(637));
			self->cyan = hex_to_color(/*"51C2FF"*/ STR(638));
			self->yellow = hex_to_color(/*"FFD969"*/ STR(663));
			self->magenta = hex_to_color(/*"FF37E8"*/ STR(640));
			self->toast_color[e_toast_INFO] = hex_to_color(/*"7EC1FF"*/ STR(664));
			self->toast_color[e_toast_POSITIVE] = hex_to_color(/*"64E879"*/ STR(661));
			self->toast_color[e_toast_WARNING] = hex_to_color(/*"FFEB36"*/ STR(660));
			self->toast_color[e_toast_NEGATIVE] = hex_to_color(/*"FF7A72"*/ STR(659));
		}
		
		global::theme_darker = (new obj_theme)->id;
		withOne (obj_theme, global::theme_darker, self->id)
		{
			self->name = /*"darker"*/ STR(665);
			self->dark = true;
			self->pattern = IntType(0);
			self->accent_list = ArrType();
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"FF7E76"*/ STR(645)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"FFA360"*/ STR(646)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"FFF065"*/ STR(647)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"8BFF6D"*/ STR(648)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"4EF390"*/ STR(649)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"49EED9"*/ STR(650)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"98BBFF"*/ STR(651)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"DF9CFF"*/ STR(652)));
			array_add(VarType::CreateRef(self->accent_list), hex_to_color(/*"FF9BC5"*/ STR(653)));
			self->level_top = hex_to_color(/*"1C1C1C"*/ STR(666));
			self->level_middle = hex_to_color(/*"101010"*/ STR(667));
			self->level_bottom = hex_to_color(/*"050505"*/ STR(668));
			self->viewport_top = hex_to_color(/*"484848"*/ STR(669));
			self->viewport_bottom = hex_to_color(/*"2B2B2B"*/ STR(670));
			self->text_main = hex_to_color(/*"FFFFFF"*/ STR(630));
			self->text_secondary = self->text_main;
			self->text_tertiary = self->text_main;
			self->border = self->text_main;
			self->overlay = self->text_main;
			self->button_text = hex_to_color(/*"000000"*/ STR(658));
			self->button_text_alpha = .91;
			self->dark_overlay_alpha = .65;
			self->red_error = hex_to_color(/*"FF7A72"*/ STR(659));
			self->yellow_warning = hex_to_color(/*"FFEB36"*/ STR(660));
			self->green_success = hex_to_color(/*"64E879"*/ STR(661));
			self->red = hex_to_color(/*"FF5656"*/ STR(634));
			self->green = hex_to_color(/*"23FF88"*/ STR(662));
			self->blue = hex_to_color(/*"1370FB"*/ STR(636));
			self->pink = hex_to_color(/*"FF5FFF"*/ STR(637));
			self->cyan = hex_to_color(/*"51C2FF"*/ STR(638));
			self->yellow = hex_to_color(/*"FFD969"*/ STR(663));
			self->magenta = hex_to_color(/*"FF37E8"*/ STR(640));
			self->toast_color[e_toast_INFO] = hex_to_color(/*"7EC1FF"*/ STR(664));
			self->toast_color[e_toast_POSITIVE] = hex_to_color(/*"64E879"*/ STR(661));
			self->toast_color[e_toast_WARNING] = hex_to_color(/*"FFEB36"*/ STR(660));
			self->toast_color[e_toast_NEGATIVE] = hex_to_color(/*"FF7A72"*/ STR(659));
		}
		
		global::c_control_red = ObjType(obj_theme, global::theme_darker)->red;
		global::c_control_green = ObjType(obj_theme, global::theme_darker)->green;
		global::c_control_blue = ObjType(obj_theme, global::theme_darker)->blue;
		global::c_control_cyan = ObjType(obj_theme, global::theme_darker)->cyan;
		global::c_control_yellow = ObjType(obj_theme, global::theme_darker)->yellow;
		global::c_control_magenta = ObjType(obj_theme, global::theme_darker)->magenta;
		global::c_control_white = ObjType(obj_theme, global::theme_light)->level_middle;
	}
	
	void app_startup_window(ScopeAny self)
	{
		global::window_list = ds_list_create();
		global::window_debug_current = e_window_MAIN;
		global::current_step = IntType(0);
		global::minute_steps = IntType(60) * IntType(60);
		global::delta = IntType(1);
		log({ /*"Windows startup"*/ STR(671) });
		sInt(http_assets) = null_;
		sInt(http_download_assets_file) = null_;
		sInt(http_download_assets_zip) = null_;
		sInt(http_alert_news) = null_;
		sInt(http_downloadskin) = null_;
		sReal(window_width) = IntType(1);
		sReal(window_height) = IntType(1);
		window_set_focus();
		window_set_min_width(IntType(100));
		window_set_min_height(IntType(100));
		window_set_caption(/*"Mine-imator"*/ STR(19));
		sStr(window_scroll_focus) = /*""*/ STR(0);
		sStr(window_scroll_focus_prev) = /*""*/ STR(0);
		sStr(window_state) = /*""*/ STR(0);
		sVar(window_busy) = /*""*/ STR(0);
		sVar(window_focus) = /*""*/ STR(0);
		sInt(mouse_cursor) = cr_default;
		sVar(mouse_current_x) = IntType(0);
		sVar(mouse_current_y) = IntType(0);
		sVar(mouse_previous_x) = IntType(0);
		sVar(mouse_previous_y) = IntType(0);
		sReal(mouse_move) = IntType(0);
		sInt(mouse_still) = IntType(0);
		sInt(mouse_wrap_x) = IntType(0);
		sInt(mouse_wrap_y) = IntType(0);
		sReal(mouse_click_timer) = IntType(0);
		sInt(mouse_click_count) = IntType(0);
		app_mouse_clear(self);
		sVar(dragger_drag_value) = IntType(0);
		sVar(meter_drag_value) = IntType(0);
		sVar(wheel_drag_value) = IntType(0);
		sVar(wheel_drag_moon) = false;
		sVar(handle_drag_offset_x) = IntType(0);
		sVar(handle_drag_offset_y) = IntType(0);
		sReal(dragger_multiplier) = IntType(1);
		sReal(dragger_snap) = false;
		sInt(sortlist_resize) = null_;
		sInt(sortlist_resize_column) = IntType(0);
		sReal(sortlist_resize_column_x) = IntType(0);
		sVar(content_x) = IntType(0);
		sVar(content_y) = IntType(0);
		sVar(content_width) = IntType(0);
		sVar(content_height) = IntType(0);
		sBool(content_mouseon) = false;
		sVar(content_tab) = null_;
		sInt(content_direction) = null_;
		sVar(dx) = IntType(0);
		sVar(dy) = IntType(0);
		sVar(dw) = IntType(0);
		sVar(dh) = IntType(0);
		sVar(dx_start) = IntType(0);
		sVar(dy_start) = IntType(0);
		sVar(dw_start) = IntType(0);
		sVar(dh_start) = IntType(0);
		sVar(tab) = null_;
		sReal(tab_control_h) = IntType(0);
		sBool(tab_collapse) = false;
		sVar(tab_collumns) = false;
		sReal(tab_collumns_index) = IntType(0);
		sVar(tab_collumns_width) = IntType(0);
		sVar(tab_collumns_count) = IntType(2);
		sVar(tab_collumns_start_x) = IntType(0);
		sBool(tip_show) = false;
		sInt(tip_window) = e_window_MAIN;
		sVar(tip_alpha) = IntType(0);
		sVar(tip_text) = /*""*/ STR(0);
		sVar(tip_text_wrap) = /*""*/ STR(0);
		sVar(tip_x) = IntType(0);
		sVar(tip_y) = IntType(0);
		sVar(tip_final_x) = -IntType(1);
		sVar(tip_final_y) = -IntType(1);
		sVar(tip_arrow_final_x) = -IntType(1);
		sVar(tip_arrow_final_y) = -IntType(1);
		sReal(tip_w) = IntType(0);
		sReal(tip_h) = IntType(0);
		sVar(tip_box_x) = IntType(0);
		sVar(tip_box_y) = IntType(0);
		sBool(tip_location_x) = IntType(0);
		sBool(tip_location_y) = IntType(0);
		sBool(tip_wrap) = true;
		sBool(tip_keybind_draw) = false;
		sVar(tip_arrow_x) = IntType(0);
		sVar(tip_arrow_y) = IntType(0);
		sReal(tip_arrow_xscale) = IntType(1);
		sReal(tip_arrow_yscale) = IntType(1);
		sReal(tip_arrow) = IntType(0);
		sArr(tip_text_array) = ArrType();
		sBool(tip_force_right) = false;
		sBool(tip_right) = false;
		sVar(tip_keybind) = null_;
		sInt(popup) = null_;
		sVar(popup_ani) = IntType(0);
		sVar(popup_block_ani) = IntType(0);
		sStr(popup_block_ani_ease) = /*"easeoutcirc"*/ STR(557);
		sStr(popup_ani_type) = /*""*/ STR(0);
		sInt(popup_switch_to) = null_;
		sInt(popup_switch_from) = null_;
		sBool(popup_mouseon) = false;
		sInt(place_tl) = null_;
		sBool(place_tl_render) = true;
		sBool(place_spawn) = false;
		sVar(place_view_pos) = null_;
		sInt(place_view_mouse) = null_;
		sVec(place_cam_work_from) = vec3(IntType(0));
		sVar(place_cam_work_angle_look_xy) = IntType(0);
		sVar(place_cam_work_angle_look_z) = IntType(0);
		sReal(ui_large_height) = IntType(32);
		sReal(ui_small_height) = IntType(24);
		sReal(window_compact) = false;
		sReal(panel_compact) = false;
		gc_target_frame_time(IntType(0));
	}
	
	void app_update_animate(ScopeAny self)
	{
		IntType bgobject;
		BoolType updatevalues;
		ArrType cameraarr;
		updatevalues = (sVar(timeline_marker_previous) != sVar(timeline_marker));
		bgobject = null_;
		cameraarr = ArrType();
		sInt(background_light_amount) = IntType(1);
		sArr(background_light_data)[IntType(0)] = IntType(0);
		sVec(background_sun_direction) = vec3(IntType(0));
		sArr(project_path_tl_array) = ArrType::From({});
		sArr(project_use_path_tl_array) = ArrType::From({});
		sVar(project_ik_part_array) = ArrType::From({});
		sReal(background_time_prev) = sReal(background_time);
		sReal(background_time) = ((RealType)sVar(timeline_marker) / sVar(project_tempo)) * IntType(60);
		if ((sReal(background_time_prev) != sReal(background_time) || global::_app->history_resource_update) || global::_app->timeline_playing > 0)
			global::render_samples = -IntType(1);
		withAll (obj_timeline, global::_app->id)
		{
			if (updatevalues)
				tl_update_values(ScopeAny(self));
			self->tex_obj = self->value_inherit.Value(e_value_TEXTURE_OBJ);
			if ((self->tex_obj != self->tex_obj_prev) || global::_app->history_resource_update)
			{
				if (self->render_visible)
				{
					if (render_update_tl_resource(ScopeAny(self)))
						self->tex_obj_prev = self->tex_obj;
				}
			}
			if (self->type == e_tl_type_PATH)
				array_add(VarType::CreateRef(global::_app->project_path_tl_array), self->id);
			if (self->value.Value(e_value_PATH_OBJ) != null_)
				array_add(VarType::CreateRef(global::_app->project_use_path_tl_array), self->id);
			if (tl_supports_ik(self))
				array_add(VarType::CreateRef(global::_app->project_ik_part_array), self->id);
			if (self->type == e_tl_type_CAMERA)
			{
				array_add(VarType::CreateRef(cameraarr), self->id);
				if (global::_app->window_busy == /*""*/ STR(0))
				{
					if (self->cam_goalzoom > IntType(0) && abs(self->cam_goalzoom - self->value.Value(e_value_CAM_ROTATE_DISTANCE)) > 0.001)
					{
						withOne (app, global::_app->id, self->id)
						{
							tl_value_set_start(ScopeAny(self), ID_action_tl_frame_cam_rotate_distance, true);
							tl_value_set(ScopeAny(self), { e_value_CAM_ROTATE_DISTANCE, (ObjType(obj_timeline, self.otherId)->cam_goalzoom - ObjType(obj_timeline, self.otherId)->value.Value(e_value_CAM_ROTATE_DISTANCE)) / max({ IntType(1), 4.0 / global::delta }), true });
							tl_value_set_done();
						}
						
					}
					else
						self->cam_goalzoom = null_;
					
				}
			}
			if (self->type == e_temp_type_PARTICLE_SPAWNER)
				particle_spawner_update(ScopeAny(self), self->id);
			if (self->type == e_tl_type_BACKGROUND && self->value_inherit.Value(e_value_VISIBLE) && !(self->hide > 0))
				bgobject = self->id;
			if ((self->type == e_tl_type_POINT_LIGHT || self->type == e_tl_type_SPOT_LIGHT) && self->value_inherit.Value(e_value_VISIBLE))
			{
				if ((self->hide > 0 && !global::render_hidden) || (!global::_app->view_render && self->lq_hiding > 0))
					continue;
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(0)] = self->world_pos.Value(X_);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(1)] = self->world_pos.Value(Y_);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(2)] = self->world_pos.Value(Z_);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(3)] = self->value.Value(e_value_LIGHT_RANGE);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(4)] = ((RealType)color_get_red((IntType)(self->value.Value(e_value_LIGHT_COLOR))) / 255.0) * self->value.Value(e_value_LIGHT_STRENGTH);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(5)] = ((RealType)color_get_green((IntType)(self->value.Value(e_value_LIGHT_COLOR))) / 255.0) * self->value.Value(e_value_LIGHT_STRENGTH);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(6)] = ((RealType)color_get_blue((IntType)(self->value.Value(e_value_LIGHT_COLOR))) / 255.0) * self->value.Value(e_value_LIGHT_STRENGTH);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(7)] = IntType(1);
				global::_app->background_light_amount++;
			}
		}
		
		if (updatevalues)
			tl_update_matrix(self);
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(sArr(project_path_tl_array))); i++)
		{
			withOne (obj_timeline, sArr(project_path_tl_array).Value(i), global::_app->id)
			{
				if (self->path_update)
				{
					tl_update_path(self);
					self->path_update = false;
				}
			}
			
		}
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(sArr(project_use_path_tl_array))); i++)
			ObjType(obj_timeline, sArr(project_use_path_tl_array)[i])->update_matrix = true;
		if (array_length(VarType::CreateRef(sArr(project_use_path_tl_array))) > IntType(0))
		{
			withOne (app, global::_app->id, global::_app->id)
				tl_update_matrix(ScopeAny(self), true);
			
		}
		sVar(project_ik_part_array) = null_;
		sInt(timeline_camera) = null_;
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(cameraarr)); i++)
		{
			IntType cam = cameraarr.Value(i);
			if (ObjType(obj_timeline, cam)->selected > 0 || (ObjType(obj_timeline, cam)->value_inherit.Value(e_value_VISIBLE) && !(ObjType(obj_timeline, cam)->hide > 0)))
			{
				sInt(timeline_camera) = cam;
				break;
			}
		}
		sVar(timeline_marker_previous) = sVar(timeline_marker);
		if (bgobject > 0)
		{
			sVar(background_image_show) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_IMAGE_SHOW);
			sVar(background_image_rotation) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_IMAGE_ROTATION);
			sVar(background_sky_moon_phase) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_MOON_PHASE);
			sVar(background_sky_time) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_TIME);
			sVar(background_sky_rotation) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_ROTATION);
			sVar(background_sunlight_strength) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SUNLIGHT_STRENGTH);
			sVar(background_sunlight_angle) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SUNLIGHT_ANGLE);
			sVar(background_twilight) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_TWILIGHT);
			sVar(background_sky_clouds_show) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_CLOUDS_SHOW);
			sVar(background_sky_clouds_speed) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_CLOUDS_SPEED);
			sVar(background_sky_clouds_height) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_CLOUDS_HEIGHT);
			sVar(background_sky_clouds_offset) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_CLOUDS_OFFSET);
			sVar(background_ground_show) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_GROUND_SHOW);
			sVar(background_ground_slot) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_GROUND_SLOT);
			sVar(background_biome) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_BIOME);
			sVar(background_sky_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_COLOR);
			sVar(background_sky_clouds_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_CLOUDS_COLOR);
			sVar(background_sunlight_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SUNLIGHT_COLOR);
			sVar(background_ambient_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_AMBIENT_COLOR);
			sVar(background_night_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_NIGHT_COLOR);
			sVar(background_grass_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_GRASS_COLOR);
			sVar(background_foliage_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOLIAGE_COLOR);
			sVar(background_water_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WATER_COLOR);
			sVar(background_leaves_oak_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_OAK_COLOR);
			sVar(background_leaves_spruce_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_SPRUCE_COLOR);
			sVar(background_leaves_birch_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_BIRCH_COLOR);
			sVar(background_leaves_jungle_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_JUNGLE_COLOR);
			sVar(background_leaves_acacia_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_ACACIA_COLOR);
			sVar(background_leaves_dark_oak_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_DARK_OAK_COLOR);
			sVar(background_leaves_mangrove_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_MANGROVE_COLOR);
			sVar(background_fog_show) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_SHOW);
			sVar(background_fog_sky) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_SKY);
			sVar(background_fog_color_custom) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_CUSTOM_COLOR);
			sVar(background_fog_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_COLOR);
			sVar(background_fog_custom_object_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_CUSTOM_OBJECT_COLOR);
			sVar(background_fog_object_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_OBJECT_COLOR);
			sVar(background_fog_distance) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_DISTANCE);
			sVar(background_fog_size) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_SIZE);
			sVar(background_fog_height) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_HEIGHT);
			sVar(background_wind) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND);
			sVar(background_wind_speed) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND_SPEED);
			sVar(background_wind_strength) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND_STRENGTH);
			sVar(background_wind_direction) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND_DIRECTION);
			sVar(background_wind_directional_speed) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND_DIRECTIONAL_SPEED);
			sVar(background_wind_directional_strength) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND_DIRECTIONAL_STRENGTH);
			sVar(background_texture_animation_speed) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_TEXTURE_ANI_SPEED);
			if (sVar(background_biome) == /*"custom"*/ STR(584) || sVar(background_biome_prev) != sVar(background_biome))
			{
				withAll (obj_resource, global::_app->id)
					res_update_colors(ScopeAny(self));
				
				ObjType(obj_preview, ObjType(obj_category, ObjType(obj_tab, sInt(properties))->library)->preview)->update = true;
				sVar(background_biome_prev) = sVar(background_biome);
			}
			background_ground_update_texture(self);
			background_ground_update_texture_material(self);
			background_ground_update_texture_normal(self);
		}
		background_sky_update_sun();
		sReal(background_night_alpha) = background_sky_night_alpha();
		sReal(background_sunset_alpha) = background_sky_rise_set_alpha(false);
		sReal(background_sunrise_alpha) = background_sky_rise_set_alpha(true);
		IntType twilight_color = merge_color((IntType)(sVar(background_sunlight_color)), (sVar(background_twilight) > 0) ? c_red : c_white, max({ sReal(background_sunrise_alpha), sReal(background_sunset_alpha) }) * 0.75);
		sInt(background_sunlight_color_final) = merge_color(twilight_color, c_black, sReal(background_night_alpha));
		sInt(background_ambient_color_final) = merge_color((IntType)(sVar(background_ambient_color)), (IntType)(sVar(background_night_color)), sReal(background_night_alpha));
		sVar(background_fog_color_final) = sVar(background_fog_color);
		sInt(background_sky_color_final) = merge_color((IntType)(sVar(background_sky_color)), hex_to_color(/*"020204"*/ STR(672)), background_sky_night_alpha());
		if (sStr(window_state) == /*"export_movie"*/ STR(49))
			app_update_cameras(sReal(exportmovie_high_quality), true);
		else
			app_update_cameras(sBool(view_render), false);
		
		sVar(timeline_marker_current) = null_;
		for (IntType i = IntType(0); i < ds_list_size(sInt(timeline_marker_list)); i++)
		{
			if (sVar(timeline_marker) >= idVar(DsList(sInt(timeline_marker_list)).Value(i), pos))
				sVar(timeline_marker_current) = DsList(sInt(timeline_marker_list)).Value(i);
		}
		sBool(history_resource_update) = false;
	}
	
	void app_update_backup(ScopeAny self)
	{
		if (sVar(window_busy) == /*""*/ STR(0) && sStr(project_folder) != /*""*/ STR(0) && sVar(setting_backup) > 0 && sInt(backup_next) > 0 && current_time() > sInt(backup_next))
		{
			sReal(backup_text_ani) += 0.04 * global::delta;
			if (sReal(backup_text_ani) > IntType(1))
			{
				project_backup(self);
				sReal(backup_text_ani) = IntType(4);
			}
		}
		else
			sReal(backup_text_ani) -= 0.04 * global::delta;
		
		sReal(backup_text_ani) = clamp(sReal(backup_text_ani), IntType(0), IntType(4));
	}
	
	RealType app_update_cameras(RealType highquality, BoolType movie)
	{
		if (!(ObjType(obj_view, global::_app->view_second)->show > 0) && global::_app->view_render && !global::_app->view_render_real_time && global::_app->window_state != /*"export_movie"*/ STR(49) && global::_app->window_state != /*"export_image"*/ STR(56) && !movie)
			return IntType(0);
		withAll (obj_timeline, global::_app->id)
		{
			if (!self->render_visible || !type_is_shape(self->type))
				continue;
			VarType texobj;
			if (self->value_inherit.Value(e_value_TEXTURE_OBJ) > IntType(0))
				texobj = self->value_inherit.Value(e_value_TEXTURE_OBJ);
			else
				texobj = idVar(self->temp, shape_tex);
			
			if (texobj != null_ && idVar(texobj, type) == e_tl_type_CAMERA)
				idBool(texobj, cam_surf_required) = true;
		}
		
		withAll (obj_particle, global::_app->id)
		{
			if (idVar(self->type, temp) == particle_sheet || idVar(self->type, temp) == particle_template || !type_is_shape(idVar(idVar(self->type, temp), type)))
				continue;
			if (idVar(idVar(self->type, temp), shape_tex) != null_ && idVar(idVar(idVar(self->type, temp), shape_tex), type) == e_tl_type_CAMERA)
				idBool(idVar(idVar(self->type, temp), shape_tex), cam_surf_required) = true;
		}
		
		withAll (obj_timeline, global::_app->id)
		{
			if (self->type != e_tl_type_CAMERA || !self->cam_surf_required)
				continue;
			if (highquality > 0 && global::render_samples > -IntType(1) && surface_exists((IntType)(self->cam_surf)))
			{
				self->cam_surf_required = false;
				continue;
			}
			global::render_samples = -IntType(1);
			withOne (app, global::_app->id, self->id)
			{
				render_start({ ObjType(obj_timeline, self.otherId)->cam_surf_tmp, self.otherId });
				if (highquality > 0)
					render_high(ScopeAny(self));
				else
					render_low(ScopeAny(self));
				
				ObjType(obj_timeline, self.otherId)->cam_surf_tmp = render_done();
			}
			
			self->cam_surf = surface_require(self->cam_surf, global::render_width, global::render_height);
			VarType tmp = self->cam_surf;
			self->cam_surf = self->cam_surf_tmp;
			self->cam_surf_tmp = tmp;
			self->cam_surf_required = false;
		}
		
		return 0.0;
	}
	
	void app_update_caption()
	{
		if (global::_app->project_name != /*""*/ STR(0))
			window_set_caption(global::_app->project_name + string_repeat(/*" * "*/ STR(673), global::_app->project_changed) + /*" - Mine-imator"*/ STR(674));
		else
			window_set_caption(/*"Mine-imator"*/ STR(19));
		
	}
	
	void app_update_interface(ScopeAny self)
	{
		if (sBool(update_interface_wait))
		{
			interface_update_instant(self);
			sBool(update_interface_wait) = false;
		}
		if (sReal(window_height) <= IntType(900) || sVar(setting_interface_compact) > 0)
		{
			sReal(ui_large_height) = IntType(24);
			sReal(ui_small_height) = IntType(20);
			sReal(window_compact) = true;
		}
		else
		{
			sReal(ui_large_height) = IntType(32);
			sReal(ui_small_height) = IntType(24);
			sReal(window_compact) = false;
		}
		
	}
	
	void app_update_keybinds()
	{
		VarType obj;
		BoolType check, navclear;
		navclear = false;
		for (IntType i = IntType(0); i < e_keybind_amount; i++)
		{
			obj = global::keybinds.Value(i);
			check = keybind_check(obj, /*"keyboard_check"*/ STR(675));
			idBool(obj, released) = false;
			if (idVar(obj, active) > 0)
				idBool(obj, released) = keybind_check(obj, /*"keyboard_check_released"*/ STR(676));
			idBool(obj, pressed) = keybind_check(obj, /*"keyboard_check_pressed"*/ STR(677));
			idVar(obj, active) = check;
			if (idBool(obj, pressed) && idBool(obj, navigation) && string_contains(global::_app->window_busy, /*"camera"*/ STR(120)))
				navclear = true;
		}
		if (navclear)
		{
			for (IntType i = IntType(0); i < e_keybind_amount; i++)
			{
				obj = global::keybinds.Value(i);
				if (!idBool(obj, navigation))
				{
					idBool(obj, pressed) = false;
					idVar(obj, active) = false;
				}
			}
		}
	}
	
	void app_update_keyboard(ScopeAny self)
	{
		if (dev_mode)
		{
			if (keyboard_check_pressed(vk_f7))
				minecraft_assets_reload();
			if (keyboard_check_pressed(vk_f9))
				open_url(file_directory);
			if (keyboard_check_pressed(vk_f10))
				open_url(gmlGlobal::working_directory);
		}
		if (keyboard_check_pressed(vk_f11))
			open_url(log_file);
		if (keyboard_check_pressed(vk_f12))
			sBool(debug_info) = !sBool(debug_info);
		if (sStr(window_state) == /*""*/ STR(0) && (sVar(window_busy) == /*""*/ STR(0) || sStr(settings_menu_name) == /*"colorpicker"*/ STR(678)) && !sBool(textbox_isediting))
		{
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_NEW))->pressed)
				action_toolbar_new(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_IMPORT_ASSET))->pressed)
				action_toolbar_import_asset(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_OPEN))->pressed)
				action_toolbar_open(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_SAVE))->pressed)
				action_toolbar_save(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_SAVE_AS))->pressed)
				action_toolbar_save_as(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_UNDO))->pressed)
				action_toolbar_undo(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_REDO))->pressed)
				action_toolbar_redo(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PLAY))->pressed)
				action_tl_play(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PLAY_BEGINNING))->pressed)
				action_tl_play_beginning();
			if (!(sReal(timeline_playing) > 0))
			{
				if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_MARKER_RIGHT))->pressed)
					sVar(timeline_marker_move) = sVar(timeline_marker);
				if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_MARKER_RIGHT))->active > 0)
					action_tl_right();
				if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_MARKER_LEFT))->pressed)
					sVar(timeline_marker_move) = sVar(timeline_marker);
				if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_MARKER_LEFT))->active > 0)
					action_tl_left();
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_RENDER_MODE))->pressed)
				view_toggle_render();
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CREATE_FOLDER))->pressed)
				action_tl_folder(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_SELECT))->pressed)
			{
				if (global::tl_edit > 0)
					action_tl_deselect_all(self);
				else
					action_tl_select_all(self);
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_HIDE))->pressed)
				action_tl_hide_select(self, true);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_SHOW_HIDDEN))->pressed)
				action_tl_hide_select(self, false);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_SECONDARY_VIEW))->pressed)
				action_setting_secondary_view(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_DUPLICATE))->pressed && global::tl_edit != null_)
				action_tl_duplicate(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_DELETE))->pressed && global::tl_edit != null_)
				action_tl_remove(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_CREATE))->pressed)
				action_tl_keyframes_create(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_COPY))->pressed)
				tl_keyframes_copy(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_CUT))->pressed)
				action_tl_keyframes_cut(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_PASTE))->pressed)
				action_tl_keyframes_paste(self, sVar(timeline_mouse_pos));
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_DELETE))->pressed)
				action_tl_keyframes_remove(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PARTICLES_SPAWN))->pressed)
				action_lib_pc_spawn();
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PARTICLES_CLEAR))->pressed)
				action_lib_pc_clear();
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_SELECT))->pressed)
			{
				action_tools_disable_all(self);
				sBool(setting_tool_select) = sVar(setting_separate_tool_modes);
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_MOVE))->pressed)
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sVar(setting_tool_move) = true;
				}
				else
				{
					sVar(setting_tool_move) = !(sVar(setting_tool_move) > 0);
					sBool(setting_tool_scale) = false;
					if (global::tl_edit > 0)
						idVar(global::tl_edit, show_tool_position) = sVar(setting_tool_move);
				}
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_ROTATE))->pressed)
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sBool(setting_tool_rotate) = true;
				}
				else
				{
					sBool(setting_tool_rotate) = !sBool(setting_tool_rotate);
					sBool(setting_tool_scale) = false;
				}
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_SCALE))->pressed)
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sBool(setting_tool_scale) = true;
				}
				else
				{
					sBool(setting_tool_scale) = !sBool(setting_tool_scale);
					if (sBool(setting_tool_scale))
					{
						sVar(setting_tool_move) = false;
						sBool(setting_tool_rotate) = false;
						sBool(setting_tool_bend) = false;
					}
				}
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_BEND))->pressed)
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sBool(setting_tool_bend) = true;
				}
				else
				{
					sBool(setting_tool_bend) = !sBool(setting_tool_bend);
					sBool(setting_tool_scale) = false;
				}
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_TRANSFORM))->pressed)
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sBool(setting_tool_transform) = true;
				}
				else
				{
					sVar(setting_tool_move) = true;
					sBool(setting_tool_rotate) = true;
					sBool(setting_tool_bend) = true;
					sBool(setting_tool_scale) = false;
					if (global::tl_edit > 0)
						idVar(global::tl_edit, show_tool_position) = sVar(setting_tool_move);
				}
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_SNAP))->pressed)
				sReal(setting_snap) = !(sReal(setting_snap) > 0);
		}
		else
			if (sBool(textbox_jump) || (sBool(textbox_isediting) && keyboard_check_pressed(vk_tab)))
			{
				if (sBool(textbox_jump))
				{
					RealType tbxpos, move;
					ArrType tbxdata;
					VarType tab, tabstart, tbx;
					tbxpos = IntType(0);
					for (; tbxpos < ds_list_size(sInt(textbox_list)); tbxpos++)
					{
						tbxdata = DsList(sInt(textbox_list)).Value(tbxpos);
						if (tbxdata.Value(IntType(0)) == sVar(textbox_lastfocus))
							break;
					}
					move = (keyboard_check(vk_shift) ? -IntType(1) : IntType(1));
					tabstart = tbxdata.Value(IntType(1));
					tab = -IntType(1);
					while (tabstart != tab)
					{
						tbxpos += move;
						tbxpos = mod_fix(tbxpos, ds_list_size(sInt(textbox_list)));
						tbxdata = DsList(sInt(textbox_list)).Value(tbxpos);
						tab = tbxdata.Value(IntType(1));
					}
					
					tab = tbxdata.Value(IntType(1));
					if (tab != null_ && idInt(tab, scroll) != null_ && ObjType(obj_scrollbar, idInt(tab, scroll))->needed)
						ObjType(obj_scrollbar, idInt(tab, scroll))->value_goal = (tbxdata.Value(IntType(2)) - (tbxdata.Value(IntType(3)) - ObjType(obj_scrollbar, idInt(tab, scroll))->value)) - (floor((RealType)tbxdata.Value(IntType(4)) / 2.0));
					tbx = tbxdata.Value(IntType(0));
					sVar(window_focus) = string(tbx);
					sVar(textbox_jumpto) = tbx;
					ds_list_clear(sInt(textbox_list));
					sBool(textbox_jump) = false;
				}
				else
					sBool(textbox_jump) = true;
				
			}
		
		if (sVar(textbox_jumpto) == -IntType(1) && sBool(textbox_isediting) && !sBool(textbox_isediting_respond))
		{
			sBool(textbox_isediting) = false;
			if (sVar(window_busy) == /*""*/ STR(0))
				sVar(window_focus) = /*""*/ STR(0);
		}
		sBool(textbox_isediting_respond) = false;
		if (!sBool(textbox_isediting))
		{
			sReal(dragger_multiplier) = keyboard_check(vk_shift) ? .1 : 1.0;
			sReal(dragger_snap) = sReal(setting_snap) > 0 || keyboard_check(vk_control);
		}
		else
		{
			sReal(dragger_multiplier) = IntType(1);
			sReal(dragger_snap) = false;
		}
		
	}
	
}
