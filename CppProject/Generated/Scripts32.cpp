/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.03.04 18:21:22 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void keyframe_event_destroy(Scope<obj_keyframe> self)
	{
		ds_list_delete_value(idInt(self->timeline, keyframe_list), self->id);
		if (self->value.Value(e_value_SOUND_OBJ) != null_)
			idInt(self->value.Value(e_value_SOUND_OBJ), count)--;
	}
	
	RealType keyframe_update_item_name(Scope<obj_keyframe> self)
	{
		if (idVar(self->timeline, type) != e_tl_type_ITEM)
			return IntType(0);
		VarType slot = self->value.Value(e_value_ITEM_SLOT);
		if (self->value.Value(e_value_TEXTURE_OBJ) != null_)
		{
			VarType tex = self->value.Value(e_value_TEXTURE_OBJ);
			if (idVar(tex, type) == e_res_type_PACK && slot < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list)))
				self->value[e_value_ITEM_NAME] = DsList(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list).Value(slot);
			else
				self->value[e_value_ITEM_NAME] = /*""*/ STR(0);
			
		}
		else
			if (idVar(idVar(idVar(self->timeline, temp), item_tex), type) == e_res_type_PACK && slot < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list)))
			{
				self->value[e_value_ITEM_NAME] = DsList(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list).Value(slot);
			}
			else
				self->value[e_value_ITEM_NAME] = /*""*/ STR(0);
		
		
		return 0.0;
	}
	
	BoolType key_valid(VarType key)
	{
		StringType keystr;
		key = string_upper(key);
		keystr = /*"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"*/ STR(1215);
		if (string_length(key) != IntType(8))
			return false;
		for (IntType c = IntType(0); c < IntType(8); c += IntType(2))
		{
			IntType pos1, pos2;
			pos1 = string_pos(string_char_at(key, c + IntType(1)), keystr);
			pos2 = string_pos(string_char_at(key, (IntType)(IntType(8) - c)), keystr);
			if (pos1 == IntType(0) || pos2 == IntType(0))
				return false;
			if (pos1 != string_length(keystr) + IntType(1) - pos2)
				return false;
		}
		return true;
	}
	
	void langauge_new(StringType fn)
	{
		IntType obj = (new obj_language)->id;
		withOne (obj_language, obj, noone)
		{
			self->filename = filename_name(fn);
			self->name = text_get({ /*"filelanguage"*/ STR(1216) });
			self->locale = text_exists(/*"filelocale"*/ STR(1217)) ? string(text_get({ /*"filelocale"*/ STR(1217) })) : /*""*/ STR(0);
		}
		
	}
	
	RealType languages_load()
	{
		StringType fn = languages_file;
		if (!file_exists_lib(fn))
			return IntType(0);
		log({ /*"Loading languages"*/ STR(1218), fn });
		VarType map = json_load({ fn });
		if (!ds_map_valid(map))
			return IntType(0);
		global::load_format = DsMap(map).Value(/*"format"*/ STR(88));
		log({ /*"load_format"*/ STR(1219), global::load_format });
		VarType list, obj;
		list = DsMap(map).Value(/*"languages"*/ STR(1220));
		for (IntType i = IntType(0); i < ds_list_size((IntType)(list)); i++)
		{
			map = DsList(list).Value(i);
			VarType name, locale, fn;
			name = value_get_string({ DsMap(map).Value(/*"name"*/ STR(786)), /*""*/ STR(0) });
			locale = value_get_string({ DsMap(map).Value(/*"locale"*/ STR(1221)), /*""*/ STR(0) });
			fn = value_get_string({ DsMap(map).Value(/*"filename"*/ STR(1222)), /*""*/ STR(0) });
			language_remove(fn);
			IntType obj = (new obj_language)->id;
			ObjType(obj_language, obj)->name = name;
			ObjType(obj_language, obj)->locale = locale;
			ObjType(obj_language, obj)->filename = fn;
		}
		ds_list_destroy((IntType)(list));
		return 0.0;
	}
	
	void languages_save()
	{
		log({ /*"Saving languages"*/ STR(1223), languages_file });
		json_save_start(languages_file);
		json_save_object_start();
		json_save_var(/*"format"*/ STR(88), settings_format);
		json_save_array_start({ /*"languages"*/ STR(1220) });
		withAll (obj_language, noone)
		{
			json_save_object_start();
			json_save_var(/*"name"*/ STR(786), json_string_encode(self->name));
			json_save_var(/*"locale"*/ STR(1221), self->locale);
			json_save_var(/*"filename"*/ STR(1222), self->filename);
			json_save_object_done();
		}
		
		json_save_array_done();
		json_save_object_done();
		json_save_done();
		debug({ /*"Saved languges"*/ STR(1224) });
	}
	
	RealType language_add(ScopeAny self)
	{
		StringType fn = file_dialog_open_language();
		if (fn == /*""*/ STR(0))
			return IntType(0);
		if (file_exists_lib(languages_directory + filename_name(fn)))
			if (!question(/*"This file already exists the language file directory. Do you want to replace the file?"*/ STR(1225)))
				return IntType(0);
		file_copy_lib(fn, languages_directory + filename_name(fn));
		action_setting_language_load(self, languages_directory + filename_name(fn));
		language_remove(filename_name(fn));
		langauge_new(fn);
		languages_save();
		return 0.0;
	}
	
	RealType language_load(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType fn, map, reload;
		fn = argument[IntType(0)];
		map = argument[IntType(1)];
		if (argument_count > IntType(2))
			reload = argument[IntType(2)];
		else
			reload = false;
		
		log({ /*"Loading language file"*/ STR(1226), fn });
		ds_map_clear((IntType)(map));
		if (filename_ext(fn) == /*".milanguage"*/ STR(1227))
		{
			StringType convfn = file_directory + /*"conv.tmp"*/ STR(1228);
			json_file_convert_unicode(fn, convfn);
			if (!file_exists_lib(convfn))
			{
				StringType msg = /*"An error occurred while reading the language file:\nCould not convert."*/ STR(1229);
				log({ msg });
				window_set_caption(/*"Error"*/ STR(1230));
				show_message(msg);
				window_set_caption(/*""*/ STR(0));
				return IntType(0);
			}
			IntType jsonmap = json_load({ convfn });
			if (ds_map_valid(jsonmap))
			{
				language_load_map(/*""*/ STR(0), jsonmap, map);
				ds_map_destroy(jsonmap);
			}
			else
			{
				StringType msg = /*"An error occured while reading the language file:\n"*/ STR(1231) + global::json_error + /*" on line "*/ STR(1189) + string(global::json_line) + /*", column "*/ STR(1190) + string(global::json_column);
				log({ msg });
				window_set_caption(/*"Error"*/ STR(1230));
				show_message(msg);
				window_set_caption(/*""*/ STR(0));
				return IntType(0);
			}
			
		}
		else
			language_load_legacy(fn, map);
		
		if (!(reload > 0) && map != global::language_english_map)
		{
			IntType missingkeyslist;
			VarType key;
			missingkeyslist = ds_list_create();
			key = ds_map_find_first(global::language_english_map);
			while (!is_undefined(key))
			{
				if (is_undefined(DsMap(map).Value(key)))
					ds_list_add({ missingkeyslist, key });
				key = ds_map_find_next(global::language_english_map, key);
			}
			
			if (ds_list_size(missingkeyslist) > IntType(0))
			{
				ds_list_sort(missingkeyslist, true);
				VarType msg = /*"The following texts are missing in the translation and will display as English:\n"*/ STR(1232);
				for (IntType i = IntType(0); i < ds_list_size(missingkeyslist); i++)
					msg += DsList(missingkeyslist).Value(i) + /*": "*/ STR(1012) + string_replace_all(DsMap(global::language_english_map).Value(DsList(missingkeyslist).Value(i)), /*"\n"*/ STR(939), /*"\\n"*/ STR(1208)) + /*"\n"*/ STR(939);
				log({ msg });
				window_set_caption(/*"Error"*/ STR(1230));
				show_message(/*"Some texts are missing in the translation and will display as English. See the log for details:\n"*/ STR(1233) + log_file);
				window_set_caption(/*"Mine-imator"*/ STR(19));
			}
		}
		return 0.0;
	}
	
	RealType language_load_legacy(VarType fn, VarType map)
	{
		if (!file_exists_lib(fn))
			return IntType(0);
		file_copy_lib(fn, temp_file);
		IntType f = file_text_open_read(temp_file);
		while (!file_text_eof(f))
		{
			StringType line;
			IntType commapos;
			line = file_text_read_string(f);
			commapos = string_pos(/*":"*/ STR(754), line);
			if (commapos > IntType(0))
			{
				StringType key, val;
				key = string_copy(line, IntType(1), (IntType)(commapos - IntType(1)));
				val = string_delete(line, IntType(1), commapos + IntType(1));
				DsMap(map)[key] = val;
			}
			file_text_readln(f);
		}
		
		file_text_close(f);
		return 0.0;
	}
	
	RealType language_load_map(StringType pre, VarType smap, VarType dmap)
	{
		VarType key;
		if (!ds_map_valid(smap))
			return IntType(0);
		key = ds_map_find_first((IntType)(smap));
		while (!is_undefined(key))
		{
			if (string_contains(key, /*"/"*/ STR(16)))
				language_load_map(pre + string_replace(key, /*"/"*/ STR(16), /*""*/ STR(0)), DsMap(smap).Value(key), dmap);
			else
				DsMap(dmap)[pre + key] = DsMap(smap).Value(key);
			
			key = ds_map_find_next((IntType)(smap), key);
		}
		
		return 0.0;
	}
	
	void language_remove(VarType fn)
	{
		StringType filename = filename_name(fn);
		withAll (obj_language, noone)
		{
			if (ObjType(obj_language, self->id)->filename == filename)
			{
				instance_destroy(ScopeAny(self));
				break;
			}
		}
		
	}
	
	BoolType legacy_startup()
	{
		log({ /*"Loading legacy file"*/ STR(1234) });
		IntType map = json_load({ legacy_file });
		if (!ds_map_valid(map))
		{
			log({ /*"Error loading legacy.midata"*/ STR(1235) });
			return false;
		}
		global::legacy_model_id_05_map = DsMap(map).Value(/*"legacy_model_id_05"*/ STR(1236));
		global::legacy_model_id_06_map = DsMap(map).Value(/*"legacy_model_id_06"*/ STR(1237));
		global::legacy_model_id_100_demo_map = DsMap(map).Value(/*"legacy_model_id_100_demo"*/ STR(1238));
		ds_map_merge({ global::legacy_model_id_05_map, DsMap(map).Value(/*"legacy_model_id"*/ STR(1239)) });
		ds_map_merge({ global::legacy_model_id_06_map, DsMap(map).Value(/*"legacy_model_id"*/ STR(1239)) });
		ds_map_merge({ global::legacy_model_id_100_demo_map, DsMap(map).Value(/*"legacy_model_id"*/ STR(1239)) });
		global::legacy_model_part_map = DsMap(map).Value(/*"legacy_model_part"*/ STR(1240));
		global::legacy_model_name_map = DsMap(map).Value(/*"legacy_model_name"*/ STR(1241));
		global::legacy_block_set[IntType(255)] = false;
		global::legacy_block_id = DsMap(map).Value(/*"legacy_block_id"*/ STR(1242));
		global::legacy_block_texture_name_map = DsMap(map).Value(/*"legacy_block_texture_name"*/ STR(1243));
		global::legacy_block_05_texture_list = DsMap(map).Value(/*"legacy_block_05_textures"*/ STR(1244));
		global::legacy_block_07_demo_texture_list = DsMap(map).Value(/*"legacy_block_07_demo_textures"*/ STR(1245));
		global::legacy_block_100_texture_list = DsMap(map).Value(/*"legacy_block_100_textures"*/ STR(1246));
		for (IntType i = IntType(0); i < IntType(256); i++)
		{
			for (IntType d = IntType(0); d < IntType(16); d++)
			{
				global::legacy_block_obj[i][d] = null_;
				global::legacy_block_state_id[i][d] = IntType(0);
				global::legacy_block_mc_id[i][d] = /*""*/ STR(0);
			}
		}
		global::legacy_item_texture_name_map = DsMap(map).Value(/*"legacy_item_texture_name"*/ STR(1247));
		global::legacy_biomes_map = DsMap(map).Value(/*"legacy_biomes"*/ STR(1248));
		global::legacy_biomes_ids_map = ds_int_map_create();
		VarType key = ds_map_find_first((IntType)(DsMap(map).Value(/*"legacy_biome_ids"*/ STR(1249))));
		while (!is_undefined(key))
		{
			DsMap(global::legacy_biomes_ids_map)[string_get_real({ key })] = ds_map_find_value((IntType)(DsMap(map).Value(/*"legacy_biome_ids"*/ STR(1249))), key);
			key = ds_map_find_next((IntType)(DsMap(map).Value(/*"legacy_biome_ids"*/ STR(1249))), key);
		}
		
		global::biomes_ids_map = ds_int_map_create();
		key = ds_map_find_first((IntType)(DsMap(map).Value(/*"biome_ids"*/ STR(1250))));
		while (!is_undefined(key))
		{
			DsMap(global::biomes_ids_map)[string_get_real({ key })] = ds_map_find_value((IntType)(DsMap(map).Value(/*"biome_ids"*/ STR(1250))), key);
			key = ds_map_find_next((IntType)(DsMap(map).Value(/*"biome_ids"*/ STR(1250))), key);
		}
		
		global::legacy_model_names_map = DsMap(map).Value(/*"legacy_model_names"*/ STR(1251));
		global::legacy_model_states_map = DsMap(map).Value(/*"legacy_model_states"*/ STR(1252));
		global::legacy_model_state_values_map = DsMap(map).Value(/*"legacy_model_state_values"*/ STR(1253));
		global::legacy_block_names_map = DsMap(map).Value(/*"legacy_block_names"*/ STR(1254));
		global::legacy_particles_map = DsMap(map).Value(/*"legacy_particles"*/ STR(1255));
		return true;
	}
	
	RealType lengthdir_z(VarType length, VarType dir)
	{
		return -lengthdir_y(length, dir);
	}
	
	BoolType lib_startup()
	{
		global::file_copy_temp = false;
		if (is_cpp())
			return true;
		log({ /*"External library init"*/ STR(1256) });
		StringType libpath, pathfile, pathmovie, pathwindow;
		libpath = /*"Data/Libraries/"*/ STR(1257);
		pathfile = libpath + /*"file.dll"*/ STR(1258);
		pathmovie = libpath + /*"movie.dll"*/ STR(1259);
		pathwindow = libpath + /*"window.dll"*/ STR(1260);
		if (!file_exists(pathfile))
			return missing_file(pathfile);
		if (!file_exists(pathmovie))
			return missing_file(pathmovie);
		if (!file_exists(pathwindow))
			return missing_file(pathwindow);
		log({ /*"External library"*/ STR(1261), pathwindow });
		global::lib_window_maximize = external_define({ pathwindow, /*"window_maximize"*/ STR(1262), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_window_set_focus = external_define({ pathwindow, /*"window_set_focus"*/ STR(1263), dll_cdecl, ty_real, IntType(1), ty_string });
		log({ /*"External library"*/ STR(1261), pathfile });
		global::file_copy_temp = true;
		global::lib_open_url = external_define({ pathfile, /*"open_url"*/ STR(1264), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_execute = external_define({ pathfile, /*"execute"*/ STR(1090), dll_cdecl, ty_real, IntType(3), ty_string, ty_string, ty_real });
		global::lib_unzip = external_define({ pathfile, /*"unzip"*/ STR(1265), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_gzunzip = external_define({ pathfile, /*"gzunzip"*/ STR(1266), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_file_rename = external_define({ pathfile, /*"file_rename"*/ STR(1267), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_file_copy = external_define({ pathfile, /*"file_copy"*/ STR(1268), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_file_delete = external_define({ pathfile, /*"file_delete"*/ STR(1269), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_file_exists = external_define({ pathfile, /*"file_exists"*/ STR(1270), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_directory_create = external_define({ pathfile, /*"directory_create"*/ STR(1271), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_directory_delete = external_define({ pathfile, /*"directory_delete"*/ STR(1272), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_directory_exists = external_define({ pathfile, /*"directory_exists"*/ STR(1273), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_json_file_convert_unicode = external_define({ pathfile, /*"json_file_convert_unicode"*/ STR(1274), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		log({ /*"External library"*/ STR(1261), pathmovie });
		global::lib_movie_init = external_define({ pathmovie, /*"movie_init"*/ STR(1275), dll_cdecl, ty_real, IntType(0) });
		global::lib_movie_set = external_define({ pathmovie, /*"movie_set"*/ STR(1276), dll_cdecl, ty_real, IntType(5), ty_real, ty_real, ty_real, ty_real, ty_real });
		global::lib_movie_start = external_define({ pathmovie, /*"movie_start"*/ STR(1277), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_movie_audio_file_decode = external_define({ pathmovie, /*"movie_audio_file_decode"*/ STR(1278), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_movie_audio_file_add = external_define({ pathmovie, /*"movie_audio_file_add"*/ STR(1279), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_movie_audio_sound_add = external_define({ pathmovie, /*"movie_audio_sound_add"*/ STR(1280), dll_cdecl, ty_real, IntType(5), ty_real, ty_real, ty_real, ty_real, ty_real });
		global::lib_movie_frame = external_define({ pathmovie, /*"movie_frame"*/ STR(1281), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_movie_done = external_define({ pathmovie, /*"movie_done"*/ STR(1282), dll_cdecl, ty_real, IntType(0) });
		log({ /*"External library"*/ STR(1261), /*"movie init"*/ STR(1283) });
		lib_movie_init();
		math_lib_startup(pathwindow);
		return true;
	}
	
	void list_destroy(ScopeAny self, IntType list)
	{
		instance_destroy(self, { list });
	}
	
	void list_event_destroy(Scope<obj_list> self)
	{
		for (IntType i = IntType(0); i < ds_list_size(self->item); i++)
			instance_destroy(ScopeAny(self), { DsList(self->item).Value(i) });
		ds_list_destroy(self->item);
	}
	
	IntType list_init(ScopeAny self, VarType name)
	{
		list_init_start();
		if (sVar(menu_model_current) != null_)
		{
			for (IntType i = IntType(0); i < idReal(sInt(menu_model_state), value_amount); i++)
				list_item_add({ minecraft_asset_get_name(/*"modelstatevalue"*/ STR(746), idVar(sInt(menu_model_state), value_name).Value(i)), idVar(sInt(menu_model_state), value_name).Value(i) });
		}
		if (sVar(menu_block_current) != null_)
		{
			for (IntType i = IntType(0); i < idReal(sInt(menu_block_state), value_amount); i++)
				list_item_add({ minecraft_asset_get_name(/*"blockstatevalue"*/ STR(763), idVar(sInt(menu_block_state), value_name).Value(i)), idVar(sInt(menu_block_state), value_name).Value(i) });
		}
		if (sVar(menu_model_current) != null_ || sVar(menu_block_current) != null_)
			return list_init_end(self);
		switch (StringType(name).id)
		{
			case 732: // benchskin
			case 733: // benchskinmaterial
			case 734: // benchskinnormal
			case 736: // benchspblocktex
			case 737: // benchspblocktexmaterial
			case 738: // benchspblocktexnormal
			case 739: // benchbodypartskin
			case 740: // benchbodypartskinmaterial
			case 741: // benchbodypartskinnormal
			case 1284: // libraryskin
			case 1285: // libraryskinmaterial
			case 1286: // libraryskinnormal
			case 1287: // libraryspblocktex
			case 1288: // libraryspblocktexmaterial
			case 1289: // libraryspblocktexnormal
			case 1290: // librarybodypartskin
			case 1291: // librarybodypartskinmaterial
			case 1292: // librarybodypartskinnormal
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(720)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0 && (name == /*"benchskin"*/ STR(732) || name == /*"libraryskin"*/ STR(1284)))
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1294) }), null_, icons_DOWNLOAD });
				VarType tex;
				withOne (obj_resource, global::mc_res, self->id)
				{
					if (string_contains(name, /*"material"*/ STR(611)))
						tex = res_get_model_texture_material(ScopeAny(self), model_part_get_texture_material_name(idVar(temp, model_file), idInt(temp, model_texture_material_name_map)));
					else
						if (string_contains(name, /*"normal"*/ STR(600)))
							tex = res_get_model_tex_normal(ScopeAny(self), model_part_get_tex_normal_name(idVar(temp, model_file), idInt(temp, model_tex_normal_name_map)));
						else
							tex = res_get_model_texture(ScopeAny(self), model_part_get_texture_name(idVar(temp, model_file), idInt(temp, model_texture_name_map)));
					
					
				}
				
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, tex });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					withOne (Object, res, self->id)
					{
						if (string_contains(name, /*"material"*/ STR(611)))
							tex = res_get_model_texture_material(self, model_part_get_texture_material_name(idVar(temp, model_file), idInt(temp, model_texture_material_name_map)));
						else
							if (string_contains(name, /*"normal"*/ STR(600)))
								tex = res_get_model_tex_normal(self, model_part_get_tex_normal_name(idVar(temp, model_file), idInt(temp, model_tex_normal_name_map)));
							else
								tex = res_get_model_texture(self, model_part_get_texture_name(idVar(temp, model_file), idInt(temp, model_texture_name_map)));
						
						
					}
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 776: // benchmodeltex
			case 1295: // librarymodeltex
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(720)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0)
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1294) }), null_, icons_DOWNLOAD });
				VarType texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_format) == e_model_format_BLOCK)
					{
						if (idInt(texobj, model_texture_map) == null_ && idVar(texobj, block_sheet_texture) == null_)
							texobj = global::mc_res;
					}
					else
					{
						if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, model_texture) == null_)
							texobj = global::mc_res;
					}
					
				}
				if (texobj != null_)
				{
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, texobj, sVar(model_file));
					
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), idVar(texobj, display_name) }), tex });
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == idVar(temp, model) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 777: // benchmodeltexmaterial
			case 1296: // librarymodeltexmaterial
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(720)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0)
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1294) }), null_, icons_DOWNLOAD });
				VarType texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_format) == e_model_format_BLOCK)
					{
						if (idInt(texobj, model_texture_material_map) == null_ && idVar(texobj, block_sheet_texture_material) == null_)
							texobj = global::mc_res;
					}
				}
				if (texobj != null_)
				{
					if (idInt(texobj, model_texture_material_map) == null_ && idInt(texobj, model_texture) == null_)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }) });
					else
					{
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_material_preview(self, texobj, sVar(model_file));
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == idVar(temp, model) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_material_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 778: // benchmodeltexnormal
			case 1297: // librarymodeltexnormal
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(720)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0)
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1294) }), null_, icons_DOWNLOAD });
				VarType texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_format) == e_model_format_BLOCK)
					{
						if (idInt(texobj, model_tex_normal_map) == null_ && idVar(texobj, block_sheet_tex_normal) == null_)
							texobj = global::mc_res;
					}
				}
				if (texobj != null_)
				{
					if (idInt(texobj, model_tex_normal_map) == null_ && idInt(texobj, model_texture) == null_)
					{
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }) });
					}
					else
					{
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_normal_preview(self, texobj, sVar(model_file));
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == idVar(temp, model) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_normal_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 749: // benchscenery
			case 1298: // libraryscenery
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(753) }) });
				menu_add_item({ e_option_IMPORT_WORLD, text_get({ /*"librarysceneryimport"*/ STR(1299) }), null_, icons_SCENERY });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_SCENERY || idVar(res, type) == e_res_type_FROM_WORLD)
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 750: // benchblocktex
			case 751: // benchblocktexmaterial
			case 752: // benchblocktexnormal
			case 1300: // libraryblocktex
			case 1301: // libraryblocktexmaterial
			case 1302: // libraryblocktexnormal
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && idVar(res, block_sheet_texture) != null_)
						menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
				}
				break;
			}
			
			case 759: // benchitemtex
			case 760: // benchitemtexmaterial
			case 761: // benchitemtexnormal
			case 1303: // libraryitemtex
			case 1304: // libraryitemtexmaterial
			case 1305: // libraryitemtexnormal
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idVar(res, type) == e_res_type_TEXTURE)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					else
						if (idInt(res, item_sheet_texture) != null_)
							menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
					
				}
				break;
			}
			
			case 742: // benchbodypart
			{
				for (IntType p = IntType(0); p < ds_list_size(idInt(ObjType(obj_bench_settings, sInt(bench_settings))->model_file, file_part_list)); p++)
				{
					VarType part = DsList(idInt(ObjType(obj_bench_settings, sInt(bench_settings))->model_file, file_part_list)).Value(p);
					menu_add_item({ ObjType(obj_model_part, part)->name, minecraft_asset_get_name(/*"modelpart"*/ STR(747), ObjType(obj_model_part, part)->name) });
				}
				break;
			}
			
			case 1306: // templateeditorbodypart
			{
				for (IntType p = IntType(0); p < ds_list_size(idInt(idVar(global::temp_edit, model_file), file_part_list)); p++)
				{
					VarType part = DsList(idInt(idVar(global::temp_edit, model_file), file_part_list)).Value(p);
					menu_add_item({ ObjType(obj_model_part, part)->name, minecraft_asset_get_name(/*"modelpart"*/ STR(747), ObjType(obj_model_part, part)->name) });
				}
				break;
			}
			
			case 765: // benchtextfont
			case 1307: // librarytextfont
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && font_exists(idInt(res, font)))
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 768: // benchshapetype
			{
				for (IntType i = IntType(0); i < e_shape_type_amount; i++)
					menu_add_item({ i, text_get({ /*"type"*/ STR(772) + DsList(global::tl_type_name_list).Value(e_tl_type_CUBE + i) }) });
				break;
			}
			
			case 769: // benchshapetex
			case 770: // benchshapetexmaterial
			case 771: // benchshapetexnormal
			case 1308: // libraryshapetex
			case 1309: // libraryshapetexmaterial
			case 1310: // libraryshapetexnormal
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(753) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				if (name == /*"benchshapetex"*/ STR(769) || name == /*"libraryshapetex"*/ STR(1308))
				{
					withAll (obj_timeline, self->id)
						if (self->type == e_tl_type_CAMERA)
							menu_add_item({ self->id, self->display_name });
					
				}
				break;
			}
			
			case 731: // benchmodel
			case 1311: // librarymodel
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(753) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_MODEL)
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 1312: // particleeditorspawnregiontype
			{
				menu_add_item({ /*"sphere"*/ STR(512), text_get({ /*"particleeditorspawnregiontypesphere"*/ STR(1313) }), null_, icons_BOUNDARY_CIRCLE });
				menu_add_item({ /*"cube"*/ STR(3), text_get({ /*"particleeditorspawnregiontypecube"*/ STR(1314) }), null_, icons_BOUNDARY_CUBE });
				menu_add_item({ /*"box"*/ STR(1315), text_get({ /*"particleeditorspawnregiontypebox"*/ STR(1316) }), null_, icons_BOUNDARY_BOX });
				menu_add_item({ /*"path"*/ STR(519), text_get({ /*"particleeditorspawnregiontypepath"*/ STR(1317) }), null_, icons_PATH });
				break;
			}
			
			case 1318: // particleeditorspawnregionpath
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(753) }) });
				withAll (obj_timeline, self->id)
				{
					if (self->type == e_tl_type_PATH)
						menu_add_item({ self->id, self->display_name });
				}
				
				break;
			}
			
			case 1319: // particleeditorboundingbox
			{
				menu_add_item({ /*"none"*/ STR(874), text_get({ /*"particleeditorboundingboxtypenone"*/ STR(1320) }) });
				menu_add_item({ /*"spawn"*/ STR(1321), text_get({ /*"particleeditorboundingboxtypespawn"*/ STR(1322) }) });
				menu_add_item({ /*"ground"*/ STR(135), text_get({ /*"particleeditorboundingboxtypeground"*/ STR(1323) }) });
				menu_add_item({ /*"custom"*/ STR(583), text_get({ /*"particleeditorboundingboxtypecustom"*/ STR(1324) }) });
				break;
			}
			
			case 1325: // particleeditortypetemp
			{
				menu_add_item({ particle_template, text_get({ /*"particleeditortypetemplate"*/ STR(1326) }) });
				menu_add_item({ particle_sheet, text_get({ /*"particleeditortypespritesheet"*/ STR(1327) }) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(lib_list), display_list)); i++)
				{
					VarType temp = DsList(idInt(sInt(lib_list), display_list)).Value(i);
					if (idVar(temp, type) != e_temp_type_PARTICLE_SPAWNER)
						menu_add_item({ temp, idVar(temp, display_name) });
				}
				break;
			}
			
			case 1328: // particleeditortypespritetex
			{
				VarType img = idVar(global::ptype_edit, sprite_tex_image);
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->particles_texture.Value(img) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && idArr(res, particles_texture).Value(IntType(0)))
						menu_add_item({ res, idVar(res, display_name), idArr(res, particles_texture).Value(img) });
				}
				break;
			}
			
			case 1329: // particleeditortypespritetemplatepack
			{
				VarType img = idVar(global::ptype_edit, sprite_tex_image);
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && idVar(res, type) == e_res_type_PACK)
						menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
				}
				break;
			}
			
			case 1330: // particleeditortypespritetemplate
			{
				for (IntType i = IntType(0); i < ds_list_size(global::particle_template_list); i++)
				{
					VarType temp = DsList(global::particle_template_list).Value(i);
					if (ObjType(obj_particle_template, temp)->animated)
						menu_add_item({ ObjType(obj_particle_template, temp)->name, text_get({ /*"particleeditortypespritetemplate"*/ STR(1330) + ObjType(obj_particle_template, temp)->name }) + /*" "*/ STR(17) + text_get({ /*"particleeditortypespritetemplateframes"*/ STR(1331), ObjType(obj_particle_template, temp)->frames }) });
					else
						menu_add_item({ ObjType(obj_particle_template, temp)->name, text_get({ /*"particleeditortypespritetemplate"*/ STR(1330) + ObjType(obj_particle_template, temp)->name }) });
					
				}
				break;
			}
			
			case 1332: // backgroundimage
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(753) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				break;
			}
			
			case 1333: // backgroundimagetype
			{
				menu_add_item({ /*"image"*/ STR(90), text_get({ /*"backgroundimagetypeimage"*/ STR(1334) }) });
				menu_add_item({ /*"sphere"*/ STR(512), text_get({ /*"backgroundimagetypesphere"*/ STR(1335) }) });
				menu_add_item({ /*"box"*/ STR(1315), text_get({ /*"backgroundimagetypebox"*/ STR(1336) }) });
				break;
			}
			
			case 1337: // backgroundskysuntex
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->sun_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idVar(res, sun_texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, sun_texture) });
					else
						if (idVar(res, texture) > 0)
							menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					
				}
				break;
			}
			
			case 1338: // backgroundskymoontex
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->moon_texture.Value(sVar(background_sky_moon_phase)) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idArr(res, moon_texture).Value(IntType(0)))
						menu_add_item({ res, idVar(res, display_name), idArr(res, moon_texture).Value(sVar(background_sky_moon_phase)) });
					else
						if (idVar(res, texture) > 0)
							menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					
				}
				break;
			}
			
			case 1339: // backgroundskymoonphase
			{
				for (IntType p = IntType(0); p < IntType(8); p++)
					menu_add_item({ p, text_get({ /*"backgroundskymoonphase"*/ STR(1339) + string(p + IntType(1)) }), idArr(sVar(background_sky_moon_tex), moon_texture).Value(p) });
				break;
			}
			
			case 1340: // backgroundskycloudstex
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->clouds_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idVar(res, clouds_texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, clouds_texture) });
					else
						if (idVar(res, texture) > 0)
							menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					
				}
				break;
			}
			
			case 1341: // backgroundgroundtex
			case 1342: // backgroundgroundtexmaterial
			case 1343: // backgroundgroundtexnormal
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (name == /*"backgroundgroundtexmaterial"*/ STR(1342))
					{
						if (res != global::mc_res && idVar(res, block_sheet_texture_material) != null_)
							menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
					}
					else
						if (name == /*"backgroundgroundtexnormal"*/ STR(1343))
						{
							if (res != global::mc_res && idVar(res, block_sheet_tex_normal) != null_)
								menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
						}
						else
						{
							if (res != global::mc_res && idVar(res, block_sheet_texture) != null_)
								menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
						}
					
					
				}
				break;
			}
			
			case 1344: // resourcespackimage
			{
				menu_add_item({ /*"preview"*/ STR(1345), text_get({ /*"resourcespackpreview"*/ STR(1346) }) });
				menu_add_item({ /*"modeltextures"*/ STR(1347), text_get({ /*"resourcespackmodeltextures"*/ STR(1348) }) });
				menu_add_item({ /*"blocksheet"*/ STR(528), text_get({ /*"resourcespackblocksheet"*/ STR(1349) }) });
				menu_add_item({ /*"colormap"*/ STR(1350), text_get({ /*"resourcespackcolormap"*/ STR(1351) }) });
				menu_add_item({ /*"itemsheet"*/ STR(526), text_get({ /*"resourcespackitemsheet"*/ STR(1352) }) });
				menu_add_item({ /*"particlesheet"*/ STR(530), text_get({ /*"resourcespackparticlesheet"*/ STR(1353) }) });
				menu_add_item({ /*"suntexture"*/ STR(1354), text_get({ /*"resourcespacksuntexture"*/ STR(1355) }) });
				menu_add_item({ /*"moontexture"*/ STR(1356), text_get({ /*"resourcespackmoontexture"*/ STR(1357) }) });
				menu_add_item({ /*"cloudtexture"*/ STR(1358), text_get({ /*"resourcespackcloudtexture"*/ STR(1359) }) });
				break;
			}
			
			case 1360: // resourcespackmaterial
			{
				menu_add_item({ /*"diffuse"*/ STR(606), text_get({ /*"resourcespackmaterialdiffuse"*/ STR(1361) }) });
				menu_add_item({ /*"material"*/ STR(611), text_get({ /*"resourcespackmaterialmaterial"*/ STR(1362) }) });
				menu_add_item({ /*"normal"*/ STR(600), text_get({ /*"resourcespackmaterialnormal"*/ STR(1363) }) });
				break;
			}
			
			case 1364: // resourcespackimagemodeltexture
			{
				for (IntType t = IntType(0); t < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list)); t++)
					menu_add_item({ DsList(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list).Value(t), DsList(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list).Value(t) });
				break;
			}
			
			case 1365: // resourcesscenerystructurepalette
			{
				for (IntType p = IntType(0); p < idInt(global::res_edit, scenery_palette_size); p++)
					menu_add_item({ p, text_get({ /*"resourcesscenerystructurepalettenumber"*/ STR(1366), p + IntType(1) }) });
				break;
			}
			
			case 1367: // frameeditorpath
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(753) }) });
				withAll (obj_timeline, self->id)
				{
					if (self->type == e_tl_type_PATH)
						menu_add_item({ self->id, self->display_name });
				}
				
				break;
			}
			
			case 1368: // frameeditorchartex
			case 1369: // frameeditorspblocktex
			case 1370: // frameeditorbodyparttex
			case 1371: // frameeditormodeltex
			{
				VarType temp = idVar(global::tl_edit, temp);
				VarType texobj = idVar(temp, model_tex);
				if ((idVar(global::tl_edit, type) == e_tl_type_SPECIAL_BLOCK || idVar(global::tl_edit, type) == e_tl_type_BODYPART) && idVar(global::tl_edit, part_root) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_root), type) == e_tl_type_SCENERY)
					{
						withOne (Object, idVar(idVar(global::tl_edit, part_root), temp), self->id)
						{
							if (idVar(sVar(block_tex), type) == e_res_type_PACK)
								texobj = sVar(block_tex);
							else
								texobj = sVar(model_tex);
							
						}
						
					}
				}
				if (texobj == null_)
				{
					texobj = idVar(temp, model);
					if (texobj != null_)
					{
						if (idInt(texobj, model_format) == e_model_format_BLOCK)
						{
							if (idInt(texobj, model_texture_map) == null_ && idVar(texobj, block_sheet_texture) == null_)
								texobj = global::mc_res;
						}
						else
						{
							if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, model_texture) == null_)
								texobj = global::mc_res;
						}
						
					}
				}
				if (texobj != null_)
				{
					VarType modelfile = idVar(temp, model_file);
					if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
						modelfile = idVar(global::tl_edit, model_part);
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, texobj, modelfile);
					
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), idVar(texobj, display_name) }), tex });
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }), null_ });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if ((Obj(temp)->subAssetId != ID_obj_timeline && res == idVar(temp, model)) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 1372: // frameeditorchartexmaterial
			case 1373: // frameeditorspblocktexmaterial
			case 1374: // frameeditorbodyparttexmaterial
			case 1375: // frameeditormodeltexmaterial
			{
				VarType temp = idVar(global::tl_edit, temp);
				VarType texobj = idVar(temp, model_tex_material);
				if ((idVar(global::tl_edit, type) == e_tl_type_SPECIAL_BLOCK || idVar(global::tl_edit, type) == e_tl_type_BODYPART) && idVar(global::tl_edit, part_root) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_root), type) == e_tl_type_SCENERY)
					{
						withOne (Object, idVar(idVar(global::tl_edit, part_root), temp), self->id)
						{
							if (idVar(sVar(block_tex_material), type) == e_res_type_PACK)
								texobj = sVar(block_tex_material);
							else
								texobj = sVar(model_tex_material);
							
						}
						
					}
				}
				if (texobj == null_)
					texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_texture_material_map) == null_ && idInt(texobj, model_texture) == null_)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }) });
					else
					{
						VarType modelfile = idVar(temp, model_file);
						if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
							modelfile = idVar(global::tl_edit, model_part);
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_material_preview(self, texobj, modelfile);
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }), null_ });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if ((Obj(temp)->subAssetId != ID_obj_timeline && res == idVar(temp, model)) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_material_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 1376: // frameeditorchartexnormal
			case 1377: // frameeditorspblocktexnormal
			case 1378: // frameeditorbodyparttexnormal
			case 1379: // frameeditormodeltexnormal
			{
				VarType temp = idVar(global::tl_edit, temp);
				VarType texobj = idVar(temp, model_tex_normal);
				if ((idVar(global::tl_edit, type) == e_tl_type_SPECIAL_BLOCK || idVar(global::tl_edit, type) == e_tl_type_BODYPART) && idVar(global::tl_edit, part_root) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_root), type) == e_tl_type_SCENERY)
					{
						withOne (Object, idVar(idVar(global::tl_edit, part_root), temp), self->id)
						{
							if (idVar(sVar(block_tex_normal), type) == e_res_type_PACK)
								texobj = sVar(block_tex_normal);
							else
								texobj = sVar(model_tex_normal);
							
						}
						
					}
				}
				if (texobj == null_)
					texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_tex_normal_map) == null_ && idInt(texobj, model_texture) == null_)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }) });
					else
					{
						VarType modelfile = idVar(temp, model_file);
						if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
							modelfile = idVar(global::tl_edit, model_part);
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_normal_preview(self, texobj, modelfile);
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }), null_ });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if ((Obj(temp)->subAssetId != ID_obj_timeline && res == idVar(temp, model)) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_normal_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 1380: // frameeditorblocktex
			case 1381: // frameeditorblocktexmaterial
			case 1382: // frameeditorblocktexnormal
			{
				VarType texobj = null_;
				if (name == /*"frameeditorblocktexmaterial"*/ STR(1381))
					texobj = idVar(idVar(global::tl_edit, temp), block_tex_material);
				else
					if (name == /*"frameeditorblocktexnormal"*/ STR(1382))
						texobj = idVar(idVar(global::tl_edit, temp), block_tex_normal);
					else
						if (name == /*"frameeditorblocktex"*/ STR(1380))
							texobj = idVar(idVar(global::tl_edit, temp), block_tex);
				
				
				if (idVar(global::tl_edit, type) == e_tl_type_BLOCK && idVar(global::tl_edit, part_of) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_of), type) == e_tl_type_SCENERY)
					{
						VarType temp = idVar(idVar(global::tl_edit, part_of), temp);
						withOne (Object, temp, self->id)
						{
							if (name == /*"frameeditorblocktexmaterial"*/ STR(1381))
							{
								if (idVar(sVar(block_tex_material), type) == e_res_type_PACK || idVar(sVar(block_tex_material), type) == e_res_type_BLOCK_SHEET)
									texobj = sVar(block_tex_material);
							}
							else
								if (name == /*"frameeditorblocktexnormal"*/ STR(1382))
								{
									if (idVar(sVar(block_tex_normal), type) == e_res_type_PACK || idVar(sVar(block_tex_normal), type) == e_res_type_BLOCK_SHEET)
										texobj = sVar(block_tex_normal);
								}
								else
									if (name == /*"frameeditorblocktex"*/ STR(1380))
									{
										if (idVar(sVar(block_tex), type) == e_res_type_PACK || idVar(sVar(block_tex), type) == e_res_type_BLOCK_SHEET)
											texobj = sVar(block_tex);
									}
							
							
						}
						
					}
				}
				menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), idVar(texobj, display_name) }), idInt(texobj, block_preview_texture) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != texobj && idVar(res, block_sheet_texture) != null_)
						menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
				}
				break;
			}
			
			case 1383: // frameeditoritemtex
			case 1384: // frameeditoritemtexmaterial
			case 1385: // frameeditoritemtexnormal
			{
				VarType texobj;
				if (name == /*"frameeditoritemtexmaterial"*/ STR(1384))
					texobj = idVar(idVar(global::tl_edit, temp), item_tex_material);
				else
					if (name == /*"frameeditoritemtexnormal"*/ STR(1385))
						texobj = idVar(idVar(global::tl_edit, temp), item_tex_normal);
					else
						texobj = idVar(idVar(global::tl_edit, temp), item_tex);
				
				
				if (idVar(texobj, type) == e_res_type_TEXTURE)
					menu_add_item({ texobj, text_get({ /*"listdefault"*/ STR(779), idVar(texobj, display_name) }), idVar(texobj, texture) });
				else
					if (idInt(texobj, item_sheet_texture) != null_)
						menu_add_item({ texobj, text_get({ /*"listdefault"*/ STR(779), idVar(texobj, display_name) }), idInt(texobj, block_preview_texture) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_TEXTURE)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					else
						if (idInt(res, item_sheet_texture) != null_)
							menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
					
				}
				break;
			}
			
			case 1386: // frameeditorshapetex
			case 1387: // frameeditorshapetexmaterial
			case 1388: // frameeditorshapetexnormal
			{
				VarType texobj;
				if (idVar(global::tl_edit, temp) == null_)
					texobj = null_;
				else
					if (name == /*"frameeditorshapetex"*/ STR(1386))
						texobj = idVar(idVar(global::tl_edit, temp), shape_tex);
					else
						if (name == /*"frameeditorshapetexmaterial"*/ STR(1387))
							texobj = idVar(idVar(global::tl_edit, temp), shape_tex_material);
						else
							texobj = idVar(idVar(global::tl_edit, temp), shape_tex_normal);
					
				
				
				if (texobj != null_)
				{
					if (Obj(texobj)->subAssetId == ID_obj_timeline)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), idVar(texobj, display_name) }) });
					else
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), idVar(texobj, display_name) }), idVar(texobj, texture) });
					
					menu_add_item({ IntType(0), text_get({ /*"listnone"*/ STR(753) }) });
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != texobj && idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				if (name == /*"frameeditorshapetex"*/ STR(1386) && idVar(global::tl_edit, type) != e_tl_type_PATH)
				{
					withAll (obj_timeline, self->id)
						if (self->id != texobj && self->type == e_tl_type_CAMERA)
							menu_add_item({ self->id, self->display_name });
					
				}
				break;
			}
			
			case 1389: // frameeditorcameralensdirttexture
			{
				menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), text_get({ /*"listnone"*/ STR(753) }) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1293) }), null_, null_, ID_action_tl_frame_cam_lens_dirt_tex_browse });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				break;
			}
			
			case 1390: // frameeditorsoundfile
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(753) }) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_SOUND)
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 1391: // frameeditortextfont
			{
				menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(779), idVar(idVar(idVar(global::tl_edit, temp), text_font), display_name) }) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != idVar(idVar(global::tl_edit, temp), text_font) && font_exists(idInt(res, font)))
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 1392: // settingsminecraftversion
			{
				ArrType files = file_find(minecraft_directory, /*".midata"*/ STR(96));
				for (IntType i = IntType(0); i < array_length(VarType::CreateRef(files)); i++)
				{
					VarType fn = filename_new_ext(filename_name(files.Value(i)), /*""*/ STR(0));
					menu_add_item({ fn, fn });
				}
				break;
			}
			
			case 1393: // rendershadowssunbuffersize
			case 1394: // rendershadowsspotbuffersize
			case 1395: // rendershadowspointbuffersize
			{
				menu_add_item({ IntType(256), text_get({ /*"rendershadowsbuffersize256"*/ STR(1396) }) + /*" (256x256)"*/ STR(1397) });
				menu_add_item({ IntType(512), text_get({ /*"rendershadowsbuffersize512"*/ STR(1398) }) + /*" (512x512)"*/ STR(1399) });
				menu_add_item({ IntType(1024), text_get({ /*"rendershadowsbuffersize1024"*/ STR(1400) }) + /*" (1024x1024)"*/ STR(1401) });
				menu_add_item({ IntType(2048), text_get({ /*"rendershadowsbuffersize2048"*/ STR(1402) }) + /*" (2048x2048)"*/ STR(1403) });
				menu_add_item({ IntType(4096), text_get({ /*"rendershadowsbuffersize4096"*/ STR(1404) }) + /*" (4096x4096)"*/ STR(1405) });
				if (name != /*"rendershadowspointbuffersize"*/ STR(1395))
					menu_add_item({ IntType(8192), text_get({ /*"rendershadowsbuffersize8192"*/ STR(1406) }) + /*" (8192x8192)"*/ STR(1407) });
				break;
			}
			
			case 1408: // settingswatermarkpositionx
			{
				menu_add_item({ /*"left"*/ STR(188), text_get({ /*"settingswatermarkleft"*/ STR(1409) }) });
				menu_add_item({ /*"center"*/ STR(1410), text_get({ /*"settingswatermarkcenter"*/ STR(1411) }) });
				menu_add_item({ /*"right"*/ STR(189), text_get({ /*"settingswatermarkright"*/ STR(1412) }) });
				break;
			}
			
			case 1413: // settingswatermarkpositiony
			{
				menu_add_item({ /*"top"*/ STR(187), text_get({ /*"settingswatermarktop"*/ STR(1414) }) });
				menu_add_item({ /*"center"*/ STR(1410), text_get({ /*"settingswatermarkcenter"*/ STR(1411) }) });
				menu_add_item({ /*"bottom"*/ STR(186), text_get({ /*"settingswatermarkbottom"*/ STR(1415) }) });
				break;
			}
			
			case 1416: // projectvideosize
			case 1417: // exportmovievideosize
			case 1418: // exportimageimagesize
			case 1419: // frameeditorcameravideosize
			{
				if (ObjType(obj_menu, sVar(menu_current))->menu_name == /*"frameeditorcameravideosize"*/ STR(1419))
					menu_add_item({ null_, text_get({ /*"frameeditorcameravideosizeuseproject"*/ STR(1420) }) });
				for (IntType i = IntType(0); i < ds_list_size(global::videotemplate_list); i++)
					withOne (Object, DsList(global::videotemplate_list).Value(i), self->id)
						menu_add_item({ self->id, text_get({ /*"projectvideosizetemplate"*/ STR(1421) + idVar(self->id, name) }) + /*" ("*/ STR(1100) + string(sVar(width)) + /*"x"*/ STR(817) + string(sVar(height)) + /*")"*/ STR(1076) });
				
				menu_add_item({ IntType(0), text_get({ /*"projectvideosizecustom"*/ STR(1422) }) });
				break;
			}
			
			case 1423: // exportmovieformat
			{
				menu_add_item({ /*"mp4"*/ STR(57), text_get({ /*"exportmovieformatmp4"*/ STR(1424) }) });
				menu_add_item({ /*"mov"*/ STR(58), text_get({ /*"exportmovieformatmov"*/ STR(1425) }) });
				menu_add_item({ /*"wmv"*/ STR(59), text_get({ /*"exportmovieformatwmv"*/ STR(1426) }) });
				menu_add_item({ /*"png"*/ STR(60), text_get({ /*"exportmovieformatpng"*/ STR(1427) }) });
				break;
			}
			
			case 1428: // exportmovievideoquality
			{
				for (IntType i = IntType(0); i < ds_list_size(global::videoquality_list); i++)
					withOne (Object, DsList(global::videoquality_list).Value(i), self->id)
						menu_add_item({ self->id, text_get({ /*"exportmovievideoquality"*/ STR(1428) + idVar(self->id, name) }) });
				
				menu_add_item({ IntType(0), text_get({ /*"exportmovievideoqualitycustom"*/ STR(1429) }) });
				break;
			}
			
			case 1430: // exportmovieframerate
			{
				menu_add_item({ IntType(24), /*"24"*/ STR(1431) });
				menu_add_item({ IntType(30), /*"30"*/ STR(1432) });
				menu_add_item({ IntType(60), /*"60"*/ STR(1433) });
				break;
			}
			
			case 1434: // projectrendersettings
			{
				menu_add_item({ /*""*/ STR(0), text_get({ /*"projectrendersettingscustom"*/ STR(1435) }) });
				menu_add_item({ /*"performance"*/ STR(1436), text_get({ /*"projectrendersettingsperformance"*/ STR(1437) }), null_ });
				menu_add_item({ /*"balanced"*/ STR(1438), text_get({ /*"projectrendersettingsbalanced"*/ STR(1439) }), null_ });
				menu_add_item({ /*"extreme"*/ STR(1440), text_get({ /*"projectrendersettingsextreme"*/ STR(1441) }), null_ });
				StringType file = file_find_first(render_directory + /*"*.mirender"*/ STR(1442), IntType(0));
				while (file != /*""*/ STR(0))
				{
					if (file != /*"performance.mirender"*/ STR(1443) && file != /*"balanced.mirender"*/ STR(1444) && file != /*"extreme.mirender"*/ STR(1445))
						menu_add_item({ filename_change_ext(file, /*""*/ STR(0)), filename_change_ext(file, /*""*/ STR(0)), null_ });
					file = file_find_next();
				}
				
				break;
			}
			
			case 1446: // timelineeditorblendmode
			{
				for (IntType i = IntType(0); i < ds_list_size(global::blend_mode_list); i++)
					menu_add_item({ DsList(global::blend_mode_list).Value(i), text_get({ /*"timelineeditorblendmode"*/ STR(1446) + DsList(global::blend_mode_list).Value(i) }) });
				break;
			}
			
			case 1447: // startupsortby
			{
				list_item_add({ text_get({ /*"recentsortdatenewest"*/ STR(1448) }), e_recent_sort_date_newest, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort });
				list_item_add({ text_get({ /*"recentsortdateoldest"*/ STR(1449) }), e_recent_sort_date_oldest, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort });
				list_item_add({ text_get({ /*"recentsortnameaz"*/ STR(1450) }), e_recent_sort_name_az, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort });
				list_item_add({ text_get({ /*"recentsortnameza"*/ STR(1451) }), e_recent_sort_name_za, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort });
				break;
			}
			
			case 1452: // timelinemarkercolor
			{
				for (IntType i = IntType(0); i <= IntType(8); i++)
				{
					list_item_add({ text_get({ /*"timelinemarkercolor"*/ STR(1452) + string(i) }), i, /*""*/ STR(0), ID_spr_16, null_, null_, null_ });
					ObjType(obj_list_item, global::list_item_last)->thumbnail_blend = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(i);
				}
				break;
			}
			
			case 1453: // settingslanguage
			{
				withAll (obj_language, self->id)
					list_item_add({ ObjType(obj_language, self->id)->name, languages_directory + ObjType(obj_language, self->id)->filename, ObjType(obj_language, self->id)->locale, null_, null_, null_, ID_action_setting_language_load });
				
				break;
			}
			
			case 1454: // viewmodepass
			{
				for (IntType i = IntType(0); i < e_render_pass_amount; i++)
					list_item_add({ text_get({ /*"viewmodepass"*/ STR(1454) + DsList(global::render_pass_list).Value(i) }), i });
				break;
			}
			
			case 1455: // viewcameramain
			case 1456: // viewcamerasecond
			{
				list_item_add({ text_get({ /*"viewcamerawork"*/ STR(1457) }), -IntType(4) });
				VarType tlname = (sInt(timeline_camera) == -IntType(4) ? text_get({ /*"viewcamerawork"*/ STR(1457) }) : ObjType(obj_timeline, sInt(timeline_camera))->display_name);
				list_item_add({ text_get({ /*"viewcameraactive"*/ STR(1458), tlname }), -IntType(5) });
				withAll (obj_timeline, self->id)
					if (self->type == e_tl_type_CAMERA)
						list_item_add({ self->display_name, self->id });
				
				break;
			}
			
			case 1459: // worldimportworld
			{
				world_import_world_menu_init();
				break;
			}
			
			case 1460: // worldimportdimension
			{
				world_import_dimension_menu_init();
				break;
			}
			
			case 1461: // settingsinterfacescale
			{
				menu_add_item({ IntType(1), /*"100%"*/ STR(1462) });
				if (interface_scale_default_get() >= IntType(2))
					menu_add_item({ IntType(2), /*"200%"*/ STR(1463) });
				if (interface_scale_default_get() >= IntType(3))
					menu_add_item({ IntType(3), /*"300%"*/ STR(1464) });
				break;
			}
			
			case 1465: // renderalphamode
			case 1466: // timelineeditoralphamode
			{
				if (name == /*"timelineeditoralphamode"*/ STR(1466))
					menu_add_item({ e_alpha_mode_DEFAULT, text_get({ /*"renderalphamodedefault"*/ STR(1467) }) });
				menu_add_item({ e_alpha_mode_HASHED, text_get({ /*"renderalphamodehashed"*/ STR(1468) }) });
				menu_add_item({ e_alpha_mode_BLEND, text_get({ /*"renderalphamodeblend"*/ STR(1469) }) });
				break;
			}
			
			case 1470: // rendertonemapper
			case 1471: // frameeditorcameratonemapper
			{
				menu_add_item({ e_tonemapper_NONE, text_get({ /*"rendertonemappernone"*/ STR(1472) }) });
				menu_add_item({ e_tonemapper_REINHARD, text_get({ /*"rendertonemapperreinhard"*/ STR(1473) }) });
				menu_add_item({ e_tonemapper_ACES, text_get({ /*"rendertonemapperaces"*/ STR(1474) }) });
			}
			
		}
		
		return list_init_end(self);
	}
	
}
