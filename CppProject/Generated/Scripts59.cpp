/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.04.19 18:42:27 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void tab_properties_project(ScopeAny self)
	{
		ObjType(obj_textbox, ObjType(obj_category, idInt(sVar(tab), project))->tbx_name)->text = sVar(project_name);
		tab_control_textfield(self);
		if (draw_textfield(self, /*"projectname"*/ STR(3232), sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_category, idInt(sVar(tab), project))->tbx_name, null_, /*""*/ STR(0), /*"top"*/ STR(187)))
		{
			sInt(project_changed) = true;
			sVar(project_name) = ObjType(obj_textbox, ObjType(obj_category, idInt(sVar(tab), project))->tbx_name)->text;
		}
		tab_next(self);
		ObjType(obj_textbox, ObjType(obj_category, idInt(sVar(tab), project))->tbx_author)->text = sVar(project_author);
		tab_control_textfield(self);
		if (draw_textfield(self, /*"projectauthor"*/ STR(3233), sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_category, idInt(sVar(tab), project))->tbx_author, null_, /*""*/ STR(0), /*"top"*/ STR(187)))
		{
			sInt(project_changed) = true;
			sVar(project_author) = ObjType(obj_textbox, ObjType(obj_category, idInt(sVar(tab), project))->tbx_author)->text;
		}
		tab_next(self);
		ObjType(obj_textbox, ObjType(obj_category, idInt(sVar(tab), project))->tbx_description)->text = sVar(project_description);
		tab_control_textfield(self, true, IntType(76));
		if (draw_textfield(self, /*"projectdescription"*/ STR(3234), sVar(dx), sVar(dy), sVar(dw), IntType(76), ObjType(obj_category, idInt(sVar(tab), project))->tbx_description, null_, /*""*/ STR(0), /*"top"*/ STR(187)))
		{
			sInt(project_changed) = true;
			sVar(project_description) = ObjType(obj_textbox, ObjType(obj_category, idInt(sVar(tab), project))->tbx_description)->text;
		}
		tab_next(self);
		StringType directory = /*"../"*/ STR(2003) + directory_name(sStr(project_folder)) + filename_name(filename_dir(sVar(project_file)));
		tab_control(self, IntType(40));
		draw_label_value(self, sVar(dx), sVar(dy), sVar(dw) - IntType(28), IntType(40), text_get({ /*"newprojectlocation"*/ STR(2004) }), directory, true);
		if (draw_button_icon(self, { /*"newprojectchangefolder"*/ STR(2005), sVar(dx) + sVar(dw) - IntType(24), sVar(dy) + IntType(8), IntType(24), IntType(24), false, icons_FOLDER, null_, false, /*"tooltipopenfolder"*/ STR(3235) }))
			action_toolbar_open_folder(self);
		tab_next(self);
		if (sVar(project_video_template) == IntType(0))
			sVar(text) = text_get({ /*"projectvideosizecustom"*/ STR(1420) });
		else
			sVar(text) = text_get({ /*"projectvideosizetemplate"*/ STR(1419) + ObjType(obj_videotemplate, sVar(project_video_template))->name }) + /*" ("*/ STR(1098) + string(ObjType(obj_videotemplate, sVar(project_video_template))->width) + /*"x"*/ STR(818) + string(ObjType(obj_videotemplate, sVar(project_video_template))->height) + /*")"*/ STR(1074);
		
		tab_control_menu(self);
		draw_button_menu(self, { /*"projectvideosize"*/ STR(1414), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(project_video_template), sVar(text), ID_action_project_video_template });
		tab_next(self);
		if (sVar(project_video_template) == IntType(0))
		{
			textfield_group_add(self, { /*"projectvideosizecustomwidth"*/ STR(3236), sVar(project_video_width), IntType(1280), ID_action_project_video_width, X_, ObjType(obj_category, idInt(sVar(tab), project))->tbx_video_size_custom_width, null_, IntType(1), IntType(1), surface_get_max_size() });
			textfield_group_add(self, { /*"projectvideosizecustomheight"*/ STR(3237), sVar(project_video_height), IntType(720), ID_action_project_video_height, X_, ObjType(obj_category, idInt(sVar(tab), project))->tbx_video_size_custom_height, null_, IntType(1), IntType(1), surface_get_max_size() });
			tab_control_textfield_group(self, false);
			draw_textfield_group(self, /*"projectvideosizecustom"*/ STR(1420), sVar(dx), sVar(dy), sVar(dw), IntType(1), IntType(1), no_limit, IntType(1), false);
			tab_next(self);
			tab_control_switch(self);
			draw_switch(self, /*"projectvideosizecustomkeepaspectratio"*/ STR(3238), sVar(dx), sVar(dy), sVar(project_video_keep_aspect_ratio), ID_action_project_video_keep_aspect_ratio);
			tab_next(self);
			sVar(dy) += IntType(8);
		}
		tab_control_meter(self);
		draw_meter(self, /*"projecttempo"*/ STR(3239), sVar(dx), sVar(dy), sVar(dw), sVar(project_tempo), IntType(1), IntType(100), IntType(24), IntType(1), ObjType(obj_category, idInt(sVar(tab), project))->tbx_tempo, ID_action_project_tempo, /*"projecttempotip"*/ STR(3240));
		tab_next(self);
	}
	
	RealType tab_properties_render(ScopeAny self)
	{
		if (sVar(project_render_settings) == /*""*/ STR(0))
			sVar(text) = text_get({ /*"projectrendersettingscustom"*/ STR(1434) });
		else
			if (text_exists(/*"projectrendersettings"*/ STR(1433) + sVar(project_render_settings)))
				sVar(text) = text_get({ /*"projectrendersettings"*/ STR(1433) + sVar(project_render_settings) });
			else
				sVar(text) = filename_name(sVar(project_render_settings));
		
		
		tab_control_menu(self);
		draw_button_menu(self, { /*"projectrendersettings"*/ STR(1433), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(project_render_settings), sVar(text), ID_action_project_render_settings });
		tab_next(self);
		if (sVar(project_render_settings) != /*""*/ STR(0))
			return IntType(0);
		sVar(dy) += IntType(8);
		tab_control_dragger(self);
		draw_dragger(self, /*"renderdistance"*/ STR(3241), sVar(dx), sVar(dy), dragger_width, sVar(project_render_distance), IntType(1), IntType(1000), IntType(100000), IntType(30000), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_render_distance, ID_action_project_render_distance, null_, true, false, /*"renderdistancetip"*/ STR(3242));
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"rendersamples"*/ STR(3243), sVar(dx), sVar(dy), dragger_width, sVar(project_render_samples), .5, IntType(1), IntType(256), IntType(24), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_samples, ID_action_project_render_samples);
		tab_next(self);
		tab_control_switch(self);
		draw_button_collapse(self, /*"ssao"*/ STR(122), DsMap(global::collapse_map).Value(/*"ssao"*/ STR(122)), ID_action_project_render_ssao, sVar(project_render_ssao), /*"renderssao"*/ STR(3244), /*"renderssaotip"*/ STR(3245));
		tab_next(self);
		if (sVar(project_render_ssao) > 0 && DsMap(global::collapse_map).Value(/*"ssao"*/ STR(122)) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"renderssaoradius"*/ STR(3246), sVar(dx), sVar(dy), dragger_width, sVar(project_render_ssao_radius), (RealType)sVar(project_render_ssao_radius) / 200.0, IntType(0), IntType(256), IntType(12), IntType(0), ObjType(obj_category, idVar(sVar(tab), render))->tbx_ssao_radius, ID_action_project_render_ssao_radius);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"renderssaopower"*/ STR(3247), sVar(dx), sVar(dy), dragger_width, round(sVar(project_render_ssao_power) * IntType(100)), .5, IntType(0), no_limit * IntType(100), IntType(100), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_ssao_power, ID_action_project_render_ssao_power);
			tab_next(self);
			tab_control_color(self);
			draw_button_color(self, /*"renderssaocolor"*/ STR(3248), sVar(dx), sVar(dy), sVar(dw), sVar(project_render_ssao_color), c_black, false, ID_action_project_render_ssao_color);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"shadows"*/ STR(123), DsMap(global::collapse_map).Value(/*"shadows"*/ STR(123)), ID_action_project_render_shadows, sVar(project_render_shadows), /*"rendershadows"*/ STR(3249));
		tab_next(self);
		if (sVar(project_render_shadows) > 0 && DsMap(global::collapse_map).Value(/*"shadows"*/ STR(123)) > 0)
		{
			tab_collapse_start(self);
			tab_control_menu(self);
			draw_button_menu(self, { /*"rendershadowssunbuffersize"*/ STR(1391), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(project_render_shadows_sun_buffer_size), text_get({ /*"rendershadowsbuffersize"*/ STR(3250) + string(sVar(project_render_shadows_sun_buffer_size)) }) + /*" ("*/ STR(1098) + string(sVar(project_render_shadows_sun_buffer_size)) + /*"x"*/ STR(818) + string(sVar(project_render_shadows_sun_buffer_size)) + /*")"*/ STR(1074), ID_action_project_render_shadows_sun_buffer_size });
			tab_next(self);
			tab_control_menu(self);
			draw_button_menu(self, { /*"rendershadowsspotbuffersize"*/ STR(1392), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(project_render_shadows_spot_buffer_size), text_get({ /*"rendershadowsbuffersize"*/ STR(3250) + string(sVar(project_render_shadows_spot_buffer_size)) }) + /*" ("*/ STR(1098) + string(sVar(project_render_shadows_spot_buffer_size)) + /*"x"*/ STR(818) + string(sVar(project_render_shadows_spot_buffer_size)) + /*")"*/ STR(1074), ID_action_project_render_shadows_spot_buffer_size });
			tab_next(self);
			tab_control_menu(self);
			draw_button_menu(self, { /*"rendershadowspointbuffersize"*/ STR(1393), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(project_render_shadows_point_buffer_size), text_get({ /*"rendershadowsbuffersize"*/ STR(3250) + string(sVar(project_render_shadows_point_buffer_size)) }) + /*" ("*/ STR(1098) + string(sVar(project_render_shadows_point_buffer_size)) + /*"x"*/ STR(818) + string(sVar(project_render_shadows_point_buffer_size)) + /*")"*/ STR(1074), ID_action_project_render_shadows_point_buffer_size });
			tab_next(self);
			tab_control_switch(self);
			draw_switch(self, /*"rendershadowstransparent"*/ STR(3251), sVar(dx), sVar(dy), sVar(project_render_shadows_transparent), ID_action_project_render_shadows_transparent);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"subsurface"*/ STR(124), DsMap(global::collapse_map).Value(/*"subsurface"*/ STR(124)), null_, true, /*"rendersubsurfacescattering"*/ STR(3252), /*"rendersubsurfacescatteringtip"*/ STR(3253));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"subsurface"*/ STR(124)) > 0)
		{
			tab_collapse_start(self);
			tab_control_meter(self);
			draw_meter(self, /*"rendersubsurfacescatterquality"*/ STR(3254), sVar(dx), sVar(dy), sVar(dw), sVar(project_render_subsurface_samples), IntType(0), IntType(32), IntType(7), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_subsurface_samples, ID_action_project_render_subsurface_samples);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"rendersubsurfacescatterhighlight"*/ STR(3255), sVar(dx), sVar(dy), sVar(dw), round(sVar(project_render_subsurface_highlight) * IntType(100)), IntType(0), IntType(100), IntType(50), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_subsurface_highlight, ID_action_project_render_subsurface_highlight, /*"rendersubsurfacescatterhighlighttip"*/ STR(3256));
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"rendersubsurfacescatterhighlightstrength"*/ STR(3257), sVar(dx), sVar(dy), dragger_width, round(sVar(project_render_subsurface_highlight_strength) * IntType(100)), 0.1, IntType(0), no_limit, IntType(100), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_subsurface_highlight_strength, ID_action_project_render_subsurface_highlight_strength);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"indirect"*/ STR(125), DsMap(global::collapse_map).Value(/*"indirect"*/ STR(125)), ID_action_project_render_indirect, sVar(project_render_indirect), /*"renderindirect"*/ STR(3258), /*"renderindirecttip"*/ STR(3259));
		tab_next(self);
		if (sVar(project_render_indirect) > 0 && DsMap(global::collapse_map).Value(/*"indirect"*/ STR(125)) > 0)
		{
			tab_collapse_start(self);
			tab_control_meter(self);
			draw_meter(self, /*"renderindirectprecision"*/ STR(3260), sVar(dx), sVar(dy), sVar(dw), round(sVar(project_render_indirect_precision) * IntType(100)), IntType(0), IntType(100), IntType(30), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_indirect_precision, ID_action_project_render_indirect_precision, /*"renderindirectprecisiontip"*/ STR(3261));
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"renderindirectblurradius"*/ STR(3262), sVar(dx), sVar(dy), sVar(dw), round(sVar(project_render_indirect_blur_radius) * IntType(100)), IntType(0), IntType(500), IntType(100), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_indirect_blur_radius, ID_action_project_render_indirect_blur_radius);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"renderindirectstrength"*/ STR(3263), sVar(dx), sVar(dy), dragger_width, round(sVar(project_render_indirect_strength) * IntType(100)), .5, IntType(0), no_limit * IntType(100), IntType(100), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_indirect_strength, ID_action_project_render_indirect_strength);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"reflections"*/ STR(126), DsMap(global::collapse_map).Value(/*"reflections"*/ STR(126)), ID_action_project_render_reflections, sVar(project_render_reflections), /*"renderreflections"*/ STR(3264));
		tab_next(self);
		if (sVar(project_render_reflections) > 0 && DsMap(global::collapse_map).Value(/*"reflections"*/ STR(126)) > 0)
		{
			tab_collapse_start(self);
			tab_control_meter(self);
			draw_meter(self, /*"renderreflectionsprecision"*/ STR(3265), sVar(dx), sVar(dy), sVar(dw), round(sVar(project_render_reflections_precision) * IntType(100)), IntType(0), IntType(100), IntType(30), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_reflections_precision, ID_action_project_render_reflections_precision, /*"renderreflectionsprecisiontip"*/ STR(3266));
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"renderreflectionsfadeamount"*/ STR(3267), sVar(dx), sVar(dy), sVar(dw), round(sVar(project_render_reflections_fade_amount) * IntType(100)), IntType(0), IntType(100), IntType(50), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_reflections_fade_amount, ID_action_project_render_reflections_fade_amount, /*"renderreflectionsfadeamounttip"*/ STR(3268));
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"renderreflectionsthickness"*/ STR(3269), sVar(dx), sVar(dy), dragger_width, sVar(project_render_reflections_thickness), IntType(1), .1, no_limit, IntType(1), .1, ObjType(obj_category, idVar(sVar(tab), render))->tbx_reflections_thickness, ID_action_project_render_reflections_thickness, null_, true, false, /*"renderreflectionsthicknesstip"*/ STR(3270));
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"glow"*/ STR(127), DsMap(global::collapse_map).Value(/*"glow"*/ STR(127)), ID_action_project_render_glow, sVar(project_render_glow), /*"renderglow"*/ STR(3271));
		tab_next(self);
		if (sVar(project_render_glow) > 0 && DsMap(global::collapse_map).Value(/*"glow"*/ STR(127)) > 0)
		{
			tab_collapse_start(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"renderglowradius"*/ STR(3272), sVar(dx), sVar(dy), dragger_width, round(sVar(project_render_glow_radius) * IntType(100)), .5, IntType(0), no_limit * IntType(100), IntType(100), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_glow_radius, ID_action_project_render_glow_radius);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"renderglowintensity"*/ STR(3273), sVar(dx), sVar(dy), dragger_width, round(sVar(project_render_glow_intensity) * IntType(100)), .5, IntType(0), no_limit * IntType(100), IntType(100), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_glow_intensity, ID_action_project_render_glow_intensity);
			tab_next(self);
			tab_control_switch(self);
			draw_button_collapse(self, /*"glow_falloff"*/ STR(128), DsMap(global::collapse_map).Value(/*"glow_falloff"*/ STR(128)), ID_action_project_render_glow_falloff, sVar(project_render_glow_falloff), /*"renderglowfalloff"*/ STR(3274));
			tab_next(self);
			if (sVar(project_render_glow_falloff) > 0 && DsMap(global::collapse_map).Value(/*"glow_falloff"*/ STR(128)) > 0)
			{
				tab_collapse_start(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"renderglowfalloffradius"*/ STR(3275), sVar(dx), sVar(dy), dragger_width, round(sVar(project_render_glow_falloff_radius) * IntType(100)), .5, IntType(0), no_limit * IntType(100), IntType(200), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_glow_falloff_radius, ID_action_project_render_glow_falloff_radius);
				tab_next(self);
				tab_control_dragger(self);
				draw_dragger(self, /*"renderglowfalloffintensity"*/ STR(3276), sVar(dx), sVar(dy), dragger_width, round(sVar(project_render_glow_falloff_intensity) * IntType(100)), .5, IntType(0), no_limit * IntType(100), IntType(100), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_glow_falloff_intensity, ID_action_project_render_glow_falloff_intensity);
				tab_next(self);
				tab_collapse_end(self, false);
			}
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"aa"*/ STR(129), DsMap(global::collapse_map).Value(/*"aa"*/ STR(129)), ID_action_project_render_aa, sVar(project_render_aa), /*"renderaa"*/ STR(3277), /*"renderaatip"*/ STR(3278));
		tab_next(self);
		if (sVar(project_render_aa) > 0 && DsMap(global::collapse_map).Value(/*"aa"*/ STR(129)) > 0)
		{
			tab_collapse_start(self);
			tab_control_meter(self);
			draw_meter(self, /*"renderaapower"*/ STR(3279), sVar(dx), sVar(dy), sVar(dw), round(sVar(project_render_aa_power) * IntType(100)), IntType(0), IntType(300), IntType(100), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_aa_power, ID_action_project_render_aa_power);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"texfilter"*/ STR(121), DsMap(global::collapse_map).Value(/*"texfilter"*/ STR(121)), ID_action_project_render_texture_filtering, sVar(project_render_texture_filtering), /*"rendertexturefiltering"*/ STR(3280), /*"rendertexturefilteringtip"*/ STR(3281));
		tab_next(self);
		if (sVar(project_render_texture_filtering) > 0 && DsMap(global::collapse_map).Value(/*"texfilter"*/ STR(121)) > 0)
		{
			tab_collapse_start(self);
			tab_control_switch(self);
			draw_switch(self, /*"rendertexturefilteringtransparentblocks"*/ STR(3282), sVar(dx), sVar(dy), sVar(project_render_transparent_block_texture_filtering), ID_action_project_render_transparent_block_texture_filtering);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"rendertexturefilteringlevel"*/ STR(3283), sVar(dx), sVar(dy), sVar(dw), sVar(project_render_texture_filtering_level), IntType(0), IntType(5), IntType(1), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_texture_filtering_level, ID_action_project_render_texture_filtering_level);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"light_management"*/ STR(130), DsMap(global::collapse_map).Value(/*"light_management"*/ STR(130)), null_, true, /*"renderlightmanagement"*/ STR(3284));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"light_management"*/ STR(130)) > 0)
		{
			tab_collapse_start(self);
			if (sVar(project_render_tonemapper) == e_tonemapper_REINHARD)
				sVar(text) = text_get({ /*"rendertonemapperreinhard"*/ STR(1472) });
			else
				if (sVar(project_render_tonemapper) == e_tonemapper_ACES)
					sVar(text) = text_get({ /*"rendertonemapperaces"*/ STR(1473) });
				else
					sVar(text) = text_get({ /*"rendertonemappernone"*/ STR(1471) });
			
			
			tab_control_menu(self);
			draw_button_menu(self, { /*"rendertonemapper"*/ STR(1469), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(project_render_tonemapper), sVar(text), ID_action_project_render_tonemapper });
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"renderexposure"*/ STR(3285), sVar(dx), sVar(dy), dragger_width, sVar(project_render_exposure), 0.01, IntType(0), no_limit, IntType(1), 0.01, ObjType(obj_category, idVar(sVar(tab), render))->tbx_exposure, ID_action_project_render_exposure);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"rendergamma"*/ STR(3286), sVar(dx), sVar(dy), dragger_width, sVar(project_render_gamma), 0.01, IntType(0), no_limit, 2.2, 0.01, ObjType(obj_category, idVar(sVar(tab), render))->tbx_gamma, ID_action_project_render_gamma);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"models_scenery"*/ STR(131), DsMap(global::collapse_map).Value(/*"models_scenery"*/ STR(131)), null_, true, /*"rendermodelsscenery"*/ STR(3287));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"models_scenery"*/ STR(131)) > 0)
		{
			tab_collapse_start(self);
			tab_control_togglebutton(self);
			togglebutton_add(self, { /*"renderbendstylerealistic"*/ STR(3288), null_, /*"realistic"*/ STR(1834), sVar(project_bend_style) == /*"realistic"*/ STR(1834), ID_action_project_bend_style });
			togglebutton_add(self, { /*"renderbendstyleblocky"*/ STR(3289), null_, /*"blocky"*/ STR(1833), sVar(project_bend_style) == /*"blocky"*/ STR(1833), ID_action_project_bend_style });
			draw_togglebutton(self, /*"renderbendstyle"*/ STR(3290), sVar(dx), sVar(dy));
			tab_next(self);
			tab_control_switch(self);
			draw_switch(self, /*"renderopaqueleaves"*/ STR(3291), sVar(dx), sVar(dy), sVar(project_render_opaque_leaves), ID_action_project_render_opaque_leaves);
			tab_next(self);
			tab_control_switch(self);
			draw_switch(self, /*"renderliquidanimation"*/ STR(3292), sVar(dx), sVar(dy), sVar(project_render_liquid_animation), ID_action_project_render_liquid_animation);
			tab_next(self);
			tab_control_switch(self);
			draw_switch(self, /*"renderwaterreflections"*/ STR(3293), sVar(dx), sVar(dy), sVar(project_render_water_reflections), ID_action_project_render_water_reflections, /*"renderwaterreflectionshelp"*/ STR(3294));
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_dragger(self);
		draw_dragger(self, /*"renderdefaultemissive"*/ STR(3295), sVar(dx), sVar(dy), dragger_width, round(sVar(project_render_block_emissive) * IntType(100)), IntType(1), IntType(0), no_limit, IntType(100), IntType(1), ObjType(obj_category, idVar(sVar(tab), render))->tbx_block_emissive, ID_action_project_render_block_emissive, null_, true, false, /*"renderdefaultemissivetip"*/ STR(3296));
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"renderdefaultsubsurfaceradius"*/ STR(3297), sVar(dx), sVar(dy), dragger_width, sVar(project_render_block_subsurface), .1, IntType(0), no_limit, IntType(8), 0.01, ObjType(obj_category, idVar(sVar(tab), render))->tbx_block_subsurface_radius, ID_action_project_render_block_subsurface, null_, true, false, /*"renderdefaultsubsurfaceradiustip"*/ STR(3298));
		tab_next(self);
		sVar(text) = (sVar(project_render_alpha_mode) == e_alpha_mode_BLEND ? text_get({ /*"renderalphamodeblend"*/ STR(1468) }) : text_get({ /*"renderalphamodehashed"*/ STR(1467) }));
		tab_control_menu(self);
		draw_button_menu(self, { /*"renderalphamode"*/ STR(1464), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(project_render_alpha_mode), sVar(text), ID_action_project_render_alpha_mode });
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"rendermaterialmaps"*/ STR(3299), sVar(dx), sVar(dy), sVar(project_render_material_maps), ID_action_project_render_material_maps, /*"rendermaterialmapstip"*/ STR(3300));
		tab_next(self);
		tab_control(self, IntType(24));
		if (draw_button_icon(self, { /*"renderimport"*/ STR(3301), sVar(dx), sVar(dy), IntType(24), IntType(24), false, icons_SETTINGS_IMPORT, null_, false, /*"tooltipsettingsimport"*/ STR(3302) }))
			action_project_render_import(self);
		if (draw_button_icon(self, { /*"renderexport"*/ STR(3303), sVar(dx) + IntType(28), sVar(dy), IntType(24), IntType(24), false, icons_SETTINGS_EXPORT, null_, false, /*"tooltipsettingsexport"*/ STR(3304) }))
			action_project_render_export(self);
		if (draw_button_icon(self, { /*"rendersetdefault"*/ STR(3305), sVar(dx) + (IntType(28) * IntType(2)), sVar(dy), IntType(24), IntType(24), false, icons_SETTINGS_SETDEFAULT, null_, false, /*"tooltipsettingssetdefault"*/ STR(3306) }))
		{
			if (question(text_get({ /*"questionsetasdefault"*/ STR(3307) })))
				action_project_render_export(self, render_default_file);
		}
		draw_button_icon(self, { /*"renderreset"*/ STR(3308), sVar(dx) + (IntType(28) * IntType(3)), sVar(dy), IntType(24), IntType(24), false, icons_RESET, ID_action_project_render_reset, false, /*"tooltipsettingsreset"*/ STR(3309) });
		tab_next(self);
		return 0.0;
	}
	
	RealType tab_properties_resources(ScopeAny self)
	{
		IntType capwid;
		tab_control(self, IntType(160));
		preview_draw(self, sInt(res_preview), sVar(dx), sVar(dy), sVar(dw), IntType(160));
		tab_next(self);
		tab_control_sortlist(self, IntType(6));
		sortlist_draw(self, ObjType(obj_category, idInt(sVar(tab), resources))->list, sVar(dx), sVar(dy), sVar(dw), sReal(tab_control_h), global::res_edit);
		tab_next(self);
		tab_control(self, IntType(24));
		if (draw_button_icon(self, { /*"resourcesnew"*/ STR(3310), sVar(dx), sVar(dy), IntType(24), IntType(24), false, icons_ASSET_IMPORT, null_, false, /*"tooltipresourcenew"*/ STR(3311) }))
			action_toolbar_import_asset(self);
		if (draw_button_icon(self, { /*"previewexport"*/ STR(3312), sVar(dx) + IntType(28), sVar(dy), IntType(24), IntType(24), false, icons_ASSET_EXPORT, null_, (!(global::res_edit > 0) || idVar(global::res_edit, type) == e_res_type_FROM_WORLD), /*"tooltipresourcesave"*/ STR(3313) }))
			action_res_export(self);
		if (draw_button_icon(self, { /*"resourcesreload"*/ STR(3314), sVar(dx) + (IntType(28) * IntType(2)), sVar(dy), IntType(24), IntType(24), false, icons_RELOAD, null_, (!(global::res_edit > 0) || global::res_edit == global::mc_res), /*"tooltipresourcereload"*/ STR(3315) }))
			action_res_reload(self);
		if (draw_button_icon(self, { /*"resourcesreplace"*/ STR(3316), sVar(dx) + (IntType(28) * IntType(3)), sVar(dy), IntType(24), IntType(24), false, icons_FOLDER, null_, (!(global::res_edit > 0) || global::res_edit == global::mc_res || idVar(global::res_edit, type) == e_res_type_FROM_WORLD), /*"tooltipresourcereplace"*/ STR(3317) }))
			action_res_replace(self);
		if (draw_button_icon(self, { /*"resourcesremove"*/ STR(3318), sVar(dx) + (IntType(28) * IntType(4)), sVar(dy), IntType(24), IntType(24), false, icons_DELETE, null_, (!(global::res_edit > 0) || global::res_edit == global::mc_res), /*"tooltipresourceremove"*/ STR(3319) }))
			action_res_remove(self);
		tab_next(self);
		if (global::res_edit == null_)
			return IntType(0);
		if (idVar(global::res_edit, type) == e_res_type_SCENERY)
		{
			tab_control_checkbox(self);
			draw_checkbox(self, /*"resourcessceneryrandomize"*/ STR(3320), sVar(dx), sVar(dy), idVar(global::res_edit, scenery_randomize), ID_action_res_scenery_randomize, /*"resourcessceneryrandomizehelp"*/ STR(3321));
			tab_next(self);
		}
		if (idVar(global::res_edit, type) == e_res_type_PACK)
		{
			capwid = text_caption_width(self, { /*"resourcespackimage"*/ STR(1342), /*"resourcespackimagecharacter"*/ STR(3322), /*"resourcespackimagecolormap"*/ STR(3323), /*"resourcespackimageparticles"*/ STR(3324) });
			tab_control_menu(self);
			draw_button_menu(self, { /*"resourcespackimage"*/ STR(1342), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_preview, sInt(res_preview))->pack_image, text_get({ /*"resourcespack"*/ STR(3325) + ObjType(obj_preview, sInt(res_preview))->pack_image }), ID_action_res_preview_pack_image, false });
			tab_next(self);
			switch (StringType(ObjType(obj_preview, sInt(res_preview))->pack_image).id)
			{
				case 1345: // modeltextures
				{
					tab_control_menu(self);
					draw_button_menu(self, { /*"resourcespackmaterial"*/ STR(1358), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_preview, sInt(res_preview))->pack_image_material, text_get({ /*"resourcespackmaterial"*/ STR(1358) + ObjType(obj_preview, sInt(res_preview))->pack_image_material }), ID_action_res_preview_pack_image_material, false });
					tab_next(self);
					tab_control_menu(self);
					draw_button_menu(self, { /*"resourcespackimagemodeltexture"*/ STR(1362), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_preview, sInt(res_preview))->pack_model_texture, ObjType(obj_preview, sInt(res_preview))->pack_model_texture, ID_action_res_preview_pack_model_texture, false });
					tab_next(self);
					break;
				}
				
				case 527: // itemsheet
				{
					tab_control_menu(self);
					draw_button_menu(self, { /*"resourcespackmaterial"*/ STR(1358), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_preview, sInt(res_preview))->pack_image_material, text_get({ /*"resourcespackmaterial"*/ STR(1358) + ObjType(obj_preview, sInt(res_preview))->pack_image_material }), ID_action_res_preview_pack_image_material, false });
					tab_next(self);
					break;
				}
				
				case 529: // blocksheet
				{
					tab_control_menu(self);
					draw_button_menu(self, { /*"resourcespackmaterial"*/ STR(1358), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_preview, sInt(res_preview))->pack_image_material, text_get({ /*"resourcespackmaterial"*/ STR(1358) + ObjType(obj_preview, sInt(res_preview))->pack_image_material }), ID_action_res_preview_pack_image_material, false });
					tab_next(self);
					tab_control_togglebutton(self);
					togglebutton_add(self, { /*"resourcespackimageblocksheetstatic"*/ STR(3326), null_, IntType(0), !(ObjType(obj_preview, sInt(res_preview))->pack_block_sheet_ani > 0), ID_action_res_preview_pack_block_sheet_ani });
					togglebutton_add(self, { /*"resourcespackimageblocksheetanimated"*/ STR(3327), null_, IntType(1), ObjType(obj_preview, sInt(res_preview))->pack_block_sheet_ani, ID_action_res_preview_pack_block_sheet_ani });
					draw_togglebutton(self, /*"resourcespackimageblocksheet"*/ STR(3328), sVar(dx), sVar(dy));
					tab_next(self);
					break;
				}
				
				case 1348: // colormap
				{
					tab_control_togglebutton(self);
					togglebutton_add(self, { /*"resourcespackimagecolormapgrass"*/ STR(3329), null_, IntType(0), ObjType(obj_preview, sInt(res_preview))->pack_colormap == IntType(0), ID_action_res_preview_pack_colormap });
					togglebutton_add(self, { /*"resourcespackimagecolormapfoliage"*/ STR(3330), null_, IntType(1), ObjType(obj_preview, sInt(res_preview))->pack_colormap == IntType(1), ID_action_res_preview_pack_colormap });
					draw_togglebutton(self, /*"resourcespackimagecolormap"*/ STR(3323), sVar(dx), sVar(dy));
					tab_next(self);
					break;
				}
				
				case 531: // particlesheet
				{
					tab_control_togglebutton(self);
					togglebutton_add(self, { /*"resourcespackimageparticlesimage1"*/ STR(3331), null_, IntType(0), ObjType(obj_preview, sInt(res_preview))->pack_particles == IntType(0), ID_action_res_preview_pack_particles });
					togglebutton_add(self, { /*"resourcespackimageparticlesimage2"*/ STR(3332), null_, IntType(1), ObjType(obj_preview, sInt(res_preview))->pack_particles == IntType(1), ID_action_res_preview_pack_particles });
					draw_togglebutton(self, /*"resourcespackimageparticles"*/ STR(3324), sVar(dx), sVar(dy));
					tab_next(self);
					break;
				}
				
			}
			
		}
		else
			if (idVar(global::res_edit, type) == e_res_type_ITEM_SHEET)
			{
				global::axis_edit = X_;
				tab_control_dragger(self);
				draw_dragger(self, /*"resourcesitemsheetsizerows"*/ STR(3333), sVar(dx), sVar(dy), dragger_width, idVar(global::res_edit, item_sheet_size).Value(X_), 1.0 / 10.0, IntType(1), no_limit, item_sheet_width, IntType(1), ObjType(obj_category, idInt(sVar(tab), resources))->tbx_item_sheet_width, ID_action_res_item_sheet_size);
				tab_next(self);
				global::axis_edit = Y_;
				tab_control_dragger(self);
				draw_dragger(self, /*"resourcesitemsheetsizecolumns"*/ STR(3334), sVar(dx), sVar(dy), dragger_width, idVar(global::res_edit, item_sheet_size).Value(Y_), 1.0 / 10.0, IntType(1), no_limit, item_sheet_height, IntType(1), ObjType(obj_category, idInt(sVar(tab), resources))->tbx_item_sheet_height, ID_action_res_item_sheet_size);
				tab_next(self);
			}
			else
				if (idBool(global::res_edit, scenery_structure))
				{
					if (idInt(global::res_edit, scenery_palette_size) > IntType(0))
					{
						tab_control_menu(self);
						draw_button_menu(self, { /*"resourcesscenerystructurepalette"*/ STR(1363), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), idVar(global::res_edit, scenery_palette), text_get({ /*"resourcesscenerystructurepalettenumber"*/ STR(1364), idVar(global::res_edit, scenery_palette) + IntType(1) }), ID_action_res_scenery_palette });
						tab_next(self);
					}
					VarType busy = sVar(window_busy);
					VarType focus = sVar(window_focus);
					tab_control_meter(self);
					draw_meter(self, /*"resourcesscenerystructureintegrity"*/ STR(3335), sVar(dx), sVar(dy), sVar(dw), round(idVar(global::res_edit, scenery_integrity) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), resources))->tbx_scenery_integrity, ID_action_res_scenery_integrity);
					tab_next(self);
					if ((focus == string(ObjType(obj_category, idInt(sVar(tab), resources))->tbx_scenery_integrity) && sVar(window_focus) == /*""*/ STR(0)) || (sVar(window_busy) == /*""*/ STR(0) && (busy == /*"resourcesscenerystructureintegrity"*/ STR(3335) || busy == /*"resourcesscenerystructureintegrityinputdrag"*/ STR(3336))))
					{
						withOne (Object, global::res_edit, self->id)
							res_load(self);
						
					}
					tab_control_checkbox(self);
					draw_checkbox(self, /*"resourcesscenerystructureintegrityinvert"*/ STR(3337), sVar(dx), sVar(dy), idVar(global::res_edit, scenery_integrity_invert), ID_action_res_scenery_integrity_invert);
					tab_next(self);
				}
		
		
		if ((idVar(global::res_edit, type) == e_res_type_BLOCK_SHEET || idVar(global::res_edit, type) == e_res_type_DOWNLOADED_SKIN || idVar(global::res_edit, type) == e_res_type_ITEM_SHEET || idVar(global::res_edit, type) == e_res_type_PACK || idVar(global::res_edit, type) == e_res_type_PARTICLE_SHEET || idVar(global::res_edit, type) == e_res_type_SKIN || idVar(global::res_edit, type) == e_res_type_TEXTURE || idVar(global::res_edit, type) == e_res_type_MODEL) && global::res_edit != global::mc_res && sReal(setting_advanced_mode) > 0 && sVar(project_render_material_maps) > 0)
		{
			tab_control_togglebutton(self);
			togglebutton_add(self, { /*"resourcesmaterialformatlabpbr"*/ STR(3338), null_, e_material_FORMAT_LABPBR, idVar(global::res_edit, material_format) == e_material_FORMAT_LABPBR, ID_action_res_material_format });
			togglebutton_add(self, { /*"resourcesmaterialformatseus"*/ STR(3339), null_, e_material_FORMAT_SEUS, idVar(global::res_edit, material_format) == e_material_FORMAT_SEUS, ID_action_res_material_format });
			draw_togglebutton(self, /*"resourcesmaterialformat"*/ STR(3340), sVar(dx), sVar(dy));
			tab_next(self);
		}
		if (idVar(global::res_edit, filename) != /*""*/ STR(0))
		{
			IntType wid = text_max_width({ /*"resourcesfilenameopen"*/ STR(3341) }) + IntType(20);
			capwid = text_caption_width(self, { /*"resourcesfilename"*/ STR(3342) });
			tab_control(self, IntType(24));
			draw_set_font(sInt(font_label));
			wid = string_width(text_get({ /*"resourcesfilename"*/ STR(3342) }) + /*":"*/ STR(755));
			sBool(tip_wrap) = false;
			tip_set(self, string_remove_newline(sStr(project_folder) + /*"/"*/ STR(16) + idVar(global::res_edit, filename)), sVar(dx), sVar(dy), sVar(dw) - wid, IntType(24));
			sBool(tip_wrap) = true;
			draw_label(self, { text_get({ /*"resourcesfilename"*/ STR(3342) }) + /*":"*/ STR(755), sVar(dx), sVar(dy) + IntType(14), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
			draw_label(self, { string_limit(string_remove_newline(idVar(global::res_edit, filename)), sVar(dw) - wid - IntType(32)), sVar(dx) + wid + IntType(8), sVar(dy) + IntType(14), fa_left, fa_middle, global::c_text_main, global::a_text_main, sInt(font_value) });
			if (draw_button_icon(self, { /*"resourcesfilenameopen"*/ STR(3341), sVar(dx) + sVar(dw) - IntType(24), sVar(dy), IntType(24), IntType(24), false, icons_FOLDER, null_, idVar(global::res_edit, type) == e_res_type_SCENERY, /*"tooltipresourceopen"*/ STR(3343) }))
				open_url(sStr(project_folder) + /*"/"*/ STR(16) + idVar(global::res_edit, filename));
			tab_next(self);
		}
		return 0.0;
	}
	
	void tab_settings_controls(ScopeAny self)
	{
		tab_control(self, IntType(20));
		draw_label(self, { text_get({ /*"settingscontrolskeybinds"*/ STR(3344) }) + /*":"*/ STR(755), sVar(dx), sVar(dy) + IntType(10), fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		tab_next(self);
		tab_control_switch(self);
		draw_button_collapse(self, /*"file"*/ STR(115), DsMap(global::collapse_map).Value(/*"file"*/ STR(115)), null_, true, /*"settingscontrolsfile"*/ STR(3345));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"file"*/ STR(115)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_PROJECT_NEW, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PROJECT_OPEN, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PROJECT_SAVE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PROJECT_SAVE_AS, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_IMPORT_ASSET, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"edit"*/ STR(116), DsMap(global::collapse_map).Value(/*"edit"*/ STR(116)), null_, true, /*"settingscontrolsedit"*/ STR(3346));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"edit"*/ STR(116)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_UNDO, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_REDO, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TIMELINE_DELETE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TIMELINE_DUPLICATE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TIMELINE_SELECT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TIMELINE_HIDE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TIMELINE_SHOW_HIDDEN, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CREATE_FOLDER, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_KEYFRAMES_CREATE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_KEYFRAMES_COPY, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_KEYFRAMES_CUT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_KEYFRAMES_PASTE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_KEYFRAMES_DELETE, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"tools"*/ STR(117), DsMap(global::collapse_map).Value(/*"tools"*/ STR(117)), null_, true, /*"settingscontrolstools"*/ STR(3347));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"tools"*/ STR(117)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_TOOL_SELECT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TOOL_MOVE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TOOL_ROTATE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TOOL_SCALE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TOOL_BEND, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_TOOL_TRANSFORM, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_SNAP, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"viewport"*/ STR(118), DsMap(global::collapse_map).Value(/*"viewport"*/ STR(118)), null_, true, /*"settingscontrolsviewport"*/ STR(3348));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"viewport"*/ STR(118)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_RENDER_MODE, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PARTICLES_SPAWN, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PARTICLES_CLEAR, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_SECONDARY_VIEW, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"timeline"*/ STR(119), DsMap(global::collapse_map).Value(/*"timeline"*/ STR(119)), null_, true, /*"settingscontrolstimeline"*/ STR(3349));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"timeline"*/ STR(119)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_PLAY, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_PLAY_BEGINNING, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_MARKER_LEFT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_MARKER_RIGHT, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"camera"*/ STR(120), DsMap(global::collapse_map).Value(/*"camera"*/ STR(120)), null_, true, /*"settingscontrolscamera"*/ STR(3350));
		tab_next(self);
		if (DsMap(global::collapse_map).Value(/*"camera"*/ STR(120)) > 0)
		{
			tab_collapse_start(self);
			draw_keybind(self, e_keybind_CAM_FORWARD, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_BACK, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_LEFT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_RIGHT, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_ASCEND, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_DESCEND, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_ROLL_FORWARD, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_ROLL_BACK, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_RESET, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_ROLL_RESET, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_FAST, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_SLOW, sVar(dx), sVar(dy));
			draw_keybind(self, e_keybind_CAM_VIEW_TIMELINE, sVar(dx), sVar(dy));
			sVar(dy) += IntType(8);
			tab_collapse_end(self);
		}
		tab_control_dragger(self);
		draw_dragger(self, /*"settingsmovespeed"*/ STR(3351), sVar(dx), sVar(dy), dragger_width, sReal(setting_move_speed), 0.01, IntType(0), no_limit, IntType(1), IntType(0), ObjType(obj_category, idInt(sVar(tab), controls))->tbx_move_speed, ID_action_setting_move_speed);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"settingslooksensitivity"*/ STR(3352), sVar(dx), sVar(dy), dragger_width, sReal(setting_look_sensitivity), 0.01, IntType(0), no_limit, IntType(1), IntType(0), ObjType(obj_category, idInt(sVar(tab), controls))->tbx_look_sensitivity, ID_action_setting_look_sensitivity);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"settingsfastmodifier"*/ STR(3353), sVar(dx), sVar(dy), dragger_width, sReal(setting_fast_modifier), 0.01, IntType(0), no_limit, IntType(3), IntType(0), ObjType(obj_category, idInt(sVar(tab), controls))->tbx_fast_modifier, ID_action_setting_fast_modifier);
		tab_next(self);
		tab_control_dragger(self);
		draw_dragger(self, /*"settingsslowmodifier"*/ STR(3354), sVar(dx), sVar(dy), dragger_width, sReal(setting_slow_modifier), 0.01, IntType(0), no_limit, 0.25, IntType(0), ObjType(obj_category, idInt(sVar(tab), controls))->tbx_slow_modifier, ID_action_setting_slow_modifier);
		tab_next(self);
		tab_control_button_label(self);
		draw_button_label(self, /*"settingscontrolsrestoredefaults"*/ STR(3355), sVar(dx) + (RealType)sVar(dw) / 2.0, sVar(dy), null_, icons_RESET, e_button_PRIMARY, ID_action_restore_controls, fa_middle);
		tab_next(self);
	}
	
	void tab_settings_interface(ScopeAny self)
	{
		sVar(dy) += label_height + IntType(6);
		draw_label(self, { text_get({ /*"settingsappearance"*/ STR(3356) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		tab_control_togglebutton(self);
		togglebutton_add(self, { /*"settingsthemelight"*/ STR(3357), null_, global::theme_light, sInt(setting_theme) == global::theme_light, ID_action_setting_theme });
		togglebutton_add(self, { /*"settingsthemedark"*/ STR(3358), null_, global::theme_dark, sInt(setting_theme) == global::theme_dark, ID_action_setting_theme });
		togglebutton_add(self, { /*"settingsthemedarker"*/ STR(3359), null_, global::theme_darker, sInt(setting_theme) == global::theme_darker, ID_action_setting_theme });
		draw_togglebutton(self, /*"settingstheme"*/ STR(3360), sVar(dx), sVar(dy), true, true);
		tab_next(self);
		VarType accentboxx, accentboxy;
		RealType accentboxw, accentboxh;
		accentboxx = sVar(dx);
		accentboxy = sVar(dy) + IntType(22);
		accentboxw = (sVar(dw) - (IntType(7) * IntType(4))) / 5.0;
		accentboxh = (global::_app->panel_compact > 0) ? IntType(24) : IntType(48);
		tab_control(self, (accentboxh * IntType(2)) + IntType(7) + IntType(22));
		draw_label(self, { text_get({ /*"settingsaccentcolor"*/ STR(3361) }), sVar(dx), accentboxy - IntType(7), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
		for (IntType i = IntType(0); i < IntType(10); i++)
		{
			if (draw_button_accent(self, accentboxx, accentboxy, accentboxw, accentboxh, i) && i == IntType(9))
			{
				colorpicker_show(self, /*"settingsaccentcolor"*/ STR(3361), sVar(setting_accent_custom), sVar(setting_accent_custom), ID_action_setting_accent_custom, accentboxx, accentboxy, accentboxw, accentboxh);
				sVar(update_interface_timeout) = current_time() + IntType(10000);
				sBool(update_interface_wait) = true;
			}
			accentboxx += accentboxw + IntType(7);
			if (i == IntType(4))
			{
				accentboxx = sVar(dx);
				accentboxy += IntType(7) + accentboxh;
			}
		}
		tab_next(self);
		sVar(dy) += IntType(5);
		tab_control_menu(self);
		draw_button_menu(self, { /*"settingslanguage"*/ STR(1452), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sStr(setting_language_filename), text_get({ /*"filelanguage"*/ STR(1214) }), null_, false, null_, null_, text_get({ /*"filelocale"*/ STR(1215) }), null_, null_ });
		tab_next(self);
		tab_control(self, IntType(24));
		if (draw_button_icon(self, { /*"settingslanguagefolder"*/ STR(3362), sVar(dx), sVar(dy), IntType(24), IntType(24), false, icons_FOLDER, null_, false, /*"tooltiplanguagefolder"*/ STR(3363) }))
			open_url(languages_directory);
		draw_button_icon(self, { /*"settingslanguageadd"*/ STR(3364), sVar(dx) + IntType(24) + IntType(4), sVar(dy), IntType(24), IntType(24), false, icons_PLUS, ID_language_add, false, /*"tooltiplanguageadd"*/ STR(3365) });
		tab_next(self);
		if (interface_scale_default_get() > IntType(1))
		{
			tab_control_switch(self);
			draw_switch(self, /*"settingsinterfacescaleauto"*/ STR(3366), sVar(dx), sVar(dy), sVar(setting_interface_scale_auto), ID_action_setting_interface_scale_auto, /*"settingsinterfacescaleautotip"*/ STR(3367));
			tab_next(self);
			if (!(sVar(setting_interface_scale_auto) > 0))
			{
				tab_control_meter(self);
				draw_button_menu(self, { /*"settingsinterfacescale"*/ STR(1460), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sVar(setting_interface_scale), string(sVar(setting_interface_scale) * IntType(100)) + /*"%"*/ STR(204), ID_action_setting_interface_scale });
				tab_next(self);
			}
		}
		tab_control_switch(self);
		draw_switch(self, /*"settingscompact"*/ STR(3368), sVar(dx), sVar(dy), sVar(setting_interface_compact), ID_action_setting_interface_compact);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingscompacttimeline"*/ STR(3369), sVar(dx), sVar(dy), sReal(setting_timeline_compact), ID_action_setting_timeline_compact);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingsreducedmotion"*/ STR(3370), sVar(dx), sVar(dy), sVar(setting_reduced_motion), ID_action_setting_reduced_motion);
		tab_next(self);
		sVar(dy) += label_height + IntType(6);
		draw_label(self, { text_get({ /*"settingsworkbench"*/ STR(3371) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		tab_control_switch(self);
		draw_switch(self, /*"settingssearchvariants"*/ STR(3372), sVar(dx), sVar(dy), sVar(setting_search_variants), ID_action_setting_search_variants);
		tab_next(self);
		sVar(dy) += label_height + IntType(6);
		draw_label(self, { text_get({ /*"settingstimeline"*/ STR(3373) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		tab_control_switch(self);
		draw_switch(self, /*"settingstimelineautoscroll"*/ STR(3374), sVar(dx), sVar(dy), sVar(setting_timeline_autoscroll), ID_action_setting_timeline_autoscroll);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingstimelineselectjump"*/ STR(3375), sVar(dx), sVar(dy), sVar(setting_timeline_select_jump), ID_action_setting_timeline_select_jump);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingstimelineframesnap"*/ STR(3376), sVar(dx), sVar(dy), sVar(setting_timeline_frame_snap), ID_action_setting_timeline_frame_snap, /*"settingstimelineframesnaptip"*/ STR(3377));
		tab_next(self);
		sVar(dy) += label_height + IntType(6);
		draw_label(self, { text_get({ /*"settingstools"*/ STR(3378) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		tab_control_switch(self);
		draw_switch(self, /*"settingszisup"*/ STR(3379), sVar(dx), sVar(dy), sReal(setting_z_is_up), ID_action_setting_z_is_up);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingsseparatetoolmodes"*/ STR(3380), sVar(dx), sVar(dy), sVar(setting_separate_tool_modes), ID_action_setting_separate_tool_modes, /*"settingsseparatetoolmodestip"*/ STR(3381));
		tab_next(self);
		sVar(dy) += label_height + IntType(6);
		draw_label(self, { text_get({ /*"settingsviewport"*/ STR(3382) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
		sVar(dy) += IntType(8);
		tab_control_switch(self);
		draw_switch(self, /*"settingsgizmosfacecamera"*/ STR(3383), sVar(dx), sVar(dy), sVar(setting_gizmos_face_camera), ID_action_setting_gizmos_face_camera);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingsfadegizmos"*/ STR(3384), sVar(dx), sVar(dy), sVar(setting_fade_gizmos), ID_action_setting_fade_gizmos);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingscameralockmouse"*/ STR(3385), sVar(dx), sVar(dy), sVar(setting_camera_lock_mouse), ID_action_setting_camera_lock_mouse);
		tab_next(self);
		tab_control_switch(self);
		draw_switch(self, /*"settingsplacenew"*/ STR(3386), sVar(dx), sVar(dy), sVar(setting_place_new), ID_action_setting_place_new);
		tab_next(self);
	}
	
	void tab_settings_program(ScopeAny self)
	{
		tab_control_togglebutton(self);
		togglebutton_add(self, { /*"settingsmodesimple"*/ STR(3387), null_, false, !(sReal(setting_advanced_mode) > 0), ID_action_setting_program_mode });
		togglebutton_add(self, { /*"settingsmodeadvanced"*/ STR(3388), null_, true, sReal(setting_advanced_mode), ID_action_setting_program_mode });
		draw_togglebutton(self, /*"settingsmode"*/ STR(3389), sVar(dx), sVar(dy), true, true);
		tab_next(self);
		draw_tooltip_label(self, (sReal(setting_advanced_mode) > 0) ? /*"settingsmodeadvancedtip"*/ STR(3390) : /*"settingsmodesimpletip"*/ STR(3391), icons_INFO, e_toast_INFO);
		tab_control_menu(self);
		draw_button_menu(self, { /*"settingsminecraftversion"*/ STR(1390), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), sStr(setting_minecraft_assets_version), sStr(setting_minecraft_assets_version), ID_action_setting_minecraft_assets_version, false, null_, null_, /*""*/ STR(0), c_white, c_white });
		tab_next(self);
		tab_control_switch(self);
		draw_button_collapse(self, /*"backup"*/ STR(114), DsMap(global::collapse_map).Value(/*"backup"*/ STR(114)), ID_action_setting_backup, sVar(setting_backup), /*"settingsbackup"*/ STR(3392));
		tab_next(self);
		if (sVar(setting_backup) > 0 && DsMap(global::collapse_map).Value(/*"backup"*/ STR(114)) > 0)
		{
			tab_collapse_start(self);
			ObjType(obj_textbox, ObjType(obj_category, idInt(sVar(tab), program))->tbx_backup_time)->suffix = text_get({ /*"settingsbackuptimeminutes"*/ STR(3393) });
			tab_control_dragger(self);
			draw_dragger(self, /*"settingsbackuptime"*/ STR(3394), sVar(dx), sVar(dy), dragger_width, sReal(setting_backup_time), 0.1, IntType(1), IntType(120), IntType(3), IntType(1), ObjType(obj_category, idInt(sVar(tab), program))->tbx_backup_time, ID_action_setting_backup_time);
			tab_next(self);
			tab_control_dragger(self);
			draw_dragger(self, /*"settingsbackupamount"*/ STR(3395), sVar(dx), sVar(dy), dragger_width, sReal(setting_backup_amount), 0.1, IntType(1), IntType(20), IntType(5), IntType(1), ObjType(obj_category, idInt(sVar(tab), program))->tbx_backup_amount, ID_action_setting_backup_amount);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_button_collapse(self, /*"watermark"*/ STR(29), DsMap(global::collapse_map).Value(/*"watermark"*/ STR(29)), ID_action_setting_watermark_custom, sVar(setting_watermark_custom), /*"settingswatermark"*/ STR(3396));
		tab_next(self);
		if (sVar(setting_watermark_custom) > 0 && DsMap(global::collapse_map).Value(/*"watermark"*/ STR(29)) > 0)
		{
			tab_collapse_start(self);
			VarType directory = /*"../"*/ STR(2003) + directory_name(sStr(setting_watermark_fn)) + filename_name(sStr(setting_watermark_fn));
			if (sStr(setting_watermark_fn) == /*""*/ STR(0))
				directory = text_get({ /*"settingswatermarknone"*/ STR(3397) });
			tab_control(self, IntType(40));
			draw_label_value(self, sVar(dx), sVar(dy), sVar(dw) - IntType(56), IntType(40), text_get({ /*"settingswatermarkimagelocation"*/ STR(3398) }), directory, true);
			if (draw_button_icon(self, { /*"settingswatermarkimport"*/ STR(3399), sVar(dx) + sVar(dw) - (IntType(24) + IntType(4) + IntType(24)), sVar(dy) + IntType(8), IntType(24), IntType(24), false, icons_ASSET_IMPORT, null_, false, /*"tooltipimportwatermarkimage"*/ STR(3400) }))
				action_setting_watermark_import(self);
			if (draw_button_icon(self, { /*"settingswatermarkreset"*/ STR(3401), sVar(dx) + sVar(dw) - IntType(24), sVar(dy) + IntType(8), IntType(24), IntType(24), false, icons_RESET, null_, false, /*"tooltipresetwatermarkimage"*/ STR(3402) }))
				action_setting_watermark_reset(self);
			tab_next(self);
			sVar(dy) += label_height + IntType(6);
			draw_label(self, { text_get({ /*"settingswatermarkalignment"*/ STR(3403) }), sVar(dx), sVar(dy), fa_left, fa_bottom, global::c_text_tertiary, global::a_text_tertiary, sInt(font_label) });
			sVar(dy) += IntType(8);
			VarType dwold, dxold;
			dwold = sVar(dw);
			dxold = sVar(dx);
			sVar(dw) = floor((RealType)sVar(dw) / 2.0 - IntType(4));
			tab_control_togglebutton(self);
			togglebutton_add(self, { /*"settingswatermarkleft"*/ STR(1407), icons_ALIGN_LEFT, /*"left"*/ STR(188), sVar(setting_watermark_halign) == /*"left"*/ STR(188), ID_action_setting_watermark_halign });
			togglebutton_add(self, { /*"settingswatermarkcenter"*/ STR(1409), icons_ALIGN_CENTER, /*"center"*/ STR(1408), sVar(setting_watermark_halign) == /*"center"*/ STR(1408), ID_action_setting_watermark_halign });
			togglebutton_add(self, { /*"settingswatermarkright"*/ STR(1410), icons_ALIGN_RIGHT, /*"right"*/ STR(189), sVar(setting_watermark_halign) == /*"right"*/ STR(189), ID_action_setting_watermark_halign });
			draw_togglebutton(self, /*"settingswatermarkhalign"*/ STR(3404), sVar(dx), sVar(dy), false);
			sVar(dx) += (sVar(dw) + IntType(8));
			togglebutton_add(self, { /*"settingswatermarktop"*/ STR(1412), icons_ALIGN_TOP, /*"top"*/ STR(187), sVar(setting_watermark_valign) == /*"top"*/ STR(187), ID_action_setting_watermark_valign });
			togglebutton_add(self, { /*"settingswatermarkcenter"*/ STR(1409), icons_ALIGN_MIDDLE, /*"center"*/ STR(1408), sVar(setting_watermark_valign) == /*"center"*/ STR(1408), ID_action_setting_watermark_valign });
			togglebutton_add(self, { /*"settingswatermarkbottom"*/ STR(1413), icons_ALIGN_BOTTOM, /*"bottom"*/ STR(186), sVar(setting_watermark_valign) == /*"bottom"*/ STR(186), ID_action_setting_watermark_valign });
			draw_togglebutton(self, /*"settingswatermarkvalign"*/ STR(3405), sVar(dx), sVar(dy), false);
			tab_next(self);
			sVar(dx) = dxold;
			sVar(dw) = dwold;
			tab_control_meter(self);
			draw_meter(self, /*"settingswatermarkpadding"*/ STR(3406), sVar(dx), sVar(dy), sVar(dw), round(sReal(setting_watermark_padding) * IntType(100)), IntType(0), IntType(100), IntType(0), IntType(1), ObjType(obj_category, idInt(sVar(tab), program))->tbx_watermark_padding, ID_action_setting_watermark_padding);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"settingswatermarkscale"*/ STR(3407), sVar(dx), sVar(dy), sVar(dw), round(sReal(setting_watermark_scale) * IntType(100)), IntType(0), IntType(100), IntType(33), IntType(1), ObjType(obj_category, idInt(sVar(tab), program))->tbx_watermark_scale, ID_action_setting_watermark_scale);
			tab_next(self);
			tab_control_meter(self);
			draw_meter(self, /*"settingswatermarkopacity"*/ STR(3408), sVar(dx), sVar(dy), sVar(dw), round(sReal(setting_watermark_opacity) * IntType(100)), IntType(0), IntType(100), IntType(100), IntType(1), ObjType(obj_category, idInt(sVar(tab), program))->tbx_watermark_opacity, ID_action_setting_watermark_opacity);
			tab_next(self);
			tab_collapse_end(self);
		}
		tab_control_switch(self);
		draw_switch(self, /*"settingsspawncameras"*/ STR(3409), sVar(dx), sVar(dy), sVar(setting_spawn_cameras), ID_action_setting_spawn_cameras);
		tab_next(self);
		if (sReal(setting_advanced_mode) > 0)
		{
			tab_control_switch(self);
			draw_switch(self, /*"settingsunlimitedvalues"*/ STR(3410), sVar(dx), sVar(dy), sReal(setting_unlimited_values), ID_action_setting_unlimited_values);
			tab_next(self);
		}
		tab_control_switch(self);
		draw_switch(self, /*"settingssceneryremoveedges"*/ STR(3411), sVar(dx), sVar(dy), sVar(setting_scenery_remove_edges), ID_action_setting_scenery_remove_edges);
		tab_next(self);
	}
	
	RealType tab_set_collumns(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		sVar(tab_collumns) = argument[IntType(0)];
		if (!(sVar(tab_collumns) > 0))
		{
			sVar(dw) = sVar(tab_collumns_width);
			if (sReal(tab_collumns_index) != IntType(0))
				tab_next(self);
			sVar(dx) = sVar(tab_collumns_start_x);
			return IntType(0);
		}
		else
			sVar(tab_collumns_start_x) = sVar(dx);
		
		if (argument_count > IntType(1))
			sVar(tab_collumns_count) = argument[IntType(1)];
		else
			sVar(tab_collumns_count) = IntType(2);
		
		sReal(tab_collumns_index) = IntType(0);
		sVar(tab_collumns_width) = sVar(dw);
		return 0.0;
	}
	
	RealType tab_show(ScopeAny self, IntType tab)
	{
		IntType panel;
		panel = idInt(tab, panel);
		if (idReal(tab, show) > 0)
			return IntType(0);
		panel_tab_list_add(panel, ObjType(obj_panel, panel)->tab_list_amount, tab);
		idReal(tab, show) = true;
		return 0.0;
	}
	
	RealType tab_template_editor(ScopeAny self)
	{
		if (!instance_exists(global::temp_edit))
		{
			tab_close(self, sVar(tab));
			return IntType(0);
		}
		if (idVar(global::temp_edit, type) != e_temp_type_PARTICLE_SPAWNER)
			sVar(dh) -= 28.0;
		switch ((IntType)idVar(global::temp_edit, type))
		{
			case e_temp_type_CHARACTER:
			case e_temp_type_SPECIAL_BLOCK:
			case e_temp_type_BODYPART:
			{
				VarType labeltext;
				IntType list, capwid;
				if (idVar(global::temp_edit, type) == e_temp_type_CHARACTER)
				{
					labeltext = text_get({ /*"templateeditormodel"*/ STR(3412) });
					list = idInt(sVar(tab), char_list);
					capwid = IntType(0);
				}
				else
					if (idVar(global::temp_edit, type) == e_temp_type_SPECIAL_BLOCK)
					{
						labeltext = text_get({ /*"templateeditorblock"*/ STR(3413) });
						list = idInt(sVar(tab), special_block_list);
						capwid = IntType(0);
					}
					else
						if (idVar(global::temp_edit, type) == e_temp_type_BODYPART)
						{
							labeltext = text_get({ /*"templateeditormodel"*/ STR(3412) });
							list = idInt(sVar(tab), bodypart_model_list);
							capwid = text_caption_width(self, { /*"templateeditorbodypart"*/ STR(1304) });
						}
				
				
				IntType statelen, menus;
				RealType statesh, checkboxes;
				statelen = array_length(VarType::CreateRef(idVar(global::temp_edit, model_state)));
				statesh = ((idVar(global::temp_edit, type) == e_temp_type_BODYPART) ? IntType(32) : IntType(0));
				menus = IntType(0);
				checkboxes = IntType(0);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"true"*/ STR(745) && idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"false"*/ STR(746))
						menus++;
					else
						checkboxes++;
					
				}
				statesh += (IntType(32) * menus) + ((sReal(ui_small_height) + IntType(8)) * ceil(checkboxes / 2.0));
				sortlist_draw(self, list, sVar(dx), sVar(dy), sVar(dw), sVar(dh) - statesh, idVar(global::temp_edit, model_name), false);
				statelen = array_length(VarType::CreateRef(idVar(global::temp_edit, model_state)));
				statesh = ((idVar(global::temp_edit, type) == e_temp_type_BODYPART) ? IntType(32) : IntType(0));
				menus = IntType(0);
				checkboxes = IntType(0);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"true"*/ STR(745) && idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"false"*/ STR(746))
						menus++;
					else
						checkboxes++;
					
				}
				statesh += (IntType(32) * menus) + ((sReal(ui_small_height) + IntType(8)) * ceil(checkboxes / 2.0));
				VarType model = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(idVar(global::temp_edit, model_name));
				draw_set_font(sInt(font_label));
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					VarType state = idVar(global::temp_edit, model_state).Value(i);
					capwid = max({ capwid, string_width(minecraft_asset_get_name(/*"modelstate"*/ STR(744), state)) + IntType(8) });
				}
				VarType dyy = (sVar(dy) + sVar(dh) - statesh) + IntType(8);
				sVar(dy) = dyy;
				tab_set_collumns(self, { true, IntType(2) });
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"true"*/ STR(745) && idVar(global::temp_edit, model_state).Value(i + IntType(1)) != /*"false"*/ STR(746))
						continue;
					VarType state = idVar(global::temp_edit, model_state).Value(i);
					sVar(menu_model_current) = model;
					sInt(menu_model_state_current) = DsMap(ObjType(obj_model, model)->states_map).Value(state);
					tab_control(self, sReal(ui_small_height));
					if (draw_checkbox(self, /*"modelstate"*/ STR(744) + state, sVar(dx), sVar(dy), idVar(global::temp_edit, model_state).Value(i + IntType(1)) == /*"true"*/ STR(745), null_))
					{
						sInt(menu_model_state) = sInt(menu_model_state_current);
						IntType script = (idVar(global::temp_edit, type) == e_temp_type_BODYPART) ? ID_action_lib_bodypart_model_state : ID_action_lib_model_state;
						if (idVar(global::temp_edit, model_state).Value(i + IntType(1)) == /*"true"*/ STR(745))
							script_execute(self, { script, /*"false"*/ STR(746) });
						else
							script_execute(self, { script, /*"true"*/ STR(745) });
						
					}
					tab_next(self);
				}
				tab_set_collumns(self, { false });
				dyy = sVar(dy);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idVar(global::temp_edit, model_state).Value(i + IntType(1)) == /*"true"*/ STR(745) || idVar(global::temp_edit, model_state).Value(i + IntType(1)) == /*"false"*/ STR(746))
						continue;
					VarType state = idVar(global::temp_edit, model_state).Value(i);
					sVar(menu_model_current) = model;
					sInt(menu_model_state_current) = DsMap(ObjType(obj_model, model)->states_map).Value(state);
					draw_button_menu(self, { state, e_menu_LIST, sVar(dx), dyy, sVar(dw), IntType(24), idVar(global::temp_edit, model_state).Value(i + IntType(1)), minecraft_asset_get_name(/*"modelstatevalue"*/ STR(747), idVar(global::temp_edit, model_state).Value(i + IntType(1))), (idVar(global::temp_edit, type) == e_temp_type_BODYPART) ? ID_action_lib_bodypart_model_state : ID_action_lib_model_state, false, null_, null_, /*""*/ STR(0), c_white, IntType(1), capwid });
					dyy += IntType(32);
				}
				sVar(menu_model_current) = null_;
				if (idVar(global::temp_edit, type) == e_temp_type_BODYPART)
					draw_button_menu(self, { /*"templateeditorbodypart"*/ STR(1304), e_menu_LIST, sVar(dx), dyy, sVar(dw), IntType(24), idVar(global::temp_edit, model_part_name), minecraft_asset_get_name(/*"modelpart"*/ STR(748), idVar(global::temp_edit, model_part_name)), ID_action_lib_model_part_name, false, null_, null_, /*""*/ STR(0), c_white, IntType(1), capwid });
				if (sBool(content_mouseon))
					sStr(window_scroll_focus) = string(ObjType(obj_sortlist, list)->scroll);
				break;
			}
			
			case e_temp_type_BLOCK:
			{
				IntType statelen, menus;
				RealType statesh, checkboxes;
				statelen = array_length(VarType::CreateRef(idArr(global::temp_edit, block_state)));
				menus = IntType(0);
				checkboxes = IntType(0);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"true"*/ STR(745) && idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"false"*/ STR(746))
						menus++;
					else
						checkboxes++;
					
				}
				statesh = (IntType(32) * menus) + ((sReal(ui_small_height) + IntType(8)) * ceil(checkboxes / 2.0));
				sortlist_draw(self, idInt(sVar(tab), block_list), sVar(dx), sVar(dy), sVar(dw), sVar(dh) - statesh, idVar(global::temp_edit, block_name), false);
				IntType block;
				block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(idVar(global::temp_edit, block_name));
				statelen = array_length(VarType::CreateRef(idArr(global::temp_edit, block_state)));
				menus = IntType(0);
				checkboxes = IntType(0);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"true"*/ STR(745) && idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"false"*/ STR(746))
						menus++;
					else
						checkboxes++;
					
				}
				statesh = (IntType(32) * menus) + ((sReal(ui_small_height) + IntType(8)) * ceil(checkboxes / 2.0));
				sVar(capwid) = IntType(0);
				draw_set_font(sInt(font_label));
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					VarType state = idArr(global::temp_edit, block_state).Value(i);
					sVar(capwid) = max({ sVar(capwid), string_width(minecraft_asset_get_name(/*"blockstate"*/ STR(763), state)) + IntType(8) });
				}
				VarType dyy = (sVar(dy) + sVar(dh) - statesh) + IntType(8);
				sVar(dy) = dyy;
				tab_set_collumns(self, { true, IntType(2) });
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"true"*/ STR(745) && idArr(global::temp_edit, block_state).Value(i + IntType(1)) != /*"false"*/ STR(746))
						continue;
					VarType state = idArr(global::temp_edit, block_state).Value(i);
					sVar(menu_block_current) = block;
					sInt(menu_block_state_current) = DsMap(ObjType(obj_block, block)->states_map).Value(state);
					tab_control(self, sReal(ui_small_height));
					if (draw_checkbox(self, /*"blockstate"*/ STR(763) + state, sVar(dx), sVar(dy), idArr(global::temp_edit, block_state).Value(i + IntType(1)) == /*"true"*/ STR(745), null_))
					{
						sInt(menu_block_state) = sInt(menu_block_state_current);
						if (idArr(global::temp_edit, block_state).Value(i + IntType(1)) == /*"true"*/ STR(745))
							script_execute(self, { ID_action_lib_block_state, /*"false"*/ STR(746) });
						else
							script_execute(self, { ID_action_lib_block_state, /*"true"*/ STR(745) });
						
					}
					tab_next(self);
				}
				tab_set_collumns(self, { false });
				dyy = sVar(dy);
				for (IntType i = IntType(0); i < statelen; i += IntType(2))
				{
					if (idArr(global::temp_edit, block_state).Value(i + IntType(1)) == /*"true"*/ STR(745) || idArr(global::temp_edit, block_state).Value(i + IntType(1)) == /*"false"*/ STR(746))
						continue;
					VarType state = idArr(global::temp_edit, block_state).Value(i);
					sVar(menu_block_current) = block;
					sInt(menu_block_state_current) = DsMap(ObjType(obj_block, block)->states_map).Value(state);
					draw_button_menu(self, { state, e_menu_LIST, sVar(dx), dyy, sVar(dw), IntType(24), idArr(global::temp_edit, block_state).Value(i + IntType(1)), minecraft_asset_get_name(/*"blockstatevalue"*/ STR(764), idArr(global::temp_edit, block_state).Value(i + IntType(1))), ID_action_lib_block_state, false, null_, null_, /*""*/ STR(0), c_white, IntType(1), sVar(capwid) });
					dyy += IntType(32);
				}
				sVar(menu_block_current) = null_;
				if (sBool(content_mouseon))
					sStr(window_scroll_focus) = string(ObjType(obj_sortlist, idInt(sVar(tab), block_list))->scroll);
				break;
			}
			
			case e_temp_type_ITEM:
			{
				VarType res = idVar(global::temp_edit, item_tex);
				if (!res_is_ready(res))
					res = global::mc_res;
				if (idInt(res, item_sheet_texture) == null_)
				{
					tab_close(self, sVar(tab));
					return IntType(0);
				}
				RealType slots_ = ((idVar(res, type) == e_res_type_PACK) ? VarType(ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list))) : (idVar(res, item_sheet_size).Value(X_) * idVar(res, item_sheet_size).Value(Y_)));
				draw_texture_picker(self, idVar(global::temp_edit, item_slot), idInt(res, item_sheet_texture), sVar(dx), sVar(dy), sVar(dw), sVar(dh), slots_, idVar(res, item_sheet_size).Value(X_), idVar(res, item_sheet_size).Value(Y_), idInt(sVar(tab), item_scroll), ID_action_lib_item_slot);
				if (sBool(content_mouseon))
					sStr(window_scroll_focus) = string(idInt(sVar(tab), item_scroll));
				break;
			}
			
			case e_temp_type_PARTICLE_SPAWNER:
			{
				tab_template_editor_particles(self);
				return IntType(0);
			}
			default:
				tab_close(self, sVar(tab));
				break;
		}
		
		return 0.0;
	}
	
}
